<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:thr="http://purl.org/syndication/thread/1.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en" xml:base="http://antoniocangiano.com/wp-atom.php">
	<title type="text">Zen and the Art of Programming</title>
	<subtitle type="text">By Antonio Cangiano, Software Engineer &amp; Technical Evangelist at IBM</subtitle>

	<updated>2009-01-21T15:45:13Z</updated>
	<generator uri="http://wordpress.org/" version="2.7">WordPress</generator>

	<link rel="alternate" type="text/html" href="http://antoniocangiano.com" />
	<id>http://antoniocangiano.com/feed/atom/</id>
	

			<link rel="self" href="http://feeds.feedburner.com/ZenAndTheArtOfRubyProgramming" type="application/atom+xml" /><feedburner:emailServiceId>1052009</feedburner:emailServiceId><feedburner:feedburnerHostname>http://www.feedburner.com</feedburner:feedburnerHostname><entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Install DB2 on Mac OS X and give us feedback]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/518147147/" />
		<id>http://antoniocangiano.com/?p=544</id>
		<updated>2009-01-21T15:45:13Z</updated>
		<published>2009-01-20T23:59:18Z</published>
		<category scheme="http://antoniocangiano.com" term="DB2" /><category scheme="http://antoniocangiano.com" term="Mac" />		<summary type="html"><![CDATA[A little over a week ago IBM released a new version of the DB2 beta for Mac OS X Leopard, following up on valuable feedback that we&#8217;d received in response to earlier versions. This version is important because it resolves a reported issue that was occurring when building drivers for languages like Ruby and PHP. [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2009/01/20/installing-db2-on-mac-os-x/">&lt;p&gt;A little over a week ago IBM released a new version of the DB2 beta for Mac OS X Leopard, following up on valuable feedback that we&amp;#8217;d received in response to earlier versions. This version is important because it resolves a reported issue that was occurring when building drivers for languages like Ruby and PHP. Hence, I highly encourage you to &lt;a href="http://www-01.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;download the latest DB2 for Mac now&lt;/a&gt; and save yourself the hassle of this issue.&lt;/p&gt;
&lt;p&gt;The installation procedure is fairly straightforward, but I&amp;#8217;ll spare you from having to read the &amp;#8220;Installing and setting up DB2 for Mac OS X&amp;#8221; PDF by providing some easy steps here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install DB2 on Mac&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Increase your system&amp;#8217;s parameters by creating or editing /etc/sysctl.conf. Add the following parameters, save the file, and reboot your machine.&lt;/p&gt;
&lt;pre class="highlight"&gt;
kern.sysv.shmmax=1073741824
kern.sysv.shmmin=1
kern.sysv.shmmni=4096
kern.sysv.shmseg=32
kern.sysv.shmall=1179648
kern.maxfilesperproc=65536
kern.maxfiles=65536
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;a href="http://www-01.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;Download&lt;/a&gt; and extract DB2 Express-C for Mac OS X. To extract the file you can run &lt;code&gt;tar -xvzf db2exc_952beta_MAC_x86_64.tar.gz&lt;/code&gt; from a terminal. cd into the extracted folder by running &lt;code&gt;cd exp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Run &lt;code&gt;sudo ./db2setup&lt;/code&gt; and follow the wizard that appears. (Note that this step assumes that you have Java 1.6 installed.)&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like specific instructions on installing Ruby and Rails, take a look at &lt;a href="http://antoniocangiano.com/2008/12/23/db2-on-mac-officially-released/"&gt;my previous post&lt;/a&gt; about this subject.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give us your feedback&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try out DB2 on your Mac, &lt;a href="http://pensamientoaleatorio.blogspot.com/2009/01/db2-on-mac.html"&gt;experiment with it&lt;/a&gt;, and let us know what you think. Tell us what are your impressions, what you like, what you dislike, and what you&amp;#8217;d want to see in future releases. Write me at cangiano{{AT}}ca.ibm.com, and I&amp;#8217;ll be happy to hear from you. If this release is particularly important to you and you&amp;#8217;re able to speak on behalf of your company, do feel free write as well, we are definitely looking for testimonials - and such letters could prove to be free exposure for your company as well. If you use DB2 on Mac in an interesting way, let us know about it. We truly value your opinions and are looking forward to hearing about how DB2 on Mac affects you.&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=LHZPCm.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=LHZPCm.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=lrbBMp.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=lrbBMp.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=AEHEdB.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=AEHEdB.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=4AkUrd.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=4AkUrd.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=J7tiQi.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=J7tiQi.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=om61F4.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=om61F4.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/518147147" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2009/01/20/installing-db2-on-mac-os-x/#comments" thr:count="1" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2009/01/20/installing-db2-on-mac-os-x/feed/atom/" thr:count="1" />
		<thr:total>1</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2009/01/20/installing-db2-on-mac-os-x/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Monte Carlo simulation of the Monty Hall Problem in Ruby and Python]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/500515428/" />
		<id>http://antoniocangiano.com/?p=524</id>
		<updated>2009-01-02T00:00:16Z</updated>
		<published>2009-01-01T22:55:17Z</published>
		<category scheme="http://antoniocangiano.com" term="Mathematics" /><category scheme="http://antoniocangiano.com" term="Python" /><category scheme="http://antoniocangiano.com" term="Ruby" />		<summary type="html"><![CDATA[Reading Jeff Atwood&#8217;s post The Problem of the Unfinished Game, reminded me of a similar problem. The Monty Hall Problem is a well known probability puzzle that has tricked many people. In fact, if you are not familiar with it already, chances are that you&#8217;ll get it wrong. And you would be in good company [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2009/01/01/monte-carlo-simulation-of-the-monty-hall-problem-in-ruby-and-python/">&lt;p&gt;Reading Jeff Atwood&amp;#8217;s post &lt;a href="http://www.codinghorror.com/blog/archives/001203.html"&gt;The Problem of the Unfinished Game&lt;/a&gt;, reminded me of a similar problem. The Monty Hall Problem is a well known probability puzzle that has tricked many people. In fact, if you are not familiar with it already, chances are that you&amp;#8217;ll get it wrong. And you would be in good company along with many mathematicians and physicists, including the great mathematician, Paul Erdos. This puzzle is loosely based on the television show &lt;em&gt;Let&amp;#8217;s Make a Deal&lt;/em&gt;, and is equivalent to some much older puzzles you may be familiar with (e.g. the three prisoners problem). In its simplest form, it asks the following question:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Suppose you&amp;#8217;re on a game show, and you&amp;#8217;re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what&amp;#8217;s behind the doors, opens another door, say No. 3, which has a goat. He then says to you, &amp;#8220;Do you want to pick door No. 2?&amp;#8221; Is it to your advantage to switch your choice?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This definition of the problem is admittedly ambiguous. Thankfully Wikipedia points us towards a more exact definition:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Suppose you&amp;#8217;re on a game show and you&amp;#8217;re given the choice of three doors. Behind one door is a car; behind the others, goats [that is, booby prizes]. The car and the goats were placed randomly behind the doors before the show. The rules of the game show are as follows: After you have chosen a door, the door remains closed for the time being. The game show host, Monty Hall, who knows what is behind the doors, now has to open one of the two remaining doors, and the door he opens must have a goat behind it. If both remaining doors have goats behind them, he chooses one randomly. After Monty Hall opens a door with a goat, he will ask you to decide whether you want to stay with your first choice or to switch to the last remaining door. Imagine that you chose Door 1 and the host opens Door 3, which has a goat. He then asks you &amp;#8220;Do you want to switch to Door Number 2?&amp;#8221; Is it to your advantage to change your choice?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p align="center"&gt;&lt;img src="http://antoniocangiano.com/images/monty.gif" alt="The Monty Hall Problem" /&gt;&lt;/p&gt;
&lt;p&gt;Think about it for a moment, then read on. To answer this question, most people will try to determine which of the two possible outcomes has a higher probability. Problems arise when trying to correctly calculate the probability of these two events though. There are two closed doors and the car could be behind either of them. Hence, most people&amp;#8217;s &amp;#8220;common sense&amp;#8221; and psychology leads them to believe that there is a 50% chance that the car is behind the initially selected door, and 50% that it&amp;#8217;s behind the other closed door that was offered up by Monty. Initially it would seem that switching or staying with the first choice doesn&amp;#8217;t really make a difference.&lt;/p&gt;
&lt;p&gt;Unfortunately that&amp;#8217;s not the right answer. The correct answer is that there is a two out of three chance of winning by switching to the other door; so switching is always to your advantage. This result is considered to be a paradox because it&amp;#8217;s very counterintuitive to the way that many people think. It is in fact so counterintuitive that most people will argue with you in an attempt to convince you otherwise. I invite you to check out the &lt;a href="http://en.wikipedia.org/wiki/Monty_Hall_problem"&gt;Wikipedia entry&lt;/a&gt; on the problem/paradox, to read a step-by-step explanation with figures about why switching gives you about 66.7% chance of winning the car and why staying with the initial choice gives you only a 33.3% success rate.&lt;/p&gt;
&lt;p&gt;When you make your first choice your probability of winning the car is only 1/3. If you decide to switch, you will win only if the first choice you made was wrong. And since your first choice came with a 2 out of 3 chance of picking a goat, switching will then (logically) give you 2/3 chance of winning. Another easy way to come to intuitively accept this surprising result, is to wildly exaggerate the terms of the problem. If there were a billion doors, you picked one, and then Monty proceeded to open up all the remaining doors but one, we&amp;#8217;d have a situation where it would be extremely unlikely that you picked the right door at the beginning, while it would be extremely likely that the remaining door was the one that was concealing the car.&lt;/p&gt;
&lt;p&gt;Even after reading several explanations and aids to understand these results, there are still people who are skeptical or refuse to believe them. Let&amp;#8217;s verify the outcome with a simulation.&lt;/p&gt;
&lt;p&gt;What you find below is a quick Ruby script that I wrote to run a Monte Carlo Simulation of the Monty Hall problem/paradox. It runs the game a million times and then measures how many times the player won by sticking with their first choice, and how many times switching would have led to winning the car.&lt;/p&gt;
&lt;div class="highlight"&gt;
&lt;pre&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby -w&lt;/span&gt;

&lt;span class="c1"&gt;# Monte Carlo simulation for the Monty Hall Problem:&lt;/span&gt;
&lt;span class="c1"&gt;# http://en.wikipedia.org/wiki/Monty_Hall_problem&lt;/span&gt;

&lt;span class="cm"&gt;=begin&lt;/span&gt;
&lt;span class="cm"&gt;When using a Ruby version older than 1.8.7&lt;/span&gt;
&lt;span class="cm"&gt;define the following two methods:&lt;/span&gt;

&lt;span class="cm"&gt;  class Array&lt;/span&gt;
&lt;span class="cm"&gt;    def shuffle&lt;/span&gt;
&lt;span class="cm"&gt;      self.sort_by { rand }&lt;/span&gt;
&lt;span class="cm"&gt;    end&lt;/span&gt;
&lt;span class="cm"&gt;    &lt;/span&gt;
&lt;span class="cm"&gt;    def choice&lt;/span&gt;
&lt;span class="cm"&gt;      self.shuffle.first&lt;/span&gt;
&lt;span class="cm"&gt;    end&lt;/span&gt;
&lt;span class="cm"&gt;  end&lt;/span&gt;
&lt;span class="cm"&gt;=end&lt;/span&gt;

&lt;span class="c1"&gt;# Utility class for the simulation of a single Monty Hall game.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MontyHall&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Return a number representing the player&amp;#39;s first choice.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pick_door&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Return the index of the door opened by the host.&lt;/span&gt;
  &lt;span class="c1"&gt;# This cannot represent a door hiding a car or the player&amp;#39;s chosen door.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_door&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;available_doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;available_doors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;available_doors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@doors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;available_doors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Return true if the player won by staying&lt;/span&gt;
  &lt;span class="c1"&gt;# with their first choice, false otherwise.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;staying_wins?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;won?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Return true if the player won by switching, false otherwise.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switching_wins?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;open_door&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;switched_pick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;open_door&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
    &lt;span class="n"&gt;won?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;switched_pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="c1"&gt;# Return true if the player&amp;#39;s final pick hides a car, false otherwise.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;won?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@doors&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
  &lt;span class="no"&gt;ITERATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1_000_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;
  &lt;span class="n"&gt;staying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;switching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="no"&gt;ITERATIONS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;mh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MontyHall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;picked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pick_door&lt;/span&gt;
    &lt;span class="n"&gt;revealed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reveal_door&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;staying&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staying_wins?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;switching&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switching_wins?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;revealed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;staying_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staying&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="n"&gt;switching_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;switching&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Staying: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;staying_rate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%.&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Switching: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;switching_rate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And here is an &amp;#8220;equivalent&amp;#8221; version I wrote in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;
&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Monte Carlo simulation for the Monty Hall Problem:&lt;/span&gt;
&lt;span class="sd"&gt;http://en.wikipedia.org/wiki/Monty_Hall_problem.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;

&lt;span class="n"&gt;DOORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pick_door&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return a number representing the player&amp;#39;s first choice.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_door&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return the index of the door opened by the host.&lt;/span&gt;
&lt;span class="sd"&gt;    This cannot be a door hiding a car or the player&amp;#39;s chosen door.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;all_doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;unavailable_doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;DOORS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;available_doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_doors&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;unavailable_doors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;available_doors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;staying_wins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return True if the player won by staying&lt;/span&gt;
&lt;span class="sd"&gt;    with their first choice, False otherwise.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;won&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switching_wins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;open_door&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return True if the player won by switching,&lt;/span&gt;
&lt;span class="sd"&gt;    False otherwise.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;other_doors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;open_door&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;switched_pick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;other_doors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;won&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;switched_pick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;won&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return True if the player&amp;#39;s final pick hides a car,&lt;/span&gt;
&lt;span class="sd"&gt;    False otherwise.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run the main simulation as many&lt;/span&gt;
&lt;span class="sd"&gt;    times as specified by the function argument.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOORS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;switching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;staying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;picked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pick_door&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;revealed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reveal_door&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;staying_wins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;staying&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;switching_wins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;revealed&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;switching&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;staying_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staying&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;switching_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;switching&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;100&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Staying: &lt;/span&gt;&lt;span class="si"&gt;%f%%&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;staying_rate&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Switching: &lt;/span&gt;&lt;span class="si"&gt;%f%%&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;switching_rate&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Even if you are not familiar with Ruby or Python, you may be able to understand what&amp;#8217;s going on here. The main body of the program emulates the game and keeps track of the number of victories when the player sticks with their initial choice, and when they switch. Notice that this code intentionally tries not to be clever, in order not to annoy &amp;#8220;skeptical&amp;#8221; people.&lt;/p&gt;
&lt;p&gt;There are many points in the code where correct assumptions about the problem would lead us to code that is faster and much more compact. For example, if the player wins a given game by sticking with his first answer, it&amp;#8217;s obvious that switching would have made him lose. We could just calculate the difference between 100 and the success rate of staying with the first choice, and we&amp;#8217;d obtain the success rate for switching. But here we are trying to simulate the problem as faithfully as possible and abstract as little as necessary.&lt;/p&gt;
&lt;p&gt;As always with Monte Carlo Simulations, the outcome is slightly variable during each run since it depends on random input; but by the law of large numbers, it will very slowly converge to the expected values (despite the pseudo-randomness used here). For example, when I executed the code above for the first time on my machine, I obtained the following:&lt;/p&gt;
&lt;pre&gt;
Staying: 33.382%.
Switching: 66.618%.
&lt;/pre&gt;
&lt;p&gt;The results of this simulation should be enough to convince you that the theoretical results are actually true; we are easily fooled, and the mathematicians who got it right were not making stuff up. &lt;img src='http://antoniocangiano.com/wp-includes/images/smilies/icon_wink.gif' alt=';-)' class='wp-smiley' /&gt; &lt;/p&gt;
&lt;p&gt;Happy New Year to my readers, I wish you all the best for a happy, successful 2009!&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=aTaQAj.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=aTaQAj.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=zo2LXG.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=zo2LXG.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=p4oJp2.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=p4oJp2.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=LL3iz0.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=LL3iz0.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=oKKhUr.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=oKKhUr.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=hWMz5F.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=hWMz5F.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/500515428" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2009/01/01/monte-carlo-simulation-of-the-monty-hall-problem-in-ruby-and-python/#comments" thr:count="23" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2009/01/01/monte-carlo-simulation-of-the-monty-hall-problem-in-ruby-and-python/feed/atom/" thr:count="23" />
		<thr:total>23</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2009/01/01/monte-carlo-simulation-of-the-monty-hall-problem-in-ruby-and-python/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Developers are blinded by the light]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/498881594/" />
		<id>http://antoniocangiano.com/?p=514</id>
		<updated>2008-12-31T00:01:06Z</updated>
		<published>2008-12-30T20:24:08Z</published>
		<category scheme="http://antoniocangiano.com" term="General" />		<summary type="html"><![CDATA[
Blinded by the light,
revved up like a deuce,
another runner in the night
&#8212; Bruce Springsteen

Humans are exceptionally bad at calculating odds. We let our limited experience strongly influence our perception of the likelihood of an event. For instance, we tend to vastly overestimate the odds of dying due to a terrorist attack, accidental firearm discharge, or [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/30/developers-are-blinded-by-the-light/">&lt;blockquote&gt;&lt;p&gt;
Blinded by the light,&lt;br /&gt;
revved up like a deuce,&lt;br /&gt;
another runner in the night&lt;br /&gt;
&amp;mdash; Bruce Springsteen
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Humans are exceptionally bad at calculating odds. We let our limited experience strongly influence our perception of the likelihood of an event. For instance, we tend to vastly overestimate the odds of dying due to a terrorist attack, accidental firearm discharge, or a hurricane, and vastly underestimate causes of deaths like falling, drowning or the flu. The reason for this is that the media constantly reminds us of the dangers of terrorism, hurricanes or flash stories about children who were accidentally shot. Seldom do you find stories about a person drowning, falling, or dying due to a flu being reported on the national news channels. News stories have a tendency to be sensationalized, so as to capture one&amp;#8217;s attention and hook in large audiences, and as such they contribute to peoples&amp;#8217; bias when it comes to estimating what is, and is not, likely to occur.&lt;/p&gt;
&lt;p&gt;Likewise, overexposure to blissfully happy lottery winners holding up their over-sized checks on TV and in the papers tends to distort peoples&amp;#8217; perception of the likelihood of winning by buying a single ticket. A more mathematical and objective approach to the problem would quickly reveal that the odds are much worse than they appear to be on the surface. [1]&lt;/p&gt;
&lt;p&gt;I can&amp;#8217;t help but notice that this is exactly what&amp;#8217;s happening to the development/startup world, too. It&amp;#8217;s the new gold rush. Far too many developers are trying to build the next big social network, be the next Facebook (or YouTube), gather crowds in the millions, in the hopes of being bought for a ridiculous sum of money by a large company. The media loves these sorts of stories.&lt;/p&gt;
&lt;p&gt;As a consequence, developers who are trying to build the next Facebook are akin to lottery ticket buyers. A few of them will succeed and win, but most will fail miserably. How many social networks do we really need? The ad-supported model works for some lucky companies that manage to attract huge crowds while keeping their expenses to a minimum (e.g. PlentyOfFish) or which get acquired (e.g. YouTube, who is otherwise costing Google money). Everyone else is burning cash and wasting the money and good faith of VCs in the process.&lt;/p&gt;
&lt;p&gt;I fear that a lot of developers are blinded by the light. Their perception of the actual odds of &amp;#8220;making it&amp;#8221; are skewed by the media&amp;#8217;s continuous coverage of million - if not billion - dollar acquisitions and success stories. And some VCs encourage this behavior in the hope of seeing great returns on their investments. After all these are very wealthy people, and they&amp;#8217;re are not interested in small scale success.&lt;/p&gt;
&lt;p&gt;Aside from the obvious waste of time and resources, I think that many developers are leaving excellent opportunities on the table in order to pursue a highly unlikely outcome. The ratio of the likelihood of making 10 million with a traditional business plan and the likelihood of making a billion a la YouTube, is not proportional to the different quality of life that those amounts can afford you. If you are broke, have $30K in credit card debt, or are middle class, you&amp;#8217;ll find that 10 million dollars could increase the quality of your life much more than going from 10 million to a billion ever could. And it&amp;#8217;s important to understand that aiming at a more likely, albeit smaller, outcome does not in any way prevent you from &amp;#8220;dreaming big&amp;#8221; afterward, once you&amp;#8217;ve already achieved success with your first (or first successful) venture.&lt;/p&gt;
&lt;p&gt;Would you rather enter a draw for a million dollars with a 1 in 20 chance of winning, or a draw for five hundred million dollars with a 1 in 50,000,000 chance? A rational person would opt for the first, yet most startups today are leaning towards the second draw. They do so because they vastly overestimate their odds of being successful with the second draw.&lt;/p&gt;
&lt;p&gt;Create a product and charge people for it. Unless you really have to, don&amp;#8217;t take VC money, instead consider bootstrapping your company. One of the main advantages of the software world is the exceptionally small amount of capital needed to get started. If you want to stick to Web applications, use the Software as a Service (SaaS) model and make your users pay for the software and service you provide. You&amp;#8217;ll have a much smaller audience, less scalability problems and expenses, and a whole lot more revenue and a greater chance of being profitable. Joel Spolsky (with &lt;a href="http://www.joelonsoftware.com/items/2008/12/29.html"&gt;his gorgeous office spaces&lt;/a&gt;) makes millions in revenue thanks to a company that, for most of its existence, has sold a web bug tracker. How many free bug trackers do you know of? How many competitors exist in that market? Many, I&amp;#8217;m sure. Yet while Joel&amp;#8217;s popularity no doubt helped his company, it still showcases how a business can be successful by building a better mouse trap.&lt;/p&gt;
&lt;p&gt;But like David Heinemeier Hansson mentioned, there are countless under the radar companies making money like that. [2] If you take your eyes off the spotlight, you&amp;#8217;ll see that many companies are very successful at what they do, though they&amp;#8217;re not famous or making news headlines. Some of them actually strive to not attract too much attention to their success (often measured in millions of dollars), in order to prevent competitors from springing up.&lt;/p&gt;
&lt;p&gt;Regardless of whether you&amp;#8217;re a household name or not, you don&amp;#8217;t even have to create Web applications to be majorly successful. Mobile apps for smartphones, including the iPhone, come to mind. But good old-fashioned desktop applications keep a wide range of software companies in business. That&amp;#8217;s why the skewed perception that you can&amp;#8217;t make money with commercial desktop software anymore, or that desktop applications are dead, is utterly ridiculous. As a developer/micro ISV/startup, your chances of making money with well designed desktop software are much higher than building any sort of YouTube, Flickr or Facebook clone.&lt;/p&gt;
&lt;p&gt;To understand how skewed our perceptions are, you just need to talk with companies who are open to sharing their software sales statistics. You&amp;#8217;ll be shocked by the amount of money that&amp;#8217;s being made with relatively common software. Balsamiq makes a UI sketching application that sells for $79. The author managed to make &lt;a href="http://www.balsamiq.com/blog/?p=424"&gt;$100K in revenue in the first 5 months&lt;/a&gt;, mostly by selling the desktop version of his application. And he is certainly far from being one of the biggest winners in this industry. I mention this though because it shows how a decent idea that&amp;#8217;s well executed can quickly bring in revenue when you charge your users. And if you think that $100K in five months is small, let me ask you how many free web sites manage to net a comparable monthly income. If you are looking for larger revenues, check out &lt;a href="http://www.omnigroup.com/applications/OmniGraffle/"&gt;Omni Graffle&lt;/a&gt;, which earned The Omni Group millions of dollars, or set your sights on B2B applications (in which market some applications sell for thousand of dollars a piece).&lt;/p&gt;
&lt;p&gt;While many developers are blinded by the light, wise ones with a mind for entrepreneurship are building actual software businesses. I invite you to get out there and do the same.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Footnotes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[1] The concepts I summarized here are much more eloquently illustrated by Dan Gilbert in &lt;a href="http://www.ted.com/index.php/talks/dan_gilbert_researches_happiness.html"&gt;this TED talk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[2] David Heinemeier Hansson makes a similar point in &lt;a href="http://www.37signals.com/svn/posts/1495-the-untold-millions"&gt;a post of his&lt;/a&gt; which inspired this one.&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=bt0tlX.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=bt0tlX.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=KGjuYX.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=KGjuYX.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=d1r9Wy.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=d1r9Wy.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=E6ByxU.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=E6ByxU.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=3rXjJf.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=3rXjJf.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=HYmVXa.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=HYmVXa.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/498881594" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/30/developers-are-blinded-by-the-light/#comments" thr:count="14" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/30/developers-are-blinded-by-the-light/feed/atom/" thr:count="14" />
		<thr:total>14</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/30/developers-are-blinded-by-the-light/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Random thoughts on software piracy and open source business models]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/497158887/" />
		<id>http://antoniocangiano.com/?p=506</id>
		<updated>2008-12-28T19:19:34Z</updated>
		<published>2008-12-28T18:54:41Z</published>
		<category scheme="http://antoniocangiano.com" term="General" />		<summary type="html"><![CDATA[In a recent blog entry, Jeff Atwood discussed the subject of software piracy, bringing up the example of a succesfull indie game called World of Goo, whose estimated piracy rate is about 82% (initially reported as 90%).
Perhaps in an effort to appeal to the ethical side of his readers, Jeff underlines how &#8220;this is not [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/28/random-thoughts-on-software-piracy-and-open-source-business-models/">&lt;p&gt;&lt;img src="http://antoniocangiano.com/images/pirate_logo.gif" align="right" /&gt;In &lt;a href="http://www.codinghorror.com/blog/archives/001201.html"&gt;a recent blog entry&lt;/a&gt;, Jeff Atwood discussed the subject of software piracy, bringing up the example of a succesfull indie game called &lt;a href="http://www.worldofgoo.com/"&gt;World of Goo&lt;/a&gt;, whose estimated piracy rate is about 82% (initially reported as 90%).&lt;/p&gt;
&lt;p&gt;Perhaps in an effort to appeal to the ethical side of his readers, Jeff underlines how &amp;#8220;this is not a game that &lt;em&gt;deserves&lt;/em&gt; to be pirated&amp;#8221;, how it&amp;#8217;s developed by a team of two indie developers &amp;#8220;not another commercial product extruded from the bowels of some faceless Activision-EA corporate game franchise sweatshophow&amp;#8221;, and how its low price point makes it affordable (it&amp;#8217;s currently on sale for $15).&lt;/p&gt;
&lt;p&gt;I understand the psychological reasons behind those arguments, but I don&amp;#8217;t feel that their implications are acceptable. No software deserves to be pirated, whether it costs 15 bucks or 3 million dollars, if it&amp;#8217;s developed by a single programmer who&amp;#8217;ll end up bankrupt or by a huge corporation like Microsoft. Piracy is unlawful, independently from the cost or creator of the object at hand. It is not theft, but it&amp;#8217;s still wrong and a violation of a licensing agreement.&lt;/p&gt;
&lt;p&gt;Piracy is rampant and the 82 or 90% figure is not far-fetched, I&amp;#8217;m sure. The software industry is in fact in a similar position as the music industry. And Jeff gets two important points right. First, there is no point in punishing your legitimate customers with DRM and other inconveniences. It&amp;#8217;s OK to &amp;#8220;keep honest people honest&amp;#8221;, but going out of your way to prevent piracy can do more harm than good, as EA learned through their &lt;a href="http://en.wikipedia.org/wiki/Spore_(game)"&gt;Spore&lt;/a&gt; experience. In December, EA finally released a DRM-free version of Spore on &lt;a href="http://store.steampowered.com/about/"&gt;Steam&lt;/a&gt; which is considered by many to be an acceptable method for delivering games. According to many people it offers a decent balance between software protection and the level of annoyance for users. Second, it is absurd to assume that the 90% of non-paying users of your software would have bought it if they couldn&amp;#8217;t get a hold of a pirated copy. The BSA and RIAA&amp;#8217;s astronomical claims in this regard are utter bullshit, which conveninetly ignores both simple economics and reality.&lt;/p&gt;
&lt;p&gt;Jeff&amp;#8217;s post then goes on to argue that the best anti-piracy strategy is to build a great product and charge a fair price for it. &lt;em&gt;World of Goo&lt;/em&gt; itself proves that those two points do not constitute a reliable strategy when it comes to reducing piracy. That game is truly a great product (I don&amp;#8217;t like games and even I enjoyed the demo) and it sells for what is arguably a very reasonable price. What&amp;#8217;s true though, is that the secret of being successful in the business of software is to create programs that people want, and to price them accordingly so that the legitimate &amp;#8220;10% crowd&amp;#8221; will be open to buying them. It&amp;#8217;s not the best anti-piracy strategy in the sense that independently from the quality and price, people will still pirate your software anyway. It is however the best business strategy, since it&amp;#8217;s an appealing offer to your pool of potential buyers.&lt;/p&gt;
&lt;p&gt;In addition to that, a third point that actually reduces piracy is offering additional value to genuine users. You could for example reward your customers by providing them with physical goods (e.g. a manual, stickers, posters, etc&amp;#8230;), access to an online support community and/or allowing them access to additional sever side services which are not available to illegitimate users.&lt;/p&gt;
&lt;p&gt;I think that the lesson here is the same one that can be applied to the music world. Focus on quality, price in a manner that is appealing to your audience, take same basic technical counter measures to keep people honest, and then just ignore piracy. You cannot protect your software, no matter what you do. It&amp;#8217;s annoying, but piracy is not going away, so any effort put towards penalizing your paying customers in a futile attempt to combat it, will only hurt your business.&lt;/p&gt;
&lt;p&gt;It is also true that other business models exist, even though they are not always applicable to every type of program. For example, Software as a Service (SaaS) takes care of piracy by providing sofware server-side, once users have been charged a fee. This also has the added benefit of enabling a recurring billing cycle that would have been far less welcomed by consumers and small businesses, were it to be applied to a standard shrinkwrapped piece of software. But I don&amp;#8217;t feel that piracy is a strong enough argumentation for killing off desktop application development, whenever a desktop app is better suited than a web one for a given job.&lt;/p&gt;
&lt;p&gt;Amongst other alternative business models that kill piracy, there are open source ones. The open source world can claim to have accomplished many great things software wise, but it seldom provides viable ways of earning money directly from software. In a rebuttal to Jeff&amp;#8217;s post, Dare Obasanjo (a Microsoft Evangelist) provides three open source business models and shows how they rarely fit the reality of B2C shrinkwrapped software. Quoting from &lt;a href="http://www.25hoursaday.com/weblog/2008/12/27/TheMythOfTheOpenSourceBusinessModel.aspx"&gt;his post&lt;/a&gt;, these points are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Selling support, consulting and related services for the &amp;#8220;free&amp;#8221; software (aka the professional open source business model ) – Red Hat&lt;/li&gt;
&lt;li&gt;Dual license the code and then sell traditional software licenses to enterprise customers who are scared of the GPL – MySQL AB&lt;/li&gt;
&lt;li&gt;Build a proprietary Web application powered by Open Source software – Google&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;There may be variations, but those are the main ones. Some people may raise objections against the second point. Why would companies be scared of the GPL? Working for IBM, I&amp;#8217;ve experienced a bit of the enteprise world, and let me tell you that Dare is absolutely right. Many companies in the enteprise space are scared by open source software, particularly those programs released under the GPL license (due to its possible viral implications), and wouldn&amp;#8217;t touch them with a ten foot pole. I have seen companies spend thousands of dollars on products that were available for free under the GPL license, mainly due to the legal implications of using GPL software.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice how none of these models are really applicable to B2C desktop applications. So, as far as desktop applications are concerned, the traditional &amp;#8220;Word of Goo approach&amp;#8221; is the right way to go.&lt;/p&gt;
&lt;p&gt;Moving away from the problem of software piracy, the inadequacy of the main open source model when it comes to the world of shrinkwrapped software brings us to two points that I feel are worth bringing up. Let me prefix this by saying that I believe in the value of open source, but I do see fundamental flaws in the business models surrounding it. The first is that it&amp;#8217;s the developer&amp;#8217;s right to charge for software they produce. Freedom 2 of Richard Stallman&amp;#8217;s free software philosophy (&amp;#8221;The freedom to redistribute copies so you can help your neighbor&amp;#8221;) works against developers&amp;#8217; best interests. People should be paid for the fruits of their labor, whether copying it is almost free (like in the case of digital content) or not. And this is true for software, songs, videos or any digitally transmissible content.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s nice that people decided to volunteer their time to build an empire of free software that&amp;#8217;s openly available to everyone. It&amp;#8217;s a huge accomplishment that derives from the GNU philosophy, but it should be viewed as the same thing as when lawyers do pro bono work. We shouldn&amp;#8217;t expect developers (or lawyers, or architects, or similar professionals) to stop charging for the product of their work. Again, I think it&amp;#8217;s great that developers help each other with free tools and libraries for developing programs, but there is no reason why people should be ashamed to sell their programs commercially to businesses and consumers, and make a living off of them.&lt;/p&gt;
&lt;p&gt;In fact, selling software, whether desktop, mobile or web based, is a great way of earning money. The proliferation of startups is a testament to many people&amp;#8217;s desire to combine their love of the software craft with the possibility of acquiring wealth. &amp;#8220;But Antonio, developers can make money by selling support and related services&amp;#8221; I hear you say. And this brings us to a second flaw of FOSS. Instead of being paid for writing the best software you can, you get paid for providing technical support to the few people who buy it or the occasional ad-hoc customization. Where is the incentive to provide good documentation and easy to use quality software, when your livehood depends on your customers needing help from you? As a developer, would you rather spend your time building great software or act as a customer service representative? Consulting or providing technical support doesn&amp;#8217;t scale nearly as much as software sales do. You can sell 10,000 copies of your application without lifting a finger, but you can&amp;#8217;t scale to 10,000 people paying for technical support that easily. Both approaches can bring in similar revenues, but while the first requires an indie developer, the second requires a full blown company with many, many technical agents.&lt;/p&gt;
&lt;p&gt;Open source models are fine, when they actually make business sense, but programmers should not be afraid to charge for their software. Trying to avoid piracy by switching to an inferiror business model that gives software away for free is foolish. Accept piracy as a necessary evil, and focus your attention on coding and promoting your commercial applications.&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=FN8wPH.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=FN8wPH.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=o6GgJL.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=o6GgJL.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=UGakL2.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=UGakL2.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=P4XRcn.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=P4XRcn.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=tNutpg.O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=tNutpg.O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=LTDmTx.o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=LTDmTx.o" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/497158887" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/28/random-thoughts-on-software-piracy-and-open-source-business-models/#comments" thr:count="13" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/28/random-thoughts-on-software-piracy-and-open-source-business-models/feed/atom/" thr:count="13" />
		<thr:total>13</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/28/random-thoughts-on-software-piracy-and-open-source-business-models/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[DB2 on Mac officially released]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/493524757/" />
		<id>http://antoniocangiano.com/?p=463</id>
		<updated>2008-12-24T18:43:47Z</updated>
		<published>2008-12-23T22:41:00Z</published>
		<category scheme="http://antoniocangiano.com" term="DB2" /><category scheme="http://antoniocangiano.com" term="Mac" /><category scheme="http://antoniocangiano.com" term="Ruby" /><category scheme="http://antoniocangiano.com" term="Ruby on Rails" />		<summary type="html"><![CDATA[As pre-announced in my two previous posts, DB2 for Mac OS X Leopard is finally available for download. It&#8217;s now official, DB2 on Mac is here.
Reflections on DB2 on Mac
Several people, including myself, would happily ditch their virtual machines and start introducing DB2 into their native Mac development stacks. But this milestone represents much more [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/23/db2-on-mac-officially-released/">&lt;p&gt;As pre-announced in my two &lt;a href="http://antoniocangiano.com/2008/12/12/db2-on-mac-to-ship-before-christmas/"&gt;previous&lt;/a&gt; &lt;a href="http://antoniocangiano.com/2008/12/19/download-db2-on-mac/"&gt;posts&lt;/a&gt;, DB2 for Mac OS X Leopard is finally &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;available for download&lt;/a&gt;. It&amp;#8217;s now official, DB2 on Mac is here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reflections on DB2 on Mac&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Several people, including myself, would happily ditch their virtual machines and start introducing DB2 into their native Mac development stacks. But this milestone represents much more than the immediate implications would have us believe. A few years ago, the idea of giving away DB2 for free would have been met with rejection. Yet, &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;DB2 Express-C&lt;/a&gt; came along, and unlike the other &amp;#8220;express&amp;#8221; databases, it&amp;#8217;s a true production-ready DB2 version that can be used free of charge.&lt;/p&gt;
&lt;p&gt;Likewise, the idea of having a DB2 version for Mac was unthinkable up to a few years ago. Yet today we finally have a copy of DB2 Express-C for Mac OS X that&amp;#8217;s &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;available for download&lt;/a&gt;. Aside from this being an acknowledgment of the growing importance of Mac as a development and business platform, I feel it underlines IBM&amp;#8217;s ability to change. The desire that a few of us mac addicts had, coupled with reasonable pressure from the community, was sufficient enough to make DB2 on Mac a reality. This matters and appeals to both the developer and the technical evangelist in me.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;list of downloads&lt;/a&gt;, you&amp;#8217;ll notice that the Mac download is only 138 MB, versus the 412 MB of Linux&amp;#8217;s 64-bit. The reason for this difference is that DB2 Express-C for Mac currently ships in English only, and at this stage it doesn&amp;#8217;t include either DB2 Text Search or the Java based tools like the DB2 Control Center. This lighter package is, in my opinion, a welcome side effect of this brand new beta release.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Getting started with DB2 and Rails on Mac OS X&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Since the first download went live on Friday, a newer release that includes a guide for installing DB2 on Mac OS X was published and it incorporates a few changes that will make the lives of developers easier, as they approach building and using drivers (e.g. the ibm_db Ruby gem). If you downloaded this beta version over the weekend, do not worry: just grab - and execute - &lt;a href="http://antoniocangiano.com/files/fixlib.sh"&gt;this shell script&lt;/a&gt; (e.g. &lt;code&gt;sudo fixlib.sh&lt;/code&gt;). If you are downloading DB2 on Mac now, you won&amp;#8217;t need this script of course.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve downloaded DB2 for Mac OS X Leopard, please proceed to read &lt;a href="http://antoniocangiano.com/files/db2exc_guide_952_MAC_x86_64.pdf"&gt;this PDF guide&lt;/a&gt;, which will tell you everything you need to know (and more) about installing DB2 on your Mac, as well as providing extra details. It&amp;#8217;s best not to skip over reading this document, as the installation on Mac OS X requires a few more steps than simply running the setup wizard.&lt;/p&gt;
&lt;p&gt;With DB2 installed and started (&lt;code&gt;db2start&lt;/code&gt;), and the SAMPLE database created (&lt;code&gt;db2sampl&lt;/code&gt;), you&amp;#8217;re ready to start playing with this power horse. For details about SAMPLE&amp;#8217;s structure you can read &lt;a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r5/index.jsp?topic=/com.ibm.db2.luw.apdv.samptop.doc/doc/r0001094.html"&gt;this article&lt;/a&gt; in the InfoCenter.&lt;/p&gt;
&lt;p&gt;To run the DB2 console (known as the Command Line Processor or CLP for short), run:&lt;/p&gt;
&lt;pre&gt;$ db2&lt;/pre&gt;
&lt;p&gt;To connect to the SAMPLE database, from within the CLP run:&lt;/p&gt;
&lt;pre&gt;db2 =&gt; connect to sample&lt;/pre&gt;
&lt;p&gt;Unless you get an error, you should now be ready to query the database. For example, run the following query:&lt;/p&gt;
&lt;pre&gt;db2 =&gt; select count(*) from staff&lt;/pre&gt;
&lt;p&gt;Then to exit from the CLP, simply run:&lt;/p&gt;
&lt;pre&gt;db2 =&gt; quit&lt;/pre&gt;
&lt;p&gt;If this sanity test worked well you can proceed with installing the ibm_db gem (which includes the Ruby driver and the Rails adapter for DB2). To do so, run the following, adjusting the path to your own username of course:&lt;/p&gt;
&lt;pre&gt;
$ sudo -s
$ export IBM_DB_INCLUDE=/Users/acangiano/sqllib/include
$ export IBM_DB_LIB=/Users/acangiano/sqllib/lib32
$ export ARCHFLAGS="-arch i386"
$ gem update --system
$ gem install ibm_db
$ exit
&lt;/pre&gt;
&lt;p&gt;The ibm_db gem will be installed on your system and is ready to be used. To verify that this is the case, run a small Ruby program with the following code:&lt;/p&gt;
&lt;pre class="highlight"&gt;
require 'rubygems'
require 'ibm_db.bundle'

conn = IBM_DB.connect("sample","my_username", "my_password")
if conn
 stmt = IBM_DB.exec(conn, "select count(*) from staff")
 count = IBM_DB.fetch_array(stmt)[0]
 puts "The staff table contains #{count} records."
else
  puts "Connection error: #{IBM_DB.conn_errormsg}"
end
&lt;/pre&gt;
&lt;p&gt;If everything is fine and dandy, you should see the message &amp;#8220;The staff table contains 35 records.&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Now that Ruby can talk with DB2, we can move on to Rails. Assuming you have Rails 2.2.x installed, run the following to create a sample bookshelf application:&lt;/p&gt;
&lt;pre&gt;$ rails books -d ibm_db&lt;/pre&gt;
&lt;p&gt;This generates a Rails application (as usual) with a config/database.yml file customized for DB2. You&amp;#8217;ll notice that unlike with MySQL, the database names are not books_development, books_production and books_test. The names are truncated by default due to the fact that DB2 currently only allows for database names that are up to 8 characters long. Feel free to change the development database in database.yml simply to &amp;#8216;books&amp;#8217;.&lt;/p&gt;
&lt;p&gt;As a Rails developer you may also be accustomed to running &lt;code&gt;rake db:create&lt;/code&gt; to automatically create the development database, yet this feature is not available for DB2 at this point, so instead you can create the database using the &lt;code&gt;db2&lt;/code&gt; command, as follows:&lt;/p&gt;
&lt;pre&gt;db2 create database books&lt;/pre&gt;
&lt;p&gt;DB2 allows you to specify all kinds of options for the creation of databases, but in its simplest form, the line above will work just fine.&lt;/p&gt;
&lt;p&gt;Once the development database has been created, you should be able to use Rails with DB2 as you normally would with other database management systems. For example, you could scaffold a resource as follows:&lt;/p&gt;
&lt;pre&gt;$ ruby script/generate scaffold Book title:string
 author:string isbn:string description:text loaned:boolean&lt;/pre&gt;
&lt;p&gt;Start the webserver with:&lt;/p&gt;
&lt;pre&gt;$ ruby script/server&lt;/pre&gt;
&lt;p&gt;And then visit http://localhost:3000/books to perform CRUD operations on book records.&lt;/p&gt;
&lt;p&gt;At this stage, the only caveats are that you&amp;#8217;ll have to use the &lt;code&gt;db2&lt;/code&gt; command, rather than &lt;code&gt;ruby script/dbconsole&lt;/code&gt;, and that you won&amp;#8217;t be able to use the &lt;code&gt;rename_column&lt;/code&gt; method in your migrations. On the plus side, you&amp;#8217;ll have the XML datatype (&lt;code&gt;t.xml&lt;/code&gt; in your sexy migrations) at your disposal, to natively store XML documents and retrieve them through XQuery and SQL/XML.&lt;/p&gt;
&lt;p&gt;I really hope that you&amp;#8217;ll enjoy DB2 on Mac! Don&amp;#8217;t be afraid to ask for help, if you need it, in the &lt;a href="http://www.ibm.com/developerworks/forums/forum.jspa?forumID=805"&gt;DB2 Express-C forum&lt;/a&gt;. Oh and we are trying to get the word out there. Your help is highly appreciated. You can promote this story on &lt;a href="http://twitter.com/home"&gt;Twitter&lt;/a&gt;, &lt;a href="http://news.ycombinator.com/item?id=408186"&gt;Hacker News&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/programming/comments/7li15/ibm_releases_mac_os_x_version_of_db2/"&gt;Reddit&lt;/a&gt;, &lt;a href="http://www.dzone.com/links/db2_on_mac_officially_released.html"&gt;DZone&lt;/a&gt;, StumbleUpon and &lt;a href="http://digg.com/apple/DB2_on_Mac_officially_released"&gt;Digg&lt;/a&gt;.&lt;br /&gt;
&lt;br/&gt;&lt;br /&gt;
&lt;em&gt;Disclaimer: The opinions expressed in this post are mine and mine alone, and do not necessarily represents the opinions of my employer, IBM.&lt;/em&gt;&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=RmvzO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=RmvzO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=NjxYo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=NjxYo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=aYHzo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=aYHzo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=tF4oO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=tF4oO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=D4lRO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=D4lRO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=O6Rzo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=O6Rzo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/493524757" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/23/db2-on-mac-officially-released/#comments" thr:count="19" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/23/db2-on-mac-officially-released/feed/atom/" thr:count="19" />
		<thr:total>19</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/23/db2-on-mac-officially-released/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Download DB2 on Mac]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/489823864/" />
		<id>http://antoniocangiano.com/?p=460</id>
		<updated>2008-12-23T21:39:50Z</updated>
		<published>2008-12-19T17:09:25Z</published>
		<category scheme="http://antoniocangiano.com" term="DB2" />		<summary type="html"><![CDATA[I&#8217;m glad to announce that DB2 Express-C 9.5.2 for Mac OS X Leopard is available for download. Later tonight, I will provide further details. Meanwhile, enjoy!  
]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/19/download-db2-on-mac/">&lt;p&gt;I&amp;#8217;m glad to announce that DB2 Express-C 9.5.2 for Mac OS X Leopard is &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;available for download&lt;/a&gt;. Later tonight, I will provide further details. Meanwhile, enjoy! &lt;img src='http://antoniocangiano.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /&gt; &lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=zcPnO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=zcPnO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=QbW4o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=QbW4o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=H3c0o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=H3c0o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=UYHGO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=UYHGO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=VxanO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=VxanO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=SQ5zo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=SQ5zo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/489823864" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/19/download-db2-on-mac/#comments" thr:count="8" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/19/download-db2-on-mac/feed/atom/" thr:count="8" />
		<thr:total>8</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/19/download-db2-on-mac/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Learn Merb]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/483775449/" />
		<id>http://antoniocangiano.com/?p=450</id>
		<updated>2008-12-14T21:28:49Z</updated>
		<published>2008-12-13T16:34:00Z</published>
		<category scheme="http://antoniocangiano.com" term="Books" /><category scheme="http://antoniocangiano.com" term="Merb" /><category scheme="http://antoniocangiano.com" term="Ruby" /><category scheme="http://antoniocangiano.com" term="Ruby on Rails" />		<summary type="html"><![CDATA[The most effective martial artists specialize in their discipline, but are not afraid to cross-train in others. Bruce Lee&#8212;arguably the most famous and influential martial artist of the past century&#8212;trained first in Tai Chi Chuan, then Gung Fu, and boxing, as well as learning western fencing. The insight taken from so many disciplines led him [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/13/learn-merb/">&lt;p&gt;&lt;img src="http://antoniocangiano.com/images/merb.png" alt="Merb's logo" align="right" /&gt;The most effective martial artists specialize in their discipline, but are not afraid to cross-train in others. Bruce Lee&amp;mdash;arguably the most famous and influential martial artist of the past century&amp;mdash;trained first in Tai Chi Chuan, then Gung Fu, and boxing, as well as learning western fencing. The insight taken from so many disciplines led him to create the Jeet Kune Do form of combat.&lt;/p&gt;
&lt;p&gt;Programmers are not all that different. Cross-training in other languages and frameworks can only improve one&amp;#8217;s overall mastery of the craft. When it comes to Ruby frameworks, the two most popular choices are Ruby on Rails and Merb. They&amp;#8217;re often seen as being contenders, but this truly isn&amp;#8217;t a zero-sum game; learning both is a very sensible move. They both enable you to write web applications in Ruby, and are somewhat similar, so learning one after you know the other shouldn&amp;#8217;t be very challenging. In the many cases people learn Merb after they&amp;#8217;ve had some experience with Rails, but either way, acquiring a solid grasp of both frameworks provides developers with extra flexibility. Often people who learn both, will end up mostly just using one or another, depending on their individual preferences. But it&amp;#8217;s worth knowing them so as to be able to write both CRUD-style applications that fall within Rails&amp;#8217; solution space, and more complex, edge cases where Rails&amp;#8217; opinions will end up contending with yours.&lt;/p&gt;
&lt;p&gt;Among the reasons to give Merb a chance, is its focus on performance, a smaller memory footprint and an extreme level of modularity, which enables you to pick and choose which components you&amp;#8217;d like to use.&lt;/p&gt;
&lt;p&gt;Merb is not as mature as Rails, of course, but it has reached version 1.0.x and with it developers can have greater confidence in a more stabilized API. Now is perhaps the best moment to get involved and learn more about this rising framework. Not surprisingly though, Merb finds itself in a similar spot to the one that Rails was in a couple of years ago (in terms of weakness of documentation when it comes to getting started). Thankfully, this point is being taken seriously and there&amp;#8217;s been some major progress in terms of improving the documentation for Merb. Below are some useful links to get you started with Merb.&lt;/p&gt;
&lt;p&gt;Merb has an official &lt;a href="http://merbivore.com/documentation.html"&gt;API documentation&lt;/a&gt;, a &lt;a href="http://wiki.merbivore.com/"&gt;wiki&lt;/a&gt;, &lt;a href="http://groups.google.com/group/merb"&gt;a google group&lt;/a&gt;, and a community site called &lt;a href="http://merbunity.com/"&gt; Merbunity&lt;/a&gt; for news, projects and tutorials. The irc.freenode.net #merb channel is also a useful and welcoming spot. Furthermore, there is a Peepcode PDF draft called &lt;a href="http://peepcode.com/products/meet-merb-pdf-draft Meet Merb"&gt;Meet Merb&lt;/a&gt;. If you want something even more substantial, on the book front there are several titles coming out in the near future. These include &lt;a href="http://manning.com/ivey/"&gt;Merb in Action&lt;/a&gt;, &lt;a href="http://my.safaribooksonline.com/9780321601636?portal=oreilly"&gt;The Merb Way&lt;/a&gt;, &lt;a href="http://www.amazon.com/gp/product/1430218231?ie=UTF8&amp;#038;tag=zenruby-20&amp;#038;linkCode=as2&amp;#038;camp=1789&amp;#038;creative=9325&amp;#038;creativeASIN=1430218231"&gt;Beginning Merb&lt;/a&gt; and &lt;a href="http://www.amazon.com/gp/product/1430218657?ie=UTF8&amp;#038;tag=zenruby-20&amp;#038;linkCode=as2&amp;#038;camp=1789&amp;#038;creative=9325&amp;#038;creativeASIN=1430218657"&gt;Merb: What You Need To Know&lt;/a&gt;. There is also &lt;a href="http://book.merbist.com/"&gt;an open source Merb book,&lt;/a&gt; whose development is led by Matt Aimonetti. It&amp;#8217;s a work in progress, but probably a very good starting point, which just happens to have the added bonus of being free. And if your interested in Merb, don&amp;#8217;t miss InfoQ&amp;#8217;s &lt;a href="http://www.infoq.com/interviews/katz-merb"&gt;interview with Yehuda Katz&lt;/a&gt;, who&amp;#8217;s Merb&amp;#8217;s lead developer and one of the sharpest guys we have in the Ruby community.&lt;/p&gt;
&lt;p&gt;Finally, if you are a professional developer who wants to quickly progress with Merb and bring their skills to the next level, do not miss your chance to attend a three day &lt;a href="http://merbclass.com"&gt;intensive course on Merb&lt;/a&gt;, which is being offered by Yehuda and Matt in Phoenix, AZ between January 19 and 21 (2009). Registration has been open for two days already and 20 out of the 30 available spots have already been snapped up. The remaining seats won&amp;#8217;t last more than a day or two, so if you are interested, don&amp;#8217;t delay (sign up now and you&amp;#8217;ll also benefit from an early registration price).&lt;/p&gt;
&lt;p&gt;2009 is almost here, so why not take the opportunity to learn Merb this year?&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=0JO1O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=0JO1O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=NEkUo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=NEkUo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=PJg2o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=PJg2o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=cZIeO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=cZIeO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=9lbwO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=9lbwO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=BfGMo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=BfGMo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/483775449" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/13/learn-merb/#comments" thr:count="40" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/13/learn-merb/feed/atom/" thr:count="40" />
		<thr:total>40</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/13/learn-merb/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[DB2 on Mac to ship before Christmas]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/483165322/" />
		<id>http://antoniocangiano.com/?p=438</id>
		<updated>2008-12-13T16:24:57Z</updated>
		<published>2008-12-13T00:09:04Z</published>
		<category scheme="http://antoniocangiano.com" term="DB2" /><category scheme="http://antoniocangiano.com" term="Mac" /><category scheme="http://antoniocangiano.com" term="Ruby" /><category scheme="http://antoniocangiano.com" term="Ruby on Rails" />		<summary type="html"><![CDATA[
This is not an official announcement, but I must share the news with you. DB2 Express-C for Mac OS X Leopard will finally be shipping out (before Christmas), in all likelihood it could be as soon as early next week. You may recall how more than a year ago I blogged about how the work [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/12/db2-on-mac-to-ship-before-christmas/">&lt;p align="center"&gt;&lt;img src="http://antoniocangiano.com/images/pcmacdb2.jpg" alt="PC Vs. MAC, DB2 Edition" title="This is not xkcd. What were you looking for? :)"/&gt;&lt;/p&gt;
&lt;p&gt;This is not an official announcement, but I must share the news with you. &lt;a href="http://www.ibm.com/software/data/db2/express/download.html?S_CMP=ECDDWW01&amp;#038;S_TACT=ACDB201"&gt;DB2 Express-C&lt;/a&gt; for Mac OS X Leopard will finally be shipping out (before Christmas), in all likelihood it could be as soon as early next week. You may recall how more than a year ago &lt;a href="http://antoniocangiano.com/2007/09/19/db2-on-mac/"&gt;I blogged&lt;/a&gt; about how the work on porting DB2 to the Mac had started. It took admittedly longer than expected but DB2 on Mac is coming, and is absolutely free of charge, of course. The team is still playing with the bubble wrap, but DB2 on Mac is a reality.&lt;/p&gt;
&lt;p&gt;What took IBM so long? DB2 is a database management system that&amp;#8217;s highly optimized for each platform that it&amp;#8217;s available for, so that it can take full advantage of the operating system at hand. In other words, porting DB2 from one platform to another, is not so trivial. The task is made more challenging by the extremely high standards set by IBM. You may be familiar with the whole scandal surrounding MySQL 5.1, which was released despite &lt;a href="http://monty-says.blogspot.com/2008/11/oops-we-did-it-again-mysql-51-released.html"&gt;known fatal bugs&lt;/a&gt;. Something like that is simply not acceptable to IBM. Each release of DB2 has to go through a huge amount of regression and performance tests - for months. If the product does not pass all these tests and others, then DB2 is not shipped.&lt;/p&gt;
&lt;p&gt;On top of this, a few months ago the decision to ship DB2 Express-C 9.5.2 (rather than 9.5) was made, and as you probably know, DB2 Express-C 9.5.2 was only released a little while ago for other supported platforms. So the first piece of good news is that you&amp;#8217;ll get the latest version of DB2 on the Mac. It&amp;#8217;s going to be a 64 bit version and will require Leopard to work:&lt;/p&gt;
&lt;pre class="highlight"&gt;$ db2level
DB21085I  Instance "acangiano" uses "64" bits and DB2 code release "SQL09052" with level identifier "03030107".
Informational tokens are "DB2 v9.5.0.2", "s081205", "DARWIN64", and Fix Pack "2".
Product is installed at "/Users/acangiano/sqllib".&lt;/pre&gt;
&lt;p&gt;The second good thing is that unlike MySQL 64 bit, you won&amp;#8217;t have to jump though hoops to build the Ruby driver due to the fact that the database is 64 bits and Ruby ships on Leopard as 32 bits. We ensured that &lt;code&gt;gem install ibm_db&lt;/code&gt; would work out of the box, so you don&amp;#8217;t have to.&lt;/p&gt;
&lt;p&gt;According to Apple, my personal Mac is broken for good (the video chip is dead), which is very bad timing. But I installed DB2 and played around with it on a work Mac Pro machine. I had some fun with Ruby and Rails as well. This is great news for many categories of developers, including those who have been trying to convince their managers to get them a MacBook Pro but didn&amp;#8217;t have much of a case due to the lack of availability of a DB2 version. Now, you&amp;#8217;ll have a good excuse to get yourself a Mac. &lt;img src='http://antoniocangiano.com/wp-includes/images/smilies/icon_wink.gif' alt=';-)' class='wp-smiley' /&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="http://feeds.feedburner.com/ZenAndTheArtOfRubyProgramming" &gt;Stay tuned&lt;/a&gt; for the official announcement and keep in mind that this is going to be a beta (perfect for development purposes) and extra features and performance improvements will be added in future releases.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: The opinions expressed in this post are mine and mine alone, and do not necessarily represents the opinions of my employer, IBM.&lt;/em&gt;&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=C4jYO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=C4jYO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=cP16o"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=cP16o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=kGOGo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=kGOGo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=kFIlO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=kFIlO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=S5T2O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=S5T2O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=Cq2Io"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=Cq2Io" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/483165322" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/12/db2-on-mac-to-ship-before-christmas/#comments" thr:count="8" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/12/db2-on-mac-to-ship-before-christmas/feed/atom/" thr:count="8" />
		<thr:total>8</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/12/db2-on-mac-to-ship-before-christmas/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[Reflections on the Ruby shootout]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/481291485/" />
		<id>http://antoniocangiano.com/?p=430</id>
		<updated>2008-12-11T04:47:10Z</updated>
		<published>2008-12-11T04:47:10Z</published>
		<category scheme="http://antoniocangiano.com" term="Ruby" /><category scheme="http://antoniocangiano.com" term="Ruby Benchmark Suite" /><category scheme="http://antoniocangiano.com" term="Ruby on Rails" />		<summary type="html"><![CDATA[Yesterday I published The Great Ruby Shootout and it quickly gathered a fair deal of attention. It was on the front page of  Slashdot, Hacker News, Reddit, and so on. More than 15,000 people came by to read about the results of my comparison between Ruby implementations.
Those numbers looked good but something didn&#8217;t add [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/10/reflections-on-the-ruby-shootout/">&lt;p&gt;Yesterday I published &lt;a href="http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/"&gt;The Great Ruby Shootout&lt;/a&gt; and it quickly gathered a fair deal of attention. It was on the front page of  Slashdot, Hacker News, Reddit, and so on. More than 15,000 people came by to read about the results of my comparison between Ruby implementations.&lt;/p&gt;
&lt;p&gt;Those numbers looked good but something didn&amp;#8217;t add up. Ever since I clicked the &amp;#8220;Publish&amp;#8221; button, I had a very uneasy feeling about the  main shootout figures. They just didn&amp;#8217;t seem right. I had a chance, particularly during the writing of &lt;a href="http://antoniocangiano.com/my_ruby_on_rails_book.php"&gt;my book&lt;/a&gt;, to extensively use Ruby on Vista and I can  guarantee you that it&amp;#8217;s visibly slower than on GNU/Linux. The Phusion team had benchmarked their Ruby Enterprise Edition against Ruby 1.8.6  many times, and found it to be about 25% faster. Yet my results were showing it as twice as fast than Ruby 1.8.7, which in turn is already faster than 1.8.6. To makes things worse, I&amp;#8217;ve used Ruby 1.9 and found it to be faster than Ruby 1.8.7, but not 5 times as fast. For most programs that I tried Rubinius didn&amp;#8217;t seem faster than Ruby 1.8. And the more I pondered it, the more it began to feel like one too many things didn&amp;#8217;t add up.&lt;/p&gt;
&lt;p&gt;In the comments, Isaac Gouy reported a couple of issues with the  Excel formulas, where a few unsuccessful tests were mistakenly added to the totals. This skewed the results slightly, particularly in terms of penalizing JRuby. However, this wasn&amp;#8217;t really it. Sure, the totals were inaccurate, but not enough to fundamentally change the main outcome of those results.&lt;/p&gt;
&lt;p&gt;As I was discussing this somewhat unexpected result with Hongli Lai (co-author of Ruby Enterprise Edition), he mentioned that he knew what might be causing this anomaly. I had run the initial test against Ruby installed through apt-get, because I&amp;#8217;d made a couple of assumptions. The first was that most people would probably be using the Ruby version that was deployed by their OS&amp;#8217; packaging system in both development and production mode. The second was that the  performance of this version would be roughly similar to the one built from scratch. This second assumption would turn out to be highly mistaken.&lt;/p&gt;
&lt;p&gt;I decided to run a test using Ruby 1.8.7 built from source as the baseline and added a column for Ruby 1.8.7, installed through apt-get, to the tables. In addition I also corrected the issue pointed out by Isaac. I updated the original shootout with the correct data, and what you see below is   a bar chart for the geometric mean of the ratios for the successful benchmarks.&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/chart_geomean_small.png" alt="Geometric mean bar chart" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;
&lt;p&gt;Notice how everything makes much more sense now. Ruby 1.9 and JRuby are very close, respectively 2.5 and 1.9 faster than Ruby 1.8.7 (from source) on these benchmarks. Less impressive result sure, but I suspect much more realistic. The results for Ruby Enterprise Edition are in  line with the 25% speed increase, if we consider that 1.8.7 is a bit faster than 1.8.6. Rubinius is still slower than MRI for most tests, but it&amp;#8217;s improving. Ruby on Windows is slow. So slow in fact, that Ruby on GNU/Linux is twice as fast.&lt;/p&gt;
&lt;p&gt;The really big, flashing warning though is what happens when you install Ruby through apt-get.  Compiling from source gives you double the speed, according to these tests. I expected a 10/20% increase, not 100%. The gist of it is that prepackaged Ruby is compiled using the option &amp;#8211;enable-pthreads and there is the whole issue of shared vs static libraries. But whatever the reason, this is a significant difference. For production use, in light of these results, I feel that it would be foolish to use the slower version of Ruby provided by apt-get/aptitude.&lt;/p&gt;
&lt;p&gt;I rectified the results as soon as possible because the last thing I wanted was to mislead the Ruby community or worse still, betray its trust.  Major kudos to Isaac for spotting the calculation issue, and Hongli for selflessly pointing out that the excellent Ruby Enterprise Edition results were probably due to the low performance of the Ubuntu&amp;#8217;s version of Ruby.&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=rkaNO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=rkaNO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=DLfDo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=DLfDo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=TCHvo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=TCHvo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=J218O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=J218O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=YwUuO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=YwUuO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=AGDgo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=AGDgo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/481291485" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/10/reflections-on-the-ruby-shootout/#comments" thr:count="20" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/10/reflections-on-the-ruby-shootout/feed/atom/" thr:count="20" />
		<thr:total>20</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/10/reflections-on-the-ruby-shootout/</feedburner:origLink></entry>
		<entry>
		<author>
			<name>Antonio Cangiano</name>
						<uri>http://antoniocangiano.com</uri>
					</author>
		<title type="html"><![CDATA[The Great Ruby Shootout (December 2008)]]></title>
		<link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~3/479551742/" />
		<id>http://antoniocangiano.com/?p=407</id>
		<updated>2008-12-10T23:35:27Z</updated>
		<published>2008-12-09T14:08:30Z</published>
		<category scheme="http://antoniocangiano.com" term="Mac" /><category scheme="http://antoniocangiano.com" term="Merb" /><category scheme="http://antoniocangiano.com" term="Ruby" /><category scheme="http://antoniocangiano.com" term="Ruby Benchmark Suite" /><category scheme="http://antoniocangiano.com" term="Ruby on Rails" />		<summary type="html"><![CDATA[The long awaited Ruby virtual machine shootout is here. In this report I&#8217;ve compared the performances of several Ruby implementations against a set of synthetic benchmarks. The implementations that I tested were Ruby 1.8 (aka MRI), Ruby 1.9 (aka Yarv), Ruby Enterprise Edition (aka REE), JRuby 1.1.6RC1, Rubinius, MagLev, MacRuby 0.3 and IronRuby.

Disclaimer

Just as with [...]]]></summary>
		<content type="html" xml:base="http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/">&lt;p&gt;The long awaited Ruby virtual machine shootout is here. In this report I&amp;#8217;ve compared the performances of several Ruby implementations against a set of synthetic benchmarks. The implementations that I tested were &lt;a hre="http://www.ruby-lang.org/en/"&gt;Ruby 1.8&lt;/a&gt; (aka MRI), &lt;a href="http://www.ruby-lang.org/en/downloads/"&gt;Ruby 1.9&lt;/a&gt; (aka Yarv), &lt;a href="http://www.rubyenterpriseedition.com/"&gt;Ruby Enterprise Edition&lt;/a&gt; (aka REE), &lt;a href="http://jruby.codehaus.org/"&gt;JRuby 1.1.6RC1&lt;/a&gt;, &lt;a href="http://rubini.us/"&gt;Rubinius&lt;/a&gt;, &lt;a href="http://ruby.gemstone.com/"&gt;MagLev&lt;/a&gt;, &lt;a href="http://www.macruby.org/trac/wiki/MacRuby"&gt;MacRuby 0.3&lt;/a&gt; and &lt;a href="http://www.ironruby.net/"&gt;IronRuby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Just as with &lt;a href="http://antoniocangiano.com/2007/12/03/the-great-ruby-shootout/"&gt;the previous shootout&lt;/a&gt;, before proceeding to the results, I urge you to consider the following important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.engineyard.com/"&gt;Engine Yard&lt;/a&gt; sponsors this website, and also happens to sponsor, to a much greater extent, the Rubinius project. Needless to say, there is no bias in the reporting of the data below concerning Rubinius;&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t read too much into this and don&amp;#8217;t draw any final conclusions. Each of these exciting projects has its own reason for being, as well as different pros and cons, which are not considered in this post. They each have a different level of maturity and completeness. Furthermore, not all of them have received the same level of optimization yet. Take this post for what it is: an interesting and fun comparison of Ruby implementations;&lt;/li&gt;
&lt;li&gt;The results here may change entirely in a matter of months. There will be other future shootouts on this blog. If you wish, &lt;a href="http://feeds.feedburner.com/ZenAndTheArtOfRubyProgramming"&gt;grab the feed and follow along&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;The scope of the benchmarks is limited because they can&amp;#8217;t test every single feature of each implementation nor include every possible program. They&amp;#8217;re just a sensible set of micro-benchmarks which give us a general idea of where we are in terms of speed. They aren&amp;#8217;t meant to be absolutely accurate when it comes to predicting real world performance;&lt;/li&gt;
&lt;li&gt;Many people are interested in the kind of improvements that the tested VMs can bring to a Ruby on Rails deployment stack. Please do not assume that if VM A is three times faster than VM B, that Rails will serve three times the amount of requests per minute. It won&amp;#8217;t. That said, a faster VM is good news and can definitely affect Rails applications positively in production;&lt;/li&gt;
&lt;li&gt;These tests were run on the machines at my disposal, your mileage may vary. Please do test the VMs that interest you on your hardware and against programs you actually need/use;&lt;/li&gt;
&lt;li&gt;In this article, I sometimes blur the distinction between &amp;#8220;virtual machine&amp;#8221; and &amp;#8220;interpreter&amp;#8221; by simply calling them &amp;#8220;virtual machines&amp;#8221; for the sake of simplicity;&lt;/li&gt;
&lt;li&gt;Some of the benchmarks are more interesting for VM implementers than for end users. That said, if you think the benchmarks being tested are silly/inadequate/lame, feel free to contribute code to the &lt;a href="http://github.com/acangiano/ruby-benchmark-suite/tree/master"&gt;Ruby Benchmark Suite&lt;/a&gt; and if accepted, they&amp;#8217;ll make it into the next shootout;&lt;/li&gt;
&lt;li&gt;Finally, keep in mind that there are three kinds of lies: &lt;a href="http://en.wikipedia.org/wiki/Lies,_damned_lies,_and_statistics"&gt;lies, damned lies, and statistics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Ruby implementations being tested&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;All of the Ruby implementations that were able to run the current Ruby Benchmark Suite have been grouped together in one main shootout. This group consists of Ruby 1.8.7 (p72, built from source, and installed through apt-get), Ruby 1.9.1 (from trunk, p5000 revision 20560), Ruby Enterprise Edition (1.8.6-20081205), JRuby 1.1.6RC1 and Rubinius (from trunk), all of them were tested on Ubuntu 8.10 x64, plus Ruby 1.8.6 (p287. from the One-Click Installer) on Windows Vista Ultimate x64. The hardware used for this benchmark was my desktop workstation with an Intel Core 2 Quad Q6600 (2.4 GHz) CPU and 8 GB of RAM. JRuby was run with the -J-server option enabled and by specifying 4 Mb of stack (required to pass certain recursive benchmarks). The best times out of five iterations were reported, and these do not include startup times or the time required to parse and compile classes and method for the first time. Several of these new tests also have variable input sizes.&lt;/p&gt;
&lt;p&gt;The MagLev team provided me with an early alpha version of MagLev for the purpose of testing it in this shootout. Since this VM is not mature enough yet to run the Ruby Benchmark Suite, I used custom scripts against an old version of the Ruby Benchmark Suite on Ubuntu 8.10 x64. MagLev was tested, along with Ruby 1.8.6 (p287), on the same machine as that of the main shotoout, though the benchmarks were different (even when they had the same names as the ones in the main shootout).&lt;/p&gt;
&lt;p&gt;MacRuby 0.3 and Ruby 1.8.6 (p114) were tested on Mac OS X Leopard using the previous version of the Ruby Benchamrk Suite. Since my MacBook Pro died (sigh), for this benchmark I used a Mac Pro, with two Quad-Core Intel Xeon 2.8 Ghz processors and 18 GB of RAM.&lt;/p&gt;
&lt;p&gt;IronRuby (from trunk) and Ruby 1.8.6 (p287) were tested on a previous version of the Ruby Benchmark Suite on Windows Vista x64 on the same quad-core used for the main shootout. The MagLev, MacRuby and IronRuby numbers reported here were the best times out of five iterations, and include startup time. IronRuby on Mono was not tested because I couldn&amp;#8217;t get it to work on my machine, despite having tried several IronRuby versions and two different Mono versions. Please also notice that Ruby 1.8.6 (p287) was tested twice on Windows, once for the main shootout against the current Ruby Benchmark Suite, and a second time to compare it with IronRuby, against the old benchmarks.
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: As tempting as it is, do not compare implementations that belong to different shootouts directly to one another. It would be very disingenuous to directly compare VMs tested with different benchmarks and/or different machines. The only comparisons that make sense are the ones within each of the four groups.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Main shootout&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The following table shows the run times for the main implementations. The table is fairly wide, so you&amp;#8217;ll have to click on the image to view the data in a new tab.&lt;/p&gt;
&lt;div align="center"&gt;&lt;a href="http://antoniocangiano.com/images/shootout3/main_time.png" title="Click to enlarge this figure" target="_blank"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/main_time_small.gif" alt="Main Shootout's times" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Green, bold values indicate that the given virtual machine was faster than Ruby 1.8.7 on GNU/Linux (our baseline), whereas a yellow background indicates the absolute fastest implementation for a given benchmark. Values in red are slower than the baseline. Timeout indicates that the script didn’t terminate in a reasonable amount of time and was (automatically) interrupted. The values reported at the bottom are the total amounts of time (in seconds) that it would take to run the common subset of benchmarks which were successfully executed by every virtual machine. When our baseline VM generated an error, others were used, starting with Ruby 1.8.7 on Vista (for color coding purposes only).&lt;/p&gt;
&lt;p&gt;The following image shows a bar chart of the total time requested for the common subset of successfully executed benchmarks (those whose names are in blue within the tables):&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/chart_total_time_small.png" alt="Total Time" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;More interestingly, the following table shows the ratios of each Ruby implementation based on the baseline (MRI):&lt;/p&gt;
&lt;div align="center"&gt;&lt;a href="http://antoniocangiano.com/images/shootout3/main_geomean.png" title="Click to enlarge this figure" target="_blank"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/main_geomean_small.gif" alt="Main Shootout's ratios" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The baseline time is divided by the time at hand to obtain a number that tells us &amp;#8220;how many times faster&amp;#8221; an implementation is for a given benchmark. 2.0 means twice as fast, while 0.5 means half the speed (so twice as slow). The geometric mean at the bottom of the table tells us how much faster or slower a virtual machine was when compared to the main Ruby interpreter, on &amp;#8220;average&amp;#8221;. Just as with the totals above, only those 101 tests, which were successfully run by each VM, where included in the calculation.&lt;/p&gt;
&lt;p&gt;More concisely, here is a bar chart showing the geometric mean of the ratios for the various implementations tested:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/chart_geomean_small.png" alt="Geometric Mean" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;I prefer to let the data speak for itself, but I&amp;#8217;d like to briefly comment on these results. Just a few quick considerations.&lt;/p&gt;
&lt;p&gt;Working off of the &lt;a href="http://en.wikipedia.org/wiki/Geometric_mean"&gt;geometric mean&lt;/a&gt; of the ratios for the successful tests, Ruby MRI compiled from source is twice as fast than the Ruby shipped by Ubuntu, and by the One-Click Installer on Vista. The huge performance gap between ./configure &amp;#038;&amp;#038; make &amp;#038;&amp;#038; sudo make install and sudo apt-get install ruby-full should not be taken lightly when deploying in production. These numbers also reveal what most of us already knew: Ruby is particularly slow on Windows (&lt;a href="http://groups.google.com/group/capistrano/msg/f5213577eaeadc47?pli=1"&gt;800-pound gorillas in the room&lt;/a&gt;, or not).&lt;/p&gt;
&lt;p&gt;Performance-wise Rubinius has more work left to be done to catch up with Ruby 1.8.7 and other faster VMs, particularly if we take into account the number of timeouts. But it has improved in the past year and I think it’s on the right track.&lt;/p&gt;
&lt;p&gt;Ruby Enterprise Edition is about as fast as Ruby 1.8.7 compiled from source, which is reasonable considering that it&amp;#8217;s a patched version of Ruby 1.8.6 aimed at the reduction of memory consumption (a parameter which wasn&amp;#8217;t tested within the current shootout).&lt;/p&gt;
&lt;p&gt;Speaking of excellent results, Ruby 1.9.1 and JRuby 1.1.6 both did &lt;b&gt;very&lt;/b&gt; well. It looks like we finally have a couple of relatively fast alternatives to what is a slow main interpreter. According to the results above, and with the exception of a few tests, on average they are respectively 2.5 and 2 times faster than Ruby 1.8.7 (from source), and 5 and 4 times faster than Ruby 1.8.7 installed through apt-get on Ubuntu or Ruby 1.8.6 installed through the One-Click installer on Vista. Again, this does not mean than every program (particularly Rails) will gain that kind of speed, but these results are very encouraging nevertheless.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;MagLev&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;There has been a lot of buzz about MagLev since Avi Bryant&amp;#8217;s first benchmarks were shown a few months ago. Here we finally see it being put to the test. The table below shows the times obtained by running MagLev and Ruby 1.8.6 (p287) against MagLev&amp;#8217;s set of benchmarks based on the old Ruby Benchmark Suite:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/maglev_time.png" alt="MagLev's times" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;And here are the ratios:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/maglev_geomean.png" alt="MagLev's ratios" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice how MagLev swings from being much faster than MRI to being much slower. I believe there is much room for improvement, but at almost twice the speed of MRI, these early results are definitely promising.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;MacRuby&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;These are the times for MacRuby 0.3 on Mac OS X 10.5.5:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/macruby_time.png" alt="MacRuby's times" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;And of course, the ratios against the MRI baseline:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/macruby_geomean.png" alt="MacRuby's ratios" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;MacRuby is relatively new, so these are not bad results. More work is required, but it&amp;#8217;s a good start.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;IronRuby&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Finally (I promise these are the last ones), here are the two tables for IronRuby and Ruby 1.8.6:&lt;/p&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/ironruby_time.png" alt="IronRuby's times" /&gt;&lt;/div&gt;
&lt;div align="center"&gt;&lt;img src="http://antoniocangiano.com/images/shootout3/ironruby_geomean.png" alt="IronRuby's ratios" /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;IronRuby is slower than Ruby 1.8.6 on Windows, which in turn is much slower than Ruby 1.8.7 on GNU/Linux. This is not very surprising. This project has been focusing on integrating with .NET and catching up with the implementation of the language by improving the RSpec pass rate, as opposed to performing any optimizations and/or fine tuning (as per &lt;a href="http://rubyconf2008.confreaks.com/ironruby.html"&gt;John Lam&amp;#8217;s presentation&lt;/a&gt; at RubyConf 2008). We&amp;#8217;ll measure its improvements in the next shootouts.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Overall I think these are great results. Ruby 1.8 (MRI), with its slowness and memory leaks, belongs to the past. It&amp;#8217;s time for the community to move forward and on to something better and faster - and we don&amp;#8217;t lack interesting alternatives to do so at this stage.&lt;/p&gt;
&lt;p&gt;I hope that for the next shootout, MagLev, MacRuby and IronRuby will be able to run the benchmark suite, so that they can all be tested and directly compared with each other. I also hope to include Tim Bray&amp;#8217;s XML benchmark, some sort of &amp;#8220;Pet Shop&amp;#8221; sample Rails and Merb application and, above all, include memory usage statistics.&lt;/p&gt;
&lt;p&gt;You can find the Excel file for the main shootout &lt;a href="http://antoniocangiano.com/files/MainShootout3.0.xls"&gt;here&lt;/a&gt;. That&amp;#8217;s all for now. Feel free to comment, &lt;a href="http://feeds.feedburner.com/ZenAndTheArtOfRubyProgramming"&gt;subscribe to my feed&lt;/a&gt;, share this link and promote it on &lt;a href="http://news.ycombinator.com/item?id=391301"&gt;Hacker News&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/programming/comments/7ic05/the_great_ruby_shootout_december_2008/"&gt;Reddit&lt;/a&gt;, &lt;a href="http://www.dzone.com/links/the_great_ruby_shootout_december_2008.html"&gt;DZone&lt;/a&gt;, StumbleUpon, &lt;a href="http://twitter.com/"&gt;Twitter&lt;/a&gt;, and Co. Putting together this shootout was a lot of work, so I definitely appreciate you spreading the word about it. Until next time&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Update (December 10, 2008)&lt;/b&gt;: This article has been updated to correct a couple of major issues with yesterday&amp;#8217;s results. I adjusted my commentary as well, in light of the corrected figures.&lt;/p&gt;
&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=bXR0O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=bXR0O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=mYmio"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=mYmio" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=2tNIo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=2tNIo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=vSs1O"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=vSs1O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=eHiSO"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=eHiSO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?a=TiXLo"&gt;&lt;img src="http://feeds.feedburner.com/~f/ZenAndTheArtOfRubyProgramming?i=TiXLo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ZenAndTheArtOfRubyProgramming/~4/479551742" height="1" width="1"/&gt;</content>
		<link rel="replies" type="text/html" href="http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/#comments" thr:count="47" />
		<link rel="replies" type="application/atom+xml" href="http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/feed/atom/" thr:count="47" />
		<thr:total>47</thr:total>
	<feedburner:origLink>http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/</feedburner:origLink></entry>
	</feed><!-- Dynamic Page Served (once) in 0.868 seconds --><!-- Cached page generated by WP-Super-Cache on 2009-01-21 10:45:21 --><!-- Compression = gzip -->
