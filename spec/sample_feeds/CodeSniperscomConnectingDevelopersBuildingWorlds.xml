<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://CodeSnipers.com" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>CodeSnipers.com - Connecting Developers, Building Worlds</title>
 <link>http://CodeSnipers.com</link>
 <description>Connecting Developers, Building Worlds</description>
 <language>en</language>
<item>
 <title>Add Feed Discovery Links Easily</title>
 <link>http://CodeSnipers.com/?q=add-feed-discovery-links-easily</link>
 <description>&lt;p&gt;I&#039;m working on discussion forums for &lt;a href=&quot;http://nearbygamers.com&quot;&gt;NearbyGamers&lt;/a&gt; and I&#039;m building the first feeds into the site. I worked up a clean way to add them from my controllers similar to my &lt;a href=&quot;edited &quot;&gt;tidy stylesheets&lt;/a&gt; code. Here&#039;s how to do it.&lt;/p&gt;
&lt;p&gt;In the &amp;lt;head&amp;gt; of your app/views/layouts/application.rhtml call the auto_discovery_link_tag to print the tags:&lt;/p&gt;
&lt;pre&gt;
  &amp;lt;%- @feeds.each do |feed| -%&amp;gt;
    &amp;lt;%= auto_discovery_link_tag(:atom, *feed) %&amp;gt;
  &amp;lt;%- end -%&amp;gt;
&lt;/pre&gt;&lt;p&gt;
In app/controllers/application.rb:&lt;/p&gt;
&lt;pre&gt;
  def initialize
    @feeds = []
  end

  def add_feed title, options={}
    @feeds &amp;lt;&amp;lt; [ { 
      :controller =&amp;gt; self.controller_name, 
      :action =&amp;gt; self.action_name, 
      :format =&amp;gt; &#039;atom&#039; 
    }.update(options), { :title =&amp;gt; title } ] 
  end
&lt;/pre&gt;&lt;p&gt;
And you&#039;re all set up. Where you want an action to present feeds, call add_feed. After title, it takes options for url construction.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=add-feed-discovery-links-easily&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=add-feed-discovery-links-easily#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/26">How-To</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/12">XML Technologies</category>
 <pubDate>Thu, 03 May 2007 19:20:24 -0700</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">527 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Rails 1.2.1 Impression</title>
 <link>http://CodeSnipers.com/?q=rails-1.2.1-impression</link>
 <description>&lt;p&gt;I&#039;m updating &lt;a href=&quot;http://nearbygamers.com&quot;&gt;NearbyGamers&lt;/a&gt; to Rails 1.2.1. Nothing broke except my use of assert_tag in my tests; it&#039;s been long-regarded as squicky and has been replaced with assert_select. As I&#039;m tidying up some deprecated code, it occurs to me that this makes for an interesting example of how I feel Rails is changing.&lt;/p&gt;
&lt;p&gt;Rails is growing inwards and upwards, not just outwards. They&#039;re finding better, terser, more Rails-ish ways to express things. They&#039;re not piling on features, they&#039;re condensing. &lt;a href=&quot;http://push.cx/2007/announcing-nearbygamers&quot;&gt;I&#039;ve mentioned&lt;/a&gt; that this is what coding in Rails continually feels like: sometimes it just feels off even though it works and is nicer than other languages, and soon I realize a beautiful Right Way to do it.&lt;/p&gt;
&lt;p&gt;Where Rails gained new features, the developers have redesigned functionality to make me think, &quot;Wow, of course, that&#039;s obviously much nicer&quot; and it does more because it&#039;s better-designed. Let me give you an example using assert_tag.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=rails-1.2.1-impression&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=rails-1.2.1-impression#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/38">Interview</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <pubDate>Mon, 30 Apr 2007 03:23:48 -0700</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">524 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Barking Stapler</title>
 <link>http://CodeSnipers.com/?q=peter-harkins-barking-stapler</link>
 <description>&lt;p&gt;&lt;img src=&quot;http://push.cx/wp-content/uploads/2007/02/logo.png&quot; alt=&quot;Barking Stapler logo&quot; /&gt;&lt;br /&gt;
I&#039;ve left &lt;a href=&quot;http://www.cambrianhouse.com&quot;&gt;Cambrian House&lt;/a&gt; to work full-time on my own company, &lt;a href=&quot;http://barkingstapler.com&quot;&gt;Barking Stapler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over the next few months, I&#039;m going to grow &lt;a href=&quot;http://nearbygamers.com&quot;&gt;NearbyGamers&lt;/a&gt; into a business that can support me. Yes, I know it&#039;s not a pretty site. The graphic designer who did the Barking Stapler site, &lt;a href=&quot;http://hire.gillesmaes.com&quot;&gt;Gilles Maes&lt;/a&gt;, is now working on a facelift while I work on adding a great many features.&lt;/p&gt;
&lt;p&gt;I expect entrepreneurship is going to be quite a ride, so I expect  to start writing about it in addition to my usual technical posts. As usual, let me know if there&#039;s any topics you&#039;d like me to cover.&lt;/p&gt;
</description>
 <comments>http://CodeSnipers.com/?q=peter-harkins-barking-stapler#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/37">News</category>
 <pubDate>Wed, 07 Mar 2007 12:25:29 -0800</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">525 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>GET and POST variable hashes in Ruby on Rails</title>
 <link>http://CodeSnipers.com/?q=GET-and-POST-variable-hashes-in-Rails</link>
 <description>&lt;p&gt;In Rails, you access GET, POST, and routing variables through the params hash. This works almost all the time, except when you duplicate a variable name: routing overwrites GET overwrites POST.&lt;/p&gt;
&lt;p&gt;For an app I&#039;m working on I actually had to care where a variable comes from, so I dug for a while to find out how to access the raw hashes. It ain&#039;t pretty, but here it is in case anyone else ends up needing it:&lt;/p&gt;
&lt;pre&gt;
get = CGIMethods.parse_query_paremeters(@request.query_string)
post = CGIMethods.parse_query_parameters(@request.raw_post) 
# you&#039;d think you could use @request.query_parameters and
# @request.request_parameters, but they&#039;re update()d by route vars
route = @request.path_parameters
&lt;/pre&gt;&lt;p&gt;
(Also, don&#039;t ask about this in #rubyonrails -- you&#039;ll just get lectured on how you don&#039;t really want to access the hashes, how you should rename all your variables and URLs, and how it simply isn&#039;t possible. This will be very frustrating and totally unproductive.)&lt;/p&gt;
</description>
 <comments>http://CodeSnipers.com/?q=GET-and-POST-variable-hashes-in-Rails#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/26">How-To</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/28">Lesson Learned</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <pubDate>Tue, 27 Feb 2007 03:56:33 -0800</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">518 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Rails Makes Valid XHTML Easier</title>
 <link>http://CodeSnipers.com/?q=rails-makes-valid-xhtml-easier</link>
 <description>&lt;p&gt;I&#039;m working on a Rails site in my &lt;a href=&quot;http://catb.org/jargon/html/C/copious-free-time.html&quot;&gt;Copious Free Time&lt;/a&gt; and I wanted to share a little way that Ruby made my life easier. I&#039;m making my pages valid XHTML 1.0 Transitional because it makes life easier to find bugs and it just feels good to know I&#039;m meeting the spec.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://validator.w3.org/&quot;&gt;W3C Validator&lt;/a&gt; complained that I didn&#039;t have the rows and cols attributes on my &amp;lt;textarea&amp;gt; tags. My code for them looked like:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;%= text_area_tag :message, params[:message] %&amp;gt;
&lt;/pre&gt;&lt;p&gt;
And I don&#039;t want to add the :size option because I use CSS to style all of them, it&#039;d be confusing to see an unused size there. So I extended the text_area_tag method in my app/helpers/application_helper.rb to fill in a default:&lt;/p&gt;
&lt;pre&gt;
module ApplicationHelper
  def text_area_tag(name, content=nil, options={})
    super(name, content, { :size =&amp;gt; &quot;40x10&quot; }.update(options))&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=rails-makes-valid-xhtml-easier&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=rails-makes-valid-xhtml-easier#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/26">How-To</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/28">Lesson Learned</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <pubDate>Thu, 22 Feb 2007 03:56:33 -0800</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">517 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>What does Ruby on Rails Have to Offer a &quot;Java Guy&quot;?</title>
 <link>http://CodeSnipers.com/?q=what-does-ruby-have-to-offer-a-java-guy</link>
 <description>&lt;p&gt;Alot....&lt;/p&gt;
&lt;p&gt;I have been working as a &quot;Java Guy&quot; for roughly five years now.  The majority of my work has been component / library development, and it has been enjoyable on the whole.  However, I have also had a few unfortunate “Java web” development projects.  These experiences have not been something I hope to repeat often.  I am not going to re-describe the Java / J2EE deficiencies in the Web UI layer, but I will go over a few examples of how messy it can get and why Ruby on Rails makes me smile. :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=what-does-ruby-have-to-offer-a-java-guy&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=what-does-ruby-have-to-offer-a-java-guy#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/7">Java</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/28">Lesson Learned</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <pubDate>Tue, 20 Feb 2007 03:34:47 -0800</pubDate>
 <dc:creator>baileyje</dc:creator>
 <guid isPermaLink="false">521 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Tidy Stylesheets in Rails</title>
 <link>http://CodeSnipers.com/?q=tidy-stylesheets-in-rails</link>
 <description>&lt;p&gt;It&#039;s very easy for a site&#039;s CSS to grow a single giant, brittle stylesheet. It becomes impossible to change anything because of bizarre interactions between elements, unexpected interactions, and simply because it&#039;s just too big for anyone to understand. Much of programming is managing complexity, and I&#039;ll share a nice technique in that vein.&lt;/p&gt;
&lt;p&gt;I like to break down stylesheets so there&#039;s a site-wide stylesheet with global stylings like fonts, the site&#039;s template, and common elements. This is the file that metastasizes on you.&lt;/p&gt;
&lt;p&gt;My solution is to break down stylesheets by controller and action, and Rails makes this quite easy:&lt;/p&gt;
&lt;pre&gt;
# app/views/layout/application.rb
&amp;lt;%= stylesheet_link_tag *([&#039;global&#039;] + @stylesheets) %&amp;gt;
&lt;/pre&gt;&lt;pre&gt;
# app/controllers/application.rb
class ApplicationController &amp;lt; ActionController::Base
  before_filter :add_stylesheets

  def initialize
    @stylesheets = []
  end

  def add_stylesheets
    [&quot;#{controller_name}/_controller&quot;, &quot;#{controller_name}/#{action_name}&quot;].each do |stylesheet|&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=tidy-stylesheets-in-rails&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=tidy-stylesheets-in-rails#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/28">Lesson Learned</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/15">Ruby</category>
 <pubDate>Tue, 16 Jan 2007 07:19:21 -0800</pubDate>
 <dc:creator>Peter Harkins</dc:creator>
 <guid isPermaLink="false">512 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Book review: Beginning Ajax with PHP by Lee Babin</title>
 <link>http://CodeSnipers.com/?q=book-review-beginning-ajax-with-php-by-lee-babin</link>
 <description>&lt;p&gt;Book Review&lt;br /&gt;
Apress: Beginning Ajax with PHP by Lee Babin&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://apress.com/book/bookDisplay.html?bID=10117&quot;&gt;Book Site&lt;/a&gt; | &lt;a href=&quot;http://apress.com/book/supplementDownload.html?bID=10117&amp;amp;sID=3896&quot;&gt;Sample Chapter: 3 &lt;/a&gt;&lt;a href=&quot;http://apress.com/book/supplementDownload.html?bID=10117&amp;amp;sID=3896&quot;&gt;PHP and Ajax&lt;/a&gt; | &lt;a href=&quot;http://apress.com/book/supplementDownload.html?bID=10117&amp;amp;sID=3897&quot;&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although no stranger to Ajax, I received a review copy of Beginning Ajax with PHP expecting some watered down presentation of Javascript with some PHP thrown in. I was quite surprised to find a good presentation of using Ajax and PHP, easy enough for the beginner and still interesting for those who have done it for years.&lt;/p&gt;
&lt;p&gt;The book starts out exactly how I would write it -- SIMPLE! The first time I did Ajax with XHR (xml http request), I used a plain text file, which I then read into a DIV at the click of a link. This takes a similar approach and has data stored in an array which is then accessed with a simple call to a PHP file. The following chapter, takes it a step further and this building upon previous chapters is a common theme in the book.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=book-review-beginning-ajax-with-php-by-lee-babin&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=book-review-beginning-ajax-with-php-by-lee-babin#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/31">Book</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/13">Javascript / AJAX</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/8">PHP</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/29">Reviews</category>
 <pubDate>Wed, 13 Dec 2006 08:41:04 -0800</pubDate>
 <dc:creator>Nola Stowe</dc:creator>
 <guid isPermaLink="false">516 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Book Review: PHP Hacks</title>
 <link>http://CodeSnipers.com/?q=book-review-php-hacks</link>
 <description>&lt;p&gt;Book Review: PHP Hacks by Jack D. Herrington, published by O&#039;Reilly&lt;/p&gt;
&lt;p&gt;I had borrowed a Perl Hacks book from and friend and really liked it, it was great! It had a lot of practical things as well as some fun things. I expected the same from PHP Hacks and I was not disappointed! &lt;/p&gt;
&lt;p&gt;Here’s the table of contents:  &lt;a href=&quot;http://www.oreilly.com/catalog/phphks/toc.html&quot;&gt;http://www.oreilly.com/catalog/phphks/toc.html	&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O’Reilly also has some sample hacks: &lt;a href=&quot;http://www.oreilly.com/catalog/phphks/chapter/index.html&quot;&gt;http://www.oreilly.com/catalog/phphks/chapter/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&#039;s some that I found interesting:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Practical Stuff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Breadcrumbs&lt;br /&gt;
Not familiar with the term? &lt;a href=&quot;http://en.wikipedia.org/wiki/Breadcrumb_%28navigation%29&quot;&gt;Check it out&lt;/a&gt;. I think this hack may get you started on a breadcrumb function/method. In the end they suggest a xml file to show which page urls were parents of which. The way I&#039;ve done this before was I had a class for each major section, and sub section, and had a method -&amp;gt;addCrumb($label, $url) which I had in the constructor…and the subsections of course would call the parent contructor and it kept the breadcrumb hierarchy intact. But hey, that’s the fun of programming - different ways to do the same thing to meet different needs! Definitely a good hack to get the juices flowing!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://CodeSnipers.com/?q=book-review-php-hacks&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</description>
 <comments>http://CodeSnipers.com/?q=book-review-php-hacks#comments</comments>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/31">Book</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/8">PHP</category>
 <category domain="http://CodeSnipers.com/?q=taxonomy/term/29">Reviews</category>
 <pubDate>Fri, 01 Dec 2006 06:27:28 -0800</pubDate>
 <dc:creator>Nola Stowe</dc:creator>
 <guid isPermaLink="false">513 at http://CodeSnipers.com</guid>
</item>
<item>
 <title>Just a bit of Chaos...</title>
 <link>http://CodeSnipers.com/?q=just-a-bit-of-chaos</link>
 <description>&lt;p&gt;The server move is complete...  keep an eye out for the news.&lt;/p&gt;
&lt;p&gt;If you hadn&#039;t noticed, the site is acting up.  After some downtime and a server move, things are still a bit screwy.&lt;/p&gt;
</description>
 <comments>http://CodeSnipers.com/?q=just-a-bit-of-chaos#comments</comments>
 <pubDate>Sat, 25 Nov 2006 14:44:36 -0800</pubDate>
 <dc:creator>Keith Casey</dc:creator>
 <guid isPermaLink="false">515 at http://CodeSnipers.com</guid>
</item>
</channel>
</rss>
