<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en-US">
  <title>Riding Rails - home</title>
  <id>tag:weblog.rubyonrails.com,2009:mephisto/</id>
  <generator uri="http://mephistoblog.com" version="0.7.3">Mephisto Noh-Varr</generator>
  <link href="http://weblog.rubyonrails.com/feed/atom.xml" rel="self" type="application/atom+xml" />
  <link href="http://weblog.rubyonrails.com/" rel="alternate" type="text/html" />
  <updated>2009-01-16T13:30:52Z</updated>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-16:24463</id>
    <published>2009-01-16T13:30:00Z</published>
    <updated>2009-01-16T13:30:52Z</updated>
    <category term="Edge" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/513992920/this-week-in-edge-rails" rel="alternate" type="text/html" />
    <title>This Week in Edge Rails</title>
<content type="html">
            &lt;h3&gt;January 10, 2009 -January 16, 2009&lt;/h3&gt;


	&lt;p&gt;24 commits for edge Rails this week (with one patch ported over to the 2.2 branch as well). If you want a pre-release look at Rails 2.3, this is a fine time to install a copy of edge, if you’re not already there. It’s plenty stable enough for test sites, though there are a few rough patches yet.&lt;/p&gt;


	&lt;h2&gt;Nested Transactions in Active Record&lt;/h2&gt;


	&lt;p&gt;Several people contributed to a big patch that gives us nested transactions in Active Record, a much-requested feature. Now you can write code like this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
User.transaction do
    User.create(:username =&amp;gt; 'Admin')
    User.transaction(:requires_new =&amp;gt; true) do
      User.create(:username =&amp;gt; 'Regular')
      raise ActiveRecord::Rollback
    end
  end

  User.find(:all)  # =&amp;gt; Returns only Admin
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Nested transactions let you rollback an inner transaction without affecting the state of the outer transaction. If you want a transaction to be nested, you must explicitly add the &lt;code&gt;:requires_new&lt;/code&gt; option; otherwise, a nested transaction simply becomes part of the parent transaction (as it does currently on Rails 2.2). Under the covers, nested transactions are &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/383"&gt;using savepoints&lt;/a&gt;, so they’re supported even on databases that don’t have true nested transactions. There is also a bit of magic going on to make these transactions play well with transactional fixtures during testing. &lt;a href="http://github.com/rails/rails/commit/ab0ce052ba23a4cce7a84ecade0d00d9cc518ebd"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;MemCacheStore Enhancements&lt;/h2&gt;


	&lt;p&gt;Nahum Wild contributed some work that (inspired by his &lt;a href="http://github.com/terrcin/spandex_mem_cache_store/tree/master"&gt;spandex_mem_cache_store&lt;/a&gt; plugin) that enhances the performance of Rails when using &lt;code&gt;MemCacheStore&lt;/code&gt;. The basic idea is to keep a per-request local cache of requests sent to &lt;code&gt;MemCacheStore&lt;/code&gt;, cutting down on unnecessary reads and leading to better site performance. &lt;a href="http://github.com/rails/rails/commit/a53ad5bba37199047ba20194933e122bf6b0252f"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Making Active Record Callbacks behave&lt;/h2&gt;


	&lt;p&gt;You may recall the spot in the &lt;a href="http://apidock.com/rails/ActiveRecord/Callbacks"&gt;Active Record documentation&lt;/a&gt; that says “If a &lt;code&gt;before_*&lt;/code&gt; callback returns false, all the later callbacks and the associated action are cancelled.” What you may not know is that this is actually &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/1735"&gt;broken&lt;/a&gt; in the current version of Rails: if you cancel a &lt;code&gt;before_update&lt;/code&gt; or &lt;code&gt;before_create&lt;/code&gt; callback, the &lt;code&gt;after_save&lt;/code&gt; callbacks still run. In Rails 2.3, this will behave the way that the documentation says it does. &lt;a href="http://github.com/rails/rails/commit/7a0e7c7270548138a333bc39aab5aec80580174b"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Fractional seconds for TimeWithZone&lt;/h2&gt;


	&lt;p&gt;The &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;TimeWithZone&lt;/code&gt; classes include an &lt;code&gt;xmlschema&lt;/code&gt; method to return the time in an &lt;span class="caps"&gt;XML&lt;/span&gt;-friendly string. As of this week, &lt;code&gt;TimeWithZone&lt;/code&gt; supports the same argument for specifying the number of digits in the fractional second part of the returned string that &lt;code&gt;Time&lt;/code&gt; does:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Time.zone.now.xmlschema(6)
=&amp;gt; "2009-01-16T13:00:06.13653Z" 
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;a href="http://github.com/rails/rails/commit/296ca4da1700eb27a7043112d22027444ea0e548"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; Key Quoting&lt;/h2&gt;


	&lt;p&gt;If you look up the spec on the “json.org” site, you’ll discover that all keys in a &lt;span class="caps"&gt;JSON&lt;/span&gt; structure must be strings, and they must be quoted with double quotes. As of this week, Rails does the right thing here, even with numeric keys. &lt;a href="http://github.com/rails/rails/commit/0bed5bdb213ea68e2f167ac4f61f698f37cf2d69"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Test Refactoring&lt;/h2&gt;


	&lt;p&gt;Josh Peek spent some time refactoring various tests inside of Action Pack, including those for &lt;a href="http://github.com/rails/rails/commit/282c1d6159a06dce4dd52c1849daad9e73480808"&gt;query string parsing&lt;/a&gt;, &lt;a href="http://github.com/rails/rails/commit/38a723e6ea770eb8a902ee85ef40f6a22e7cd1b8"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; parameter parsing&lt;/a&gt;, &lt;a href="http://github.com/rails/rails/commit/40a75a509187b6759099a3644b7ae8db9fc14045"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; parameter parsing&lt;/a&gt;, &lt;a href="http://github.com/rails/rails/commit/92dbf5ba832c2c4d8f6fda8b151090069cd701f3"&gt;multipart parameter parsing&lt;/a&gt;, and &lt;a href="http://github.com/rails/rails/commit/18cb0493d1ec1990a45000b1f3e6d9714a849690"&gt;&lt;span class="caps"&gt;URL&lt;/span&gt;-encoded parameter parsing&lt;/a&gt;. While you won’t see any new functionality as a result of this work, it’s worth shining a spotlight on the often-thankless cleanup that keeps the Rails code in good shape.&lt;/p&gt;


	&lt;h2&gt;Changes to Object#try&lt;/h2&gt;


	&lt;p&gt;After &lt;a href="http://blog.lawrencepit.com/2009/01/11/try-as-you-might/"&gt;some discussion&lt;/a&gt;, the semantics of &lt;code&gt;Object#try&lt;/code&gt; have changed slightly: it now raises &lt;code&gt;NoMethodError&lt;/code&gt; on private methods and always returns &lt;code&gt;nil&lt;/code&gt; if the object is nil. &lt;a href="http://github.com/rails/rails/commit/5339f813be99012aba01586743d8b24f065e7034"&gt;commit&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/16/this-week-in-edge-rails</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-15:24449</id>
    <published>2009-01-15T09:58:00Z</published>
    <updated>2009-01-16T10:46:02Z</updated>
    <category term="Activism" />
    <category term="activism" />
    <category term="book" />
    <category term="documentation" />
    <category term="guides" />
    <category term="rdoc" />
    <category term="wiki" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/513029410/rails-documentation-projects" rel="alternate" type="text/html" />
    <title>Rails Documentation Projects</title>
<content type="html">
            &lt;p&gt;&lt;img src="/assets/2009/1/15/book.png" /&gt; With the recent revitalization of the &lt;a href="http://groups.google.com/group/rubyonrails-wiki"&gt;Rails Wiki&lt;/a&gt; project, we’re seeing people ask how the various pieces of Rails documentation fit together. I thought it might be useful to lay out how the Rails Activists see everything fitting together as we move forward.&lt;/p&gt;


	&lt;p&gt;Rails is a large and mature framework, with a lot of functionality – and with the Merb merger, there will be even more to learn in the future. As such, it presents challenges for developers at all levels trying to understand how to use Rails effectively. There are many resources to help with the learning process, including commercial books and magazines, screencasts and podcasts, tutorials, blog entries, and training courses. But there is also a series of official written documentation projects.&lt;/p&gt;


	&lt;p&gt;There’s no such thing as one-size-fits-all documentation. Different developers bring different skill sets, backgrounds, and levels of professional maturity to learning Rails. There are at least four levels of official documentation, overlapping but serving different needs:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Inline documentation, with comments within the code itself (that you can see by running &lt;code&gt;rake doc:rails&lt;/code&gt; within any Rails project).&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://guides.rubyonrails.org/"&gt;Rails Guides&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Rails Book (a new project for Rails 3.0)&lt;/li&gt;
		&lt;li&gt;Rails wiki&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Although at first glance there appears to be substantial overlap, our feeling is that the each of these projects occupies a distinct (and valuable) niche.&lt;/p&gt;


	&lt;h2&gt;RDoc&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;Provides immediate help for syntax questions&lt;/li&gt;
		&lt;li&gt;Maintained by the actual core developers and generally up-to-date&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Rails Guides:&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;Provides focused “how to” help for particular problem domains&lt;/li&gt;
		&lt;li&gt;Target the mid-level developer, possibly with Rails experience&lt;/li&gt;
		&lt;li&gt;Have a large amount of existing high-quality material&lt;/li&gt;
		&lt;li&gt;Are already being continuously revised to track changes in edge Rails&lt;/li&gt;
		&lt;li&gt;Can include version-specific tutorial code samples&lt;/li&gt;
		&lt;li&gt;Can be delivered as a part of core Rails to provide “guidance at your fingertips” for new developers&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Rails Book:&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;Provides high-level architectural guidance and overview of how the pieces fit together&lt;/li&gt;
		&lt;li&gt;Digs into the philosophy of the “Rails Ways”, so readers can understand why the framework works the way it does&lt;/li&gt;
		&lt;li&gt;Targets the developer new to Rails or those wanting to go from the “trees” to the “forest” view&lt;/li&gt;
		&lt;li&gt;Offers help in conceptualizing Rails and choosing between alternative modules (ORMs, routing DSLs, etc.) in the Rails 3 timeframe&lt;/li&gt;
		&lt;li&gt;Can draw on the Merb experience in simultaneous translation and pulling in contributions from many writers&lt;/li&gt;
		&lt;li&gt;Largely version independent&lt;/li&gt;
		&lt;li&gt;Gives a structured path through end-to-end documentation in a way that standalone Guides do not&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Rails Wiki&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;Community-driven documentation that can respond rapidly to new software and new questions&lt;/li&gt;
		&lt;li&gt;A good repository to links to external information&lt;/li&gt;
		&lt;li&gt;Potentially a showcase for Rails itself in the underlying software&lt;/li&gt;
		&lt;li&gt;A place to put the accumulated community knowledge, even the pieces that are not often needed&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;It’s important to note that we don’t see these four projects as entirely separate efforts that have no interaction with one another. In particular, it seems likely that the Book will link to the Guides for those seeking additional detail, while the Guides will link to the Book for those seeking additional high-level guidance. We also anticipate that the wiki will point readers to both Guides and Book (as well as to other sources of information).&lt;/p&gt;


	&lt;p&gt;So, what can &lt;em&gt;you&lt;/em&gt; do to get involved? If you’re a writer, translator, or editor, any of these documentation projects would love to have your help:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;To contribute to the RDoc, write a Rails patch with good comments or check out the &lt;a href="http://weblog.rubyonrails.org/2008/5/2/help-improve-rails-documentation-on-git-branch"&gt;docrails&lt;/a&gt; project.&lt;/li&gt;
		&lt;li&gt;To help the Rails Guides, get in touch with &lt;a href="mailto:pratiknaik@gmail.com"&gt;Pratik Naik&lt;/a&gt; or &lt;a href="mailto:mikeg1@larkfarm.com"&gt;Mike Gunderloy&lt;/a&gt;, or drop by the #docrails channel on &lt;span class="caps"&gt;IRC&lt;/span&gt; freenode.&lt;/li&gt;
		&lt;li&gt;To get involved with the Rails Book, contact &lt;a href="mailto:mattaimonetti@gmail.com"&gt;Matt Aimonetti&lt;/a&gt;.&lt;/li&gt;
		&lt;li&gt;To add to the Rails Wiki, join the &lt;a href="http://groups.google.com/group/rubyonrails-wiki"&gt;rubyonrails-wiki&lt;/a&gt; group.&lt;/li&gt;
	&lt;/ul&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/15/rails-documentation-projects</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Gregg Pollack</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-13:24444</id>
    <published>2009-01-13T17:38:00Z</published>
    <updated>2009-01-13T17:38:15Z</updated>
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/511022132/activist-status-wiki-project" rel="alternate" type="text/html" />
    <title>Activist Status &amp; Wiki Project</title>
<content type="html">
            &lt;p&gt;So last week we were announced as activists, but what have we been doing?  I’m sure there are some wondering, so here is our first report. Read on for news of our first big project, what each of us is working on, and how you can help today.&lt;/p&gt;


	&lt;p&gt;Firstly, we’ve been very pleased by the number of people who are actively interested in helping us improve the Rails ecosystem. Your input through &lt;a href="http://rails.uservoice.com/"&gt;UserVoice&lt;/a&gt;, the &lt;a href="http://groups.google.com/group/rails-activism"&gt;Activism Mailing List&lt;/a&gt;, Twitter, e-mail, and instant messages has been inspiring (and a bit overwhelming!). We listened, and one of the most popular requests revolved around the Wiki.&lt;/p&gt;


	&lt;p&gt;&lt;img src="/assets/2009/1/13/Engine_Start.png" /&gt;&lt;/p&gt;


	&lt;h1&gt;The Rails Wiki Reform&lt;/h1&gt;


	&lt;p&gt;The Rails Wiki is in poor shape, for many reasons and it’s not one person’s fault.  The good news is that our first major project is going to be revitalizing the wiki.  To get our engines started, we’re forming a dedicated team to shape it into something the Rails community can be proud of.&lt;/p&gt;


	&lt;p&gt;If you’re interested in helping, simply join the &lt;a href="http://groups.google.com/group/rubyonrails-wiki"&gt;Ruby on Rails Wiki&lt;/a&gt; Google Group. After you join, you’ll find a note on the group from Matt Aimonetti with more details.&lt;/p&gt;


	&lt;p&gt;&lt;img src="/assets/2009/1/13/Shadows.png" /&gt;&lt;/p&gt;


	&lt;h1&gt;What we’re doing&lt;/h1&gt;


	&lt;p&gt;All of the Activists are busy with projects that fall under the general heading of “helping Rails.” Here’s a sampling of what we’re up to:&lt;/p&gt;


&lt;strong&gt;Gregg Pollack&lt;/strong&gt;
	&lt;ul&gt;
	&lt;li&gt;Producing the &lt;a href="http://www.railsenvy.com/podcast"&gt;Rails Envy Podcast&lt;/a&gt;. &lt;/li&gt;
		&lt;li&gt;Working on a free “Scaling Rails” screencast series.  Hoping to release close to the end of the month.&lt;/li&gt;
		&lt;li&gt;Launching year 2 of the Ruby Hero Awards shortly.&lt;/li&gt;
		&lt;li&gt;Promoting Ruby/Rails at &lt;span class="caps"&gt;OOP 2009&lt;/span&gt; in Germany, then &lt;a href="http://www.actsasconference.com"&gt;Acts As Conference&lt;/a&gt; in Orlando, FL.&lt;/li&gt;
	&lt;/ul&gt;


&lt;strong&gt;Matt Aimonetti&lt;/strong&gt;
	&lt;ul&gt;
	&lt;li&gt;Putting together Case Studies.&lt;/li&gt;
		&lt;li&gt;Investigating the current state of the Rails wiki and possibilities.&lt;/li&gt;
		&lt;li&gt;Working on the &lt;a href="http://github.com/mattetti/merb-book"&gt;Merb book&lt;/a&gt; (yes, Merb projects help Rails too).&lt;/li&gt;
	&lt;/ul&gt;


&lt;strong&gt;Ryan Bates&lt;/strong&gt;
	&lt;ul&gt;
	&lt;li&gt;Doing &lt;a href="http://railscasts.com/"&gt;Railscasts.com&lt;/a&gt;.&lt;/li&gt;
		&lt;li&gt;Creating a Screencast application for aggregating Rails screencasts all into one feed on the RubyOnRails.org website.&lt;/li&gt;
	&lt;/ul&gt;


&lt;strong&gt;Mike Gunderloy&lt;/strong&gt;
	&lt;ul&gt;
	&lt;li&gt;Covering This Week in Edge Rails on the official Rails blog.&lt;/li&gt;
		&lt;li&gt;Working with Chad Woolley to improve the Rails CI server, including builds across multiple versions of Ruby and JRuby.&lt;/li&gt;
		&lt;li&gt;Providing user support via #rubyonrails and #rails-activism on &lt;span class="caps"&gt;IRC&lt;/span&gt; freenode.&lt;/li&gt;
		&lt;li&gt;Posting daily &lt;a href="http://afreshcup.com/"&gt;link roundups&lt;/a&gt; pointing to things of interest to Rails developers.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;&lt;img src="/assets/2009/1/13/Marbles.png" /&gt;&lt;/p&gt;


	&lt;h1&gt;Other Stuff You Can Do&lt;/h1&gt;


	&lt;p&gt;If you’re asking “What can I do today to help Ruby on Rails?”, aside from joining one of our mailing lists and collaborating with us, here are a few items that come to mind:&lt;/p&gt;


	&lt;ol&gt;
	&lt;li&gt;Contact &lt;a href="mailto://mattaimonetti@gmail.com"&gt;Matt Aimonetti&lt;/a&gt; if you think you have a good Case Study on Rails.&lt;/li&gt;
		&lt;li&gt;Go to &lt;a href="http://www.ruby-forum.com/forum/3"&gt;RubyForum&lt;/a&gt; or &lt;span class="caps"&gt;IRC&lt;/span&gt; and help new Rails developers.&lt;/li&gt;
		&lt;li&gt;Go to your local Ruby Users Group, or start one.&lt;/li&gt;
		&lt;li&gt;Go to a &lt;a href="http://www.railsinside.com/events/195-3-upcoming-rails-events-in-early-2009.html"&gt;Rails related conference&lt;/a&gt;.&lt;/li&gt;
		&lt;li&gt;The next time you tackle a hard problem in your rails app, write a blog entry.  &lt;/li&gt;
		&lt;li&gt;Take one of your Rails Libraries/Modules, and turn it into a Gem or Plugin.&lt;/li&gt;
		&lt;li&gt;If you’re surfing Rails blog articles and you find one that is outdated leave a comment or let the author know the content should be updated or marked as obsolete.&lt;/li&gt;
	&lt;/ol&gt;


	&lt;p&gt;&lt;small&gt;Flickr Credits: &lt;a href="http://www.flickr.com/photos/shanafin/575853040/"&gt;Big Red Button&lt;/a&gt; &lt;a href="http://www.flickr.com/photos/carolsawada/177677493/"&gt;Okinawa-Churaumi Aquarium&lt;/a&gt; &lt;a href="http://www.flickr.com/photos/photos-martha/527179606/"&gt;marbles&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/13/activist-status-wiki-project</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-09:24429</id>
    <published>2009-01-09T13:26:00Z</published>
    <updated>2009-01-09T14:15:11Z</updated>
    <category term="Edge" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/507189729/this-week-in-edge-rails" rel="alternate" type="text/html" />
    <title>This Week in Edge Rails</title>
<content type="html">
            &lt;h3&gt;January 3, 2009 -January 9, 2009&lt;/h3&gt;


	&lt;p&gt;It was a pretty light week for the edge Rails tree: about 20 commits. We’re starting to see things coalesce for a 2.3 release, though there’s no official release date yet. Here’s some of the highlights of what’s been going on.&lt;/p&gt;


	&lt;h2&gt;AssetTag Timestamp Caching&lt;/h2&gt;


	&lt;p&gt;You’re likely familiar with Rails’ practice of adding timestamps to static asset paths as a “cache buster.” This helps ensure that stale copies of things like images and stylesheets don’t get served out of the user’s browser cache when you change them on the server. You can now modify this behavior with the &lt;code&gt;cache_asset_timestamps&lt;/code&gt; configuration option for Action View. If you enable the cache, then Rails will calculate the timestamp once when it first serves an asset, and save that value. This means fewer (expensive) file system calls to serve static assets – but it also means that you can’t modify any of the assets while the server is running and expect the changes to get picked up by clients. &lt;a href="http://github.com/rails/rails/commit/ce706b4b9be03a3f2e7d11438e6550d64c5f4461"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Object#tap Backport&lt;/h2&gt;


&lt;code&gt;Object#tap&lt;/code&gt; is an addition to &lt;a href="http://www.ruby-doc.org/core-1.9/classes/Object.html#M000309"&gt;Ruby 1.9&lt;/a&gt; and 1.8.7 that is similar to the &lt;code&gt;returning&lt;/code&gt; method that Rails has had for a while: it yields to a block, and then returns the object that was yielded. Rails now includes code to make this available to older versions of Ruby as well. &lt;a href="http://github.com/rails/rails/commit/0f9e65b71f9af30dac17689e81f4353e9fcac5b6"&gt;commit&lt;/a&gt;

	&lt;h2&gt;Rack Version Bump&lt;/h2&gt;


	&lt;p&gt;During the week, the Rack project &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/324073"&gt;released version 0.9&lt;/a&gt; and Rails was quick to respond – the required version of Rack for Rails is now 0.9. So, if you’re running on edge, it’s time to update your gems. &lt;a href="http://github.com/rails/rails/commit/b7ea4add86231ef628d479516c8a09ca55e610bc"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Continuous Integration Setup&lt;/h2&gt;


	&lt;p&gt;If you’re interested in setting up your own continuous integration server to build the Rails source, the embedded instructions have been updated with the latest requirements and clarifications. Even if you want a CI server for something else, they’re worth looking at, as they’ll get you from zero to a running cc.rb instance very quickly. &lt;a href="http://github.com/rails/rails/commit/19818eb0ea72cb99e98bd097d03ac8a69f204b6a"&gt;commit&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/9/this-week-in-edge-rails</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-05:24395</id>
    <published>2009-01-05T16:52:00Z</published>
    <updated>2009-01-05T18:20:52Z</updated>
    <category term="General" />
    <category term="activism" />
    <category term="evangelism" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/503589793/announcing-the-rails-activists" rel="alternate" type="text/html" />
    <title>Announcing the Rails activists</title>
<content type="html">
            &lt;p&gt;&lt;img src="/assets/2009/1/5/crowd.png" alt="Railway station crowd" /&gt;&lt;/p&gt;


	&lt;p&gt;Bringing Rails and Merb together is about more than just merging the respective code. We’re also picking up the best ideas from both communities beyond the code. Following on Merb’s success in offering a strong evangelism effort, we’re pleased to announce the creation of the &lt;a href="http://rubyonrails.org/activists"&gt;&lt;strong&gt;Rails activists&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote&gt;
The mission of the Rails activists is to empower and support the worldwide network of Ruby on Rails users. We do this by publicizing Rails, making adoption easier, and enhancing developer support.
&lt;/blockquote&gt;

	&lt;p&gt;At launch, we’ve identified seven areas where the Rails activists can contribute to the Rails ecosystem:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Public Relations with media of all sizes&lt;/li&gt;
		&lt;li&gt;Ombudsman work to ensure good user-to-user support&lt;/li&gt;
		&lt;li&gt;Community Leadership at events and conferences&lt;/li&gt;
		&lt;li&gt;Media Organization to help create good promotional opportunities&lt;/li&gt;
		&lt;li&gt;Website maintenance&lt;/li&gt;
		&lt;li&gt;Documentation efforts&lt;/li&gt;
		&lt;li&gt;Developer support&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;The initial members of the Rails activists are &lt;a href="http://twitter.com/greggpollack"&gt;Gregg Pollack&lt;/a&gt;, &lt;a href="http://twitter.com/merbist"&gt;Matt Aimonetti&lt;/a&gt;, &lt;a href="http://twitter.com/rbates"&gt;Ryan Bates&lt;/a&gt;, and &lt;a href="http://twitter.com/mikeg1"&gt;Mike Gunderloy&lt;/a&gt;. But we can’t do all this alone, nor do we want to! Our vision includes a large and vibrant Rails network composed of other activists, bloggers, event hosts, authors, and developers. Our intent is to provide connections, resources, and support to help the entire ecosystem to grow. To start things off, we’re bringing in a lot of our &lt;a href="http://rubyonrails.org/activists"&gt;own projects&lt;/a&gt;, including videos, screencasts, case studies, Rails documentation, and more – we’re a working group, and we hope you’ll work with us.&lt;/p&gt;


	&lt;p&gt;If you have ideas about improving the Rails community, projects you want to participate in, or are just looking for ways to get involved, get in touch with us! There are a lot of ways to do that:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Through the new &lt;a href="http://groups.google.com/group/rails-activism"&gt;Rails activism&lt;/a&gt; Google group. &lt;/li&gt;
		&lt;li&gt;Through the &lt;a href="http://rails.uservoice.com/"&gt;Rails feedback site&lt;/a&gt;, where you can vote on which projects you’d like to see us devote resources to in the Rails 3 timeframe and beyond.&lt;/li&gt;
		&lt;li&gt;Through our Twitter accounts (linked above)&lt;/li&gt;
		&lt;li&gt;Through &lt;span class="caps"&gt;IRC&lt;/span&gt; to Matt (mattetti) or Mike (mikeg1a)&lt;/li&gt;
		&lt;li&gt;Through email to &lt;a href="mailto:mikeg1@larkfarm.com"&gt;Mike Gunderloy&lt;/a&gt;, &lt;a href="mailto:mattaimonetti@gmail.com"&gt;Matt Aimonetti&lt;/a&gt;, &lt;a href="mailto:Gregg@railsenvy.com"&gt;Gregg Pollack&lt;/a&gt;, or &lt;a href="mailto:ryan@railscasts.com"&gt;Ryan Bates&lt;/a&gt;.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;


	&lt;p&gt;For additional perspectives from the activists, see the posts by &lt;a href="http://www.railsenvy.com/2009/1/5/the-rails-activist-team"&gt;Gregg Pollack&lt;/a&gt;, &lt;a href="http://merbist.com/2009/01/05/presenting-the-rails-activists/"&gt;Matt Aimonetti&lt;/a&gt;, and &lt;a href="http://afreshcup.com/2009/01/05/announcing-the-rails-activists/"&gt;Mike Gunderloy&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Photo by Flickr user caravinagre&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/5/announcing-the-rails-activists</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2009-01-02:24394</id>
    <published>2009-01-02T17:34:00Z</published>
    <updated>2009-01-02T17:36:01Z</updated>
    <category term="Edge" />
    <category term="edge" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/501124482/this-week-in-edge-rails" rel="alternate" type="text/html" />
    <title>This Week in Edge Rails</title>
<content type="html">
            &lt;h3&gt;December 27, 2008-January 2, 2009&lt;/h3&gt;


	&lt;p&gt;Happy New Year! Apparently the Rails core team was not doing too much partying to end the old year: we had 35 commits hit the edge tree, and some of them involved very substantial work. Here’s my weekly overview of some of the most visible and significant changes.&lt;/p&gt;


	&lt;h2&gt;Optimization of respond_to&lt;/h2&gt;


	&lt;p&gt;In some of the first fruits of the Rails-Merb team merger, Yehuda Katz took a look at the &lt;code&gt;respond_to&lt;/code&gt; method, which is of course heavily used in many Rails applications to allow your controller to format results differently based on the &lt;span class="caps"&gt;MIME&lt;/span&gt; type of the incoming request. After eliminating a call to &lt;code&gt;method_missing&lt;/code&gt; and some profiling and tweaking, he reports an 8% improvement in the number of requests per second served with a simple &lt;code&gt;respond_to&lt;/code&gt; that switches between three formats. The best part? No change at all required to the code of your application to take advantage of this speedup. &lt;a href="http://github.com/rails/rails/commit/6dc12881110d26bb952bd0f565623144f10a07b6"&gt;commit&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/4f043a48381c142e308824e3b7e15435a61bbb53"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;If you want a preview of what else to expect from Rails 3, you might want to dip into Yehuda’s &lt;a href="http://github.com/wycats/rails/tree/master;"&gt;own fork of the Rails tree&lt;/a&gt; I’ll be covering these changes as they make their way back into the master copy of edge Rails.&lt;/p&gt;


	&lt;h2&gt;Dynamic Scopes for Active Record&lt;/h2&gt;


	&lt;p&gt;You know about dynamic finders in Rails (which allow you to concoct methods like &lt;code&gt;find_by_color_and_flavor&lt;/code&gt; on the fly) and named scopes (which allow you to encapsulate reusable query conditions into friendly names like &lt;code&gt;currently_active&lt;/code&gt;). Well, now you can have dynamic scope methods. The idea is to put together syntax that allows filtering on the fly &lt;i&gt;and&lt;/i&gt; method chaining. For example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
Order.scoped_by_customer_id(12)
Order.scoped_by_customer_id(12).find(:all, 
  :conditions =&amp;gt; "status = 'open'")
Order.scoped_by_customer_id(12).scoped_by_status("open")
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;There’s some further discussion of this over on Ryan Daigle’s &lt;a href="http://ryandaigle.com/articles/2008/12/29/what-s-new-in-edge-rails-dynamic-scope-methods"&gt;blog&lt;/a&gt;. &lt;a href="http://github.com/rails/rails/commit/66ee5890c5f21995b7fe0c486547f1287afe2b55"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Other Active Record Updates&lt;/h2&gt;


	&lt;p&gt;There were a few changes going on in Active Record this week. A trio of commits cleaned up some behavior of associations when the &lt;code&gt;:primary_key&lt;/code&gt; option is specified. &lt;a href="http://github.com/rails/rails/commit/7db1704068b86fb2212388b14b4963526bacfa5d"&gt;commit&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/f9cab0e503a4721c9d0369f89bb85c6e658f778c"&gt;commit&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/21efba464afa2ae6e5dfd938ac8a3ce446faf7e7"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;On another front, &lt;code&gt;ActiveRecord::Base#new_record?&lt;/code&gt; now returns false rather than nil when confronted with an existing record. While there was &lt;a href="http://github.com/rails/rails/commit/6e98adfc8e19a39fa45d4acd94145d318d151964#comments"&gt;some discussion&lt;/a&gt; of the wisdom of this change, the consensus seems to be that it can’t hurt and might make things less surprising for some developers. &lt;a href="http://github.com/rails/rails/commit/6e98adfc8e19a39fa45d4acd94145d318d151964"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Digest Authentication&lt;/h2&gt;


	&lt;p&gt;Rails now has built-in support for &lt;a href="http://www.faqs.org/rfcs/rfc2617.html"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; digest authentication&lt;/a&gt;. To use it, you call &lt;code&gt;authenticate_or_request_with_http_digest&lt;/code&gt; with a block that returns the user’s password (which is then hashed and compared against the transmitted credentials):&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class PostsController &amp;lt; ApplicationController
  Users = {"dhh" =&amp;gt; "secret"}
  before_filter :authenticate

  def secret
    render :text =&amp;gt; "Password Required!" 
  end

  private
  def authenticate
    realm = "Application" 
    authenticate_or_request_with_http_digest(realm) do |name|
      Users[name]
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;a href="http://github.com/rails/rails/commit/45dee3842d68359a189fe7c0729359bd5a905ea4"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Multiple Conditions for Callbacks&lt;/h2&gt;


	&lt;p&gt;When using Active Record callbacks, you can now combine &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; options on the same callback, and supply multiple conditions as an array:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
before_save :update_credit_rating, :if =&amp;gt; :active, 
  :unless =&amp;gt; [:admin, :cash_only]
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;a href="http://github.com/rails/rails/commit/1e45818a622405e720a4529795f8be2f11660361"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Testing and continuous integration&lt;/h2&gt;


	&lt;p&gt;A little flurry of activity cleaned up some loose ends in our testing strategy for Rails itself. This included &lt;a href="http://github.com/rails/rails/commit/fdaa9ed0336634c33b5a529dfe4f5ed506a1fc5e"&gt;not running symlink tests on Windows&lt;/a&gt;, adding &lt;a href="http://github.com/rails/rails/commit/9fd35fc2d892393386ca9f522d25ba0bcb9c6764"&gt;test coverage&lt;/a&gt; to &lt;code&gt;Rails::TemplateRunner&lt;/code&gt;, removing &lt;a href="http://github.com/rails/rails/commit/1fb275541a58e6a2100261c6117e96e6c014cc6c"&gt;some&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/490c26c8433a6d278bc61118782da360e8889646"&gt;assumptions&lt;/a&gt; in various tests, and getting the &lt;a href="http://github.com/rails/rails/commit/36af857c435cbbdb43f5a7bed200ddaa5e10ef80"&gt;&lt;span class="caps"&gt;FCGI&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://github.com/rails/rails/commit/220dff4c3b58b7becb587ee6f2434b2ca720f7c3"&gt;sqlite2&lt;/a&gt; tests working again. This is all part of a longer-term effort to make the Rails &lt;a href="http://ci.rubyonrails.org/"&gt;continuous integration server&lt;/a&gt; more useful moving forward. As you’ll see if you peek at the current build status, we’re not quite there yet, but we’re getting close.&lt;/p&gt;


	&lt;p&gt;By the way, if you want to set up your own CI server for Rails, there are &lt;a href="http://github.com/rails/rails/tree/master/ci"&gt;instructions&lt;/a&gt; right in the source code.&lt;/p&gt;


	&lt;h2&gt;Code Comments for Metaprogramming&lt;/h2&gt;


	&lt;p&gt;One side effect of the changes to &lt;code&gt;respond_to&lt;/code&gt; is that people &lt;a href="http://github.com/rails/rails/commit/6dc12881110d26bb952bd0f565623144f10a07b6#comments"&gt;really liked&lt;/a&gt; the inline comments that make the intent of the &lt;code&gt;class_eval&lt;/code&gt; code clear. As a result, we now have similar comments throughout the Rails source code. For example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def #{method_name}     # def year
  time.#{method_name}  #   time.year
end                    # end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;If you’re just using Rails, you’ll never see these comments – but if you’re helping to maintain and improve the framework, you’ll appreciate them. &lt;a href="http://github.com/rails/rails/commit/a2270ef2594b97891994848138614657363f2806"&gt;commit&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2009/1/2/this-week-in-edge-rails</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-26:24369</id>
    <published>2008-12-26T14:22:00Z</published>
    <updated>2008-12-26T14:25:03Z</updated>
    <category term="Edge" />
    <category term="edge" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/495606097/this-week-in-edge-rails" rel="alternate" type="text/html" />
    <title>This Week in Edge Rails</title>
<content type="html">
            &lt;h3&gt;December 20-December 26, 2008 Edition&lt;/h3&gt;


	&lt;p&gt;The biggest change in Rails in recent memory isn’t reflected in edge Rails yet: I’m speaking, of course, about the &lt;a href="http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3"&gt;merger of Merb into Rails 3&lt;/a&gt; . There is a &lt;strong&gt;3-0-unstable&lt;/strong&gt; branch in the repository, but it hasn’t yet started to diverge from the main line of development. I’ll continue to focus on the &lt;strong&gt;master&lt;/strong&gt; branch, which will be released as Rails 2.3, for the time being.&lt;/p&gt;


	&lt;p&gt;And Rails 2.3 is still cooking along. The team managed 39 commits this week, despite people taking holiday time off. Many of those were minor bug fixes, but here are a few things you might want to track in the new development.&lt;/p&gt;


	&lt;h2&gt;Unified rendering&lt;/h2&gt;


&lt;code&gt;ActionController::Base#render&lt;/code&gt; is a lot smarter about deciding what to render. You can just throw things at it and expect to get the right results. If you’re using Rails 2.2, you often need to supply explicit information to render:

&lt;pre&gt;&lt;code&gt;
render :file =&amp;gt; '/tmp/random_file.erb'
render :template =&amp;gt; 'other_controller/action'
render :action =&amp;gt; 'show'
&lt;/code&gt;&lt;/pre&gt;
Now in Rails 2.3, you can just supply what you want to render:

&lt;pre&gt;&lt;code&gt;
render '/tmp/random_file.erb'
render 'other_controller/action'
render 'show'
render :show
&lt;/code&gt;&lt;/pre&gt;
Rails chooses between file, template, and action depending on whether there is a leading slash, an embedded slash, or no slash at all in what’s to be rendered. Note that you can also use a symbol instead of a string when rendering an action. Other rendering styles (&lt;code&gt;:inline, :text, :update, :nothing, :json, :xml, :js&lt;/code&gt;) still require an explicit option.

	&lt;p&gt;&lt;a href="http://github.com/rails/rails/commit/061952392afd1dae1aa97a816e9a0c79df7c4514"&gt;commit&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/d67e03871eabb912434dafac3eeb8e6ea7c5585f"&gt;commit&lt;/a&gt;
&lt;a href="http://github.com/rails/rails/commit/cd1d6e8768ae13b11bc343701037b20ad35e6f1e"&gt;commit&lt;/a&gt;
&lt;a href="http://github.com/rails/rails/commit/80307c8b0a889acc7abb7f4e52fd4c02e1063ba8"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;ActiveRecord fixes&lt;/h2&gt;


	&lt;p&gt;A couple of fixes to ActiveRecord get rid of failing cases for associations. One handles quoting table names in some &lt;code&gt;has_many :through&lt;/code&gt; associations – if the table name contains a &lt;span class="caps"&gt;SQL&lt;/span&gt; keyword, then you can’t use it in such an association in Rails 2.2. &lt;a href="http://github.com/rails/rails/commit/75a133f92ff7e27b83032babf829d8a58803bb3c"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;The other fix allows you to once again use a hash in conditions for a &lt;code&gt;has_many&lt;/code&gt; relationship:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
has_many :orders, :conditions =&amp;gt; {:status =&amp;gt; 'confirmed'}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;That worked in Rails 2.1, fails in Rails 2.2, and will now work again in Rails 2.3 (if you’re dealing with this issue in Rails 2.2, you can use a string rather than a hash to specify conditions). &lt;a href="http://github.com/rails/rails/commit/b17b9371c6a26484eb1984d45acffcdcd91b1ae1"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Some side effects of calling &lt;code&gt;Model#last&lt;/code&gt; (it would change the order for other finders within the same scope) have been removed. &lt;a href="http://github.com/rails/rails/commit/f7bd0beb67c5d9d50e37aa596605b91e61197fbe"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Prompts for Date Select Helpers&lt;/h2&gt;


	&lt;p&gt;With this patch, you can supply custom prompts for the various date select helpers (&lt;code&gt;date_select&lt;/code&gt;, &lt;code&gt;time_select&lt;/code&gt;, and &lt;code&gt;datetime_select&lt;/code&gt;), the same way you can with collection select helpers. You can supply a prompt string or a hash of individual prompt strings for the various components. You can also just set &lt;code&gt;:prompt&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to use the custom generic prompt:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
select_datetime(DateTime.now, :prompt =&amp;gt; true)

select_datetime(DateTime.now, :prompt =&amp;gt; "Choose date and time")

select_datetime(DateTime.now, :prompt =&amp;gt; 
  {:day =&amp;gt; 'Choose day', :month =&amp;gt; 'Choose month', 
   :year =&amp;gt; 'Choose year', :hour =&amp;gt; 'Choose hour', 
   :minute =&amp;gt; 'Choose minute'})
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;a href="http://github.com/rails/rails/commit/389534c38c3baaa63ce5cc2ba3bd169415419167"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Odds and Ends&lt;/h2&gt;


	&lt;p&gt;The dbconsole script now lets you use an all-numeric password without crashing. &lt;a href="http://github.com/rails/rails/commit/7cda0df7f1511a10c515165dbce76e5c68b654ff"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;You can now use symbols for the &lt;code&gt;:type&lt;/code&gt; option of &lt;code&gt;send_file&lt;/code&gt; and &lt;code&gt;send_data&lt;/code&gt;, like this: &lt;code&gt;send_file("fabulous.png", :type =&amp;gt; :png)&lt;/code&gt;. &lt;a href="http://github.com/rails/rails/commit/fcd58dc27a99085b161f2463988d4ee373d44ec6"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;If you’re using Active Support &lt;a href="http://afreshcup.com/2008/10/19/coming-in-rails-22-delegate-prefixes/"&gt;delegates&lt;/a&gt;, the new &lt;code&gt;:allow_nil&lt;/code&gt; option lets you return nil instead of raising an exception when the target object is nil. &lt;a href="http://github.com/rails/rails/commit/e8de7a67a5ef063164da022845a7cae1753da80e"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;You can now specify a particular timestamp for &lt;code&gt;updated_at&lt;/code&gt; timestamps: &lt;code&gt;cust = Customer.create(:name =&amp;gt; "ABC Industries", :updated_at =&amp;gt; 1.day.ago)&lt;/code&gt; &lt;a href="http://github.com/rails/rails/commit/63aac338332a06d3c9e28dde7954679703ec7620"&gt;commit&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/26/this-week-in-edge-rails</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-23:24186</id>
    <published>2008-12-23T19:47:00Z</published>
    <updated>2008-12-23T20:03:51Z</updated>
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/493415973/merb-gets-merged-into-rails-3" rel="alternate" type="text/html" />
    <title>Merb gets merged into Rails 3!</title>
<content type="html">
            &lt;p&gt;It’s christmas, baby, and do we have a present for you. We’re ending the bickering between Merb and Rails with a this bombshell: Merb is being merged into Rails 3!&lt;/p&gt;


	&lt;p&gt;We all realized that working together for a common good would be much more productive than duplicating things on each side of the fence. Merb and Rails already share so much in terms of design and sensibility that joining forces seemed like the obvious way to go. All we needed was to sit down for a chat and hash it out, so we did just that.&lt;/p&gt;


	&lt;p&gt;What this will mean in practice is that the Merb team is putting their efforts into bringing all of the key Merb ideas into Rails 3. Yehuda Katz will outright join &lt;a href="http://rubyonrails.org/core"&gt;the Rails core team&lt;/a&gt;, Matt Aimonetti will work on a new evangelism team, and Carl Lerche and Daniel Neighman (hassox) will be co-starring the effort to bring all this over. We’ve immortalized the merge with plaque page at &lt;a href="http://rubyonrails.org/merb"&gt;rubyonrails.org/merb&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;What’s being brought over?&lt;/b&gt;&lt;br /&gt;
Some of the key ideas that they’ll be taking with them from Merb into Rails 3 are:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Rails core: Yes, Rails is a full-stack framework and will remain so, but there’s no reason we shouldn’t also make it possible to run with less than the full monty. Rails 3 will make it easy to run just a bare minimum and then allow you to opt in just the stuff you want, if that’s necessary for your particular situation. Think “rails myapp—core” (and “rails myapp—flat”).&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Performance optimizations: Merb has a lot of Rails pieces rewritten to be faster. We’ll be bringing all that good stuff over. We’ll also bend the architecture in the places where that’s necessary for a big yield. In short, Rails 3 will get all the performance attention that the Merb guys are known for.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Framework agnosticism: Rails will always have a default answer to every question within the stack. If you don’t care about testing frameworks, you’ll get test/unit. If you don’t care about which &lt;span class="caps"&gt;ORM&lt;/span&gt;, you’ll get Active Record. But some people do care and want something else. Some people want RSpec for testing, others want to use Sequel or Data Mapper for &lt;span class="caps"&gt;ORM&lt;/span&gt;, others again prefer Haml for templating, and some might prefer jQuery for Ajax. All these people should feel like Rails is welcoming them with open arms. Yes, we’ll have a default, but we shouldn’t have any form of discrimination against alternatives.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Rigorous &lt;span class="caps"&gt;API&lt;/span&gt;: Too many plugins break when Rails is updated because it’s not clear where they can safely hook into the internals and when they’re monkeypatching and should expect things to break. The Merb guys committed to a public &lt;span class="caps"&gt;API&lt;/span&gt; with tests to ensure that it wouldn’t break. They’ll bring over that line of thinking and give Rails 3 a tested and documented &lt;span class="caps"&gt;API&lt;/span&gt; for extensions that won’t break willy-nilly with upgrades.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;&lt;b&gt;This is not a big bang rewrite&lt;/b&gt;&lt;br /&gt;
It’s important to understand, however, that this is not a “big bang” rewrite of Rails. We’re far beyond the time when we could just throw out everything and start over. This is going to be a progressive improvement of Rails that’ll carefully judge new initiatives on their impact on backwards compatibility as well as their general utility.&lt;/p&gt;


	&lt;p&gt;I’m sure there’ll be some parts of Rails 3 that are incompatible, but we’ll try to keep them to a minimum and make it really easy to convert a Rails 2.x application to Rails 3. The Merb guys will also be working hard on giving existing Merb users a manageable upgrade path to Rails 3. We’re working with lots of ideas including allowing existing Merb controllers to be mounted alongside new Rails 3 ones. We’ll see how it all plays out, but play out it will.&lt;/p&gt;


	&lt;p&gt;Also, the Merb guys aren’t just abandoning the existing Merb user base and their applications. They’ll still be doing bug fixes, security fixes, and work on easing the upgrade path to Rails 3. This will all progress in a nice, orderly fashion.&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;The timeline&lt;/b&gt;&lt;br /&gt;
Rails 2.3 is just around the corner. We hope to wrap up and release in January. It’s a blockbuster release packed with goodies to the tilt. But as soon as that’s done, all eyes will be on Rails 3.&lt;/p&gt;


	&lt;p&gt;The probably-overly-optimistic goal is to have at least a beta version ready for RailsConf 2009 in Las Vegas. Who knows if we’ll make it, but we’ll certainly have made tons of progress on it by then.&lt;/p&gt;


	&lt;p&gt;So all of these changes are pretty much effective immediately. We’ve already started the collaboration and we’ll be rolling out a bunch of public initiatives announcing the concrete elements of the work under the Rails 3 milestone very shortly.&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;No hard feelings, just kumbaja&lt;/b&gt;&lt;br /&gt;
This is quite a dramatic turn of events. We went from testy relations to coming together in not very long at all. But I’ve been incredibly positively surprised at how well everyone on both sides have been gelling behind the scenes. The more we talk, the more we realize that we want the same things. And in the few cases were we do care about something different, it’s usually complimentary.&lt;/p&gt;


	&lt;p&gt;I really hope that everyone within both communities will deal with this news as gracefully as the key contributors from both camps. Let’s just wipe the slate clean on anything that has gone before and cherish that we can now move forward in unity instead of as fractions of the same ideas.&lt;/p&gt;


	&lt;p&gt;Rails 3 is going to kick ass.&lt;/p&gt;


	&lt;p&gt;&lt;i&gt;Also read what &lt;a href="http://yehudakatz.com/2008/12/23/rails-and-merb-merge"&gt;Yehuda wrote about this&lt;/a&gt; and &lt;a href="http://splendificent.com/2008/12/the-merb-rails-merger-announcement-an-inside-opinion/"&gt;Carl Lerche&lt;/a&gt; and &lt;a href="http://brainspl.at/articles/2008/12/23/merb-is-rails"&gt;Ezra&lt;/a&gt; and &lt;a href="http://merbist.com/2008/12/23/rails-and-merb-merge/"&gt;Matt&lt;/a&gt;&lt;/i&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/23/merb-gets-merged-into-rails-3</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-21:24162</id>
    <published>2008-12-21T18:25:00Z</published>
    <updated>2008-12-21T18:29:27Z</updated>
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491550393/mild-refresh-of-rubyonrails-org" rel="alternate" type="text/html" />
    <title>Mild refresh of rubyonrails.org</title>
<content type="html">
            &lt;p&gt;We’ve just launched a mild refresh of the &lt;a href="http://rubyonrails.org"&gt;rubyonrails.org&lt;/a&gt; site. It now runs on &lt;a href="http://radiantcms.org/"&gt;Radiant&lt;/a&gt; through Passenger at &lt;a href="http://www.slicehost.com"&gt;Slicehost&lt;/a&gt; and includes a nip and tuck in various places along with a couple of new pages. Read about &lt;a href="http://rubyonrails.org/deploy"&gt;how we prefer to deploy Rails applications&lt;/a&gt;, &lt;a href="http://rubyonrails.org/ecosystem"&gt;the ecosystem&lt;/a&gt; that has sprung up around Rails, and see the much expanded list of &lt;a href="http://rubyonrails.org/applications"&gt;prolific Rails applications&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/21/mild-refresh-of-rubyonrails-org</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Pratik Naik</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-20:24080</id>
    <published>2008-12-20T00:25:00Z</published>
    <updated>2008-12-20T00:26:28Z</updated>
    <category term="edge" />
    <category term="metal" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542722/performance-of-rails-metal" rel="alternate" type="text/html" />
    <title>Performance of Rails Metal</title>
<content type="html">
            &lt;p&gt;Josh recently added &lt;a href="http://weblog.rubyonrails.org/2008/12/17/introducing-rails-metal"&gt;Rails Metal&lt;/a&gt;, which has been getting a fair bit of publicity. Metal is a great piece of functionality for those rare cases where the speed of your framework actually matters.&lt;/p&gt;


	&lt;p&gt;However, people have been reporting &lt;a href="http://www.infoq.com/news/2008/12/rails-metal"&gt;25x speed increase&lt;/a&gt; over a regular Rails action, and that just doesn’t seem right. So I decided to do some benchmarking of ‘Hello World’ Rails action v/s Metal. Here are my results :&lt;/p&gt;


	&lt;h2&gt;Rails action&lt;/h2&gt;


&lt;pre&gt;&lt;code&gt;Time per request : 1.244 [ms]
Throughput : 800 request/second&lt;/code&gt;&lt;/pre&gt;

	&lt;h2&gt;Metal&lt;/h2&gt;


&lt;pre&gt;&lt;code&gt;Time per request : 0.386 [ms]
Throughput : 3000 request/second&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;i&gt;You can find more details about benchmark command/code at &lt;a href="http://gist.github.com/38080"&gt;http://gist.github.com/38080&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;


	&lt;p&gt;Of course, these are not very scientific benchmarks and your results may vary a little from what you see here. You should also make sure you &lt;strong&gt;run your benchmarks in production mode&lt;/strong&gt;.&lt;/p&gt;


	&lt;p&gt;Now, if you compare these results, 3000 r/s against 800 r/s, you may think you’re seeing a 3x performance increase. However, that’d a wrong perception and throughput isn’t the best metric here.&lt;/p&gt;


	&lt;p&gt;Difference in &lt;strong&gt;Time per request&lt;/strong&gt; is what you should looking at. In my benchmarks, speed increase I get when using Metal is about &lt;strong&gt;1 millisecond&lt;/strong&gt;. And that’s a constant speed increase I’ll get over a regular Rails action. It’s very important to understand that it’s a &lt;strong&gt;constant speed increase&lt;/strong&gt;. It’ll always be 1 ms for me.&lt;/p&gt;


	&lt;p&gt;For example, if my Rails action takes &lt;strong&gt;12ms&lt;/strong&gt;, when I reimplement it all in Metal, it will take about &lt;strong&gt;11 ms&lt;/strong&gt; and not 4 ms.&lt;/p&gt;


	&lt;p&gt;To conclude, I’ll just quote &lt;span class="caps"&gt;DHH&lt;/span&gt; :&lt;/p&gt;


	&lt;blockquote&gt;
		&lt;p&gt;But for those few, specialized cases where you just need as much raw speed as possible, Metal can be exactly what the doctor ordered. It allows you to have the best of both worlds in one package. The lowest possible overhead for a Rack application when that matters and the full-featured goodness of Action Controller when it doesn’t.&lt;/p&gt;
	&lt;/blockquote&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/20/performance-of-rails-metal</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>Mike Gunderloy</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-19:24067</id>
    <published>2008-12-19T13:55:00Z</published>
    <updated>2008-12-19T14:01:51Z</updated>
    <category term="Edge" />
    <category term="edge" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542723/this-week-in-edge-rails" rel="alternate" type="text/html" />
    <title>This Week in Edge Rails</title>
<content type="html">
            &lt;h3&gt;December 13-December 19, 2008 Edition&lt;/h3&gt;


	&lt;p&gt;The Rails team hasn’t been hibernating this week: 50 commits hit the edge branch, from a variety of developers. Here’s my pick of the most interesting and significant new core code for the week.&lt;/p&gt;


	&lt;h2&gt;Rails Metal&lt;/h2&gt;


	&lt;p&gt;If you’ve been keeping in touch with Rails at all, you’ve heard about Metal this week: superfast endpoints inside of your Rails applications that bypass routing and Action Controller to give you raw speed (at the cost of all the things in Action Controller, of course). This builds on all of the recent foundation work to make Rails a Rack application with an exposed middleware stack. Rather than explain Metal in more detail, here are places you can read more about it:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://weblog.rubyonrails.org/2008/12/17/introducing-rails-metal"&gt;Introducing Rails Metal&lt;/a&gt; by &lt;span class="caps"&gt;DHH&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://soylentfoo.jnewland.com/articles/2008/12/16/rails-metal-a-micro-framework-with-the-power-of-rails-m"&gt;Rails Metal: a micro-framework with the power of Rails&lt;/a&gt; by Jesse Newland&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.railsinside.com/deployment/180-metal-super-fast-endpoints-within-your-rails-apps.html"&gt;Metal: Super-fast Endpoints within your Rails Apps&lt;/a&gt; by Peter Cooper&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://ryandaigle.com/articles/2008/12/18/what-s-new-in-edge-rails-rails-metal"&gt;What’s New in Edge Rails: Rails Metal&lt;/a&gt; by Ryan Daigle&lt;/li&gt;
		&lt;li&gt;The comments to the &lt;a href="http://github.com/rails/rails/commit/8c3a54366435eebc2c8aa63b63e1349ce74a7b38#comments"&gt;actual code commit&lt;/a&gt; are illuminating and sometimes contentious as well.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Rack-based Session Stores&lt;/h2&gt;


	&lt;p&gt;A big change pushed the underpinnings of Action Controller session storage down to the Rack level. This involved a good deal of work in the code, though it should be completely transparent to your Rails applications (as a bonus, some icky patches around the old &lt;span class="caps"&gt;CGI&lt;/span&gt; session handler got removed). It’s still significant, though, for one simple reason: non-Rails Rack applications have access to the same session storage handlers (and therefore the same session) as your Rails applications. In addition, sessions are now lazy-loaded (in line with the loading improvements to the rest of the framework). &lt;a href="http://github.com/rails/rails/commit/ed708307137c811d14e5fd2cb4ea550add381a82"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;A related change provides persistent session identifiers for cookie sessions, with &lt;span class="caps"&gt;API&lt;/span&gt; compatibility with the server-side stores. &lt;a href="http://github.com/rails/rails/commit/3ff6b00ee30d0961f57e3c4b64ec8ff0155aaf2d"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;&lt;span class="caps"&gt;MIME&lt;/span&gt; Type Handling&lt;/h2&gt;


	&lt;p&gt;There are a couple of changes to the code for handling &lt;span class="caps"&gt;MIME&lt;/span&gt; types in Rails. First, &lt;code&gt;MIME::Type&lt;/code&gt; now implements the &lt;code&gt;=~&lt;/code&gt; operator, making things much cleaner when you need to check for the presence of a type that has synonyms:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
if content_type &amp;&amp; Mime::JS =~ content_type
  # do something cool
end

Mime::JS =~ "text/javascript"        =&amp;gt; true
Mime::JS =~ "application/javascript" =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;The other change is that the framework now uses the &lt;code&gt;Mime::JS&lt;/code&gt; when checking for javascript in various spots, making it handle those alternatives cleanly. &lt;a href="http://github.com/rails/rails/commit/f36dafa492e3de66e624d81d6860f5f0536de6b0"&gt;commit&lt;/a&gt; &lt;a href="http://github.com/rails/rails/commit/4966076d35d5d9510590d87d90dae8daf79b2069"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;Active Record Cleanup&lt;/h2&gt;


	&lt;p&gt;Even though Active Record has been a core part of Rails basically forever, people are still eking out performance and usability gains here and there. This week saw commits to stop generating some useless queries when working with &lt;code&gt;belongs_to&lt;/code&gt; associations (&lt;a href="http://github.com/rails/rails/commit/707d0dd3e1e8df7771073670e4257d933d2818f9"&gt;commit&lt;/a&gt;), give better error messages on failed &lt;code&gt;find_by_foo!&lt;/code&gt; calls (&lt;a href="http://github.com/rails/rails/commit/428e77bf0fcee4369cb8d94011141f791b8e2ba9"&gt;commit&lt;/a&gt;), fix some association preloading issues (&lt;a href="http://github.com/rails/rails/commit/a9422cc1db9501a80ecf2c25a5d3b0c4f4f32763"&gt;commit&lt;/a&gt; and &lt;a href="http://github.com/rails/rails/commit/c9ab7098be7bdd748c0f4a49c8ef015b4aad3108"&gt;commit&lt;/a&gt;), and improve performance with the MySQL adapter (&lt;a href="http://github.com/rails/rails/commit/8326b95169ae6af3b81f5596107fef9db4bcbbb0"&gt;commit&lt;/a&gt;).&lt;/p&gt;


	&lt;h2&gt;Odds and Ends&lt;/h2&gt;


	&lt;p&gt;Remember the cleanup for noise in the log files that edge got a couple of weeks ago? Building on that, we’ve now got prettier printing for output from any Gem in the backtrace. &lt;a href="http://github.com/rails/rails/commit/f9a02b12d15bdbd3c2ed18b16b31b712a77027bc"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;If you’re on edge, Rails now enforces the requirement for Mocha 0.9.3 or higher, so that you can run the tests. &lt;a href="http://github.com/rails/rails/commit/a392f34fb4069ab847ff631130d023cdaf896735"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;ETag handling has been cleaned up a bit: Rails will now skip sending an ETag header when there’s no body to the response or when sending files with &lt;code&gt;send_file&lt;/code&gt;. &lt;a href="http://github.com/rails/rails/commit/9e2b4a10f7f091868b3c3701efb4c04048455706"&gt;commit&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;If you want to track down who worked on Rails in the past, it’s gotten easier thanks to a huge data collection and patching effort by Xavier Noria: he went through all of the changelogs and normalized author names, so we don’t have the confusing mash of names, handles, and email addresses in there any more. &lt;a href="http://github.com/rails/rails/commit/46c7dd234807b2d24c8c742acb18c633b69e385d"&gt;commit&lt;/a&gt;&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/19/this-week-in-edge-rails</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-17:23973</id>
    <published>2008-12-17T11:08:00Z</published>
    <updated>2008-12-17T17:21:23Z</updated>
    <category term="Documentation" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542724/introducing-rails-metal" rel="alternate" type="text/html" />
    <title>Introducing Rails Metal</title>
<content type="html">
            &lt;p&gt;Rails Edge adopted &lt;a href="http://rack.rubyforge.org/"&gt;Rack&lt;/a&gt; a while back and we’ve been exploring ways to expose that better. The first thing we did was to make it really easy to hook up any piece of Rack middleware in front of a Rails request. In your config/environment.rb file, you can do:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;config.middlewares.use(Rack::Cache, :verbose =&amp;gt; true)&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;This will make your application use &lt;a href="http://tomayko.com/src/rack-cache/"&gt;Ryan Tomayko’s excellent Rack::Cache middleware&lt;/a&gt; for better &lt;span class="caps"&gt;HTTP&lt;/span&gt; caching. There are lots of other great generic, reusable Rack middleware pieces. Do go shopping.&lt;/p&gt;


	&lt;p&gt;But there’s another use case where Rack also comes in handy. If you have a Rails application that has service end points that need to be really, really fast. So fast that the few milliseconds that a trip through the Rails router and Action Controller path is too much.&lt;/p&gt;


	&lt;p&gt;For this scenario, we’ve built a thin wrapper around the generic Rack middleware and given it a place in the hierarchy along with the name “Metal”. Rails Metal is meant for things like the &lt;a href="http://www.campfirenow.com"&gt;Campfire&lt;/a&gt; poller service, which is doing hundreds of requests per second and needs to be really fast and is at the same time really simple (2 database calls and returning a string). This service is currently written in C, but we’ll look into converting it to Rails Metal instead.&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;Rails Metal is a subset of Rack middleware&lt;/b&gt;&lt;br /&gt;
Think of Rails Metal as a subset of middleware intended for application-specific end points that need the extra speed (“write to the metal”, hence the name). Thanks to recent adoption of Rack sessions, these pieces of metal even have access to the same session as Rails. You can either run them as part of the Rails process or run them as individual services through rackup.&lt;/p&gt;


	&lt;p&gt;We’ve even included a generator for Metal, which by default will create a stub ala:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;class Poller
  def self.call(env)
    if env["PATH_INFO"] =~ /^\/poller/
      [200, {"Content-Type" =&amp;gt; "text/html"}, "Hello, World!"]
    else
      [404, {"Content-Type" =&amp;gt; "text/html"}, "Not Found"]
    end
  end
end&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;As you can see, all this does is capture requests to /poller and return “Hello, World!” (and the request is not for /poller, it’ll let the Rails router handle it—that’s what the 404 return does). It will do that just about as fast as is technically possible in Rack (cue useless metric of how Rails now has the fastest, most meaningless “hello world” stat!!).&lt;/p&gt;


	&lt;p&gt;Note that this is a pretty specialized tool. While you could write an entire Rails application using just metal, it would be a terrible idea in most cases. The vast majority of applications out there will never do what they do so fast that the overhead of the already heavily optimized Rails router and Action Controller execution path will matter one bit (pick up &lt;a href="http://2008.parisonrails.org/torrents/ParisOnRails2008-Michael_Koziarski-Rails_performance.mov.torrent"&gt;Michael Koziarski’s talk on Rails Performance&lt;/a&gt; through torrent for more on this).&lt;/p&gt;


	&lt;p&gt;Also, if you’re writing a generic filter in the vein of Rack::Cache, Metal is not the right choice either. You should just be creating regular middleware which can be shared across all Rack applications.&lt;/p&gt;


	&lt;p&gt;But for those few, specialized cases where you just need as much raw speed as possible, Metal can be exactly what the doctor ordered. It allows you to have the best of both worlds in one package. The lowest possible overhead for a Rack application when that matters and the full-featured goodness of Action Controller when it doesn’t.&lt;/p&gt;


	&lt;p&gt;We hope you like this. Josh Peek has putting tireless hours into getting Rails on Rack and this is just the latest product of his efforts. Thanks a bunch, Josh!&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; Jesse Newland wrote up a &lt;a href="http://soylentfoo.jnewland.com/articles/2008/12/16/rails-metal-a-micro-framework-with-the-power-of-rails-m"&gt;great introduction to Metal&lt;/a&gt; as well. It includes benchmarks and even more examples!&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;Update 2:&lt;/b&gt; Changed code example to &lt;a href="http://github.com/rails/rails/commit/61a41154f7d50099da371e0d2f22fd25ab9113c2"&gt;match latest style&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/17/introducing-rails-metal</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-16:23938</id>
    <published>2008-12-16T12:31:00Z</published>
    <updated>2008-12-16T17:37:09Z</updated>
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542725/hosting-ruby-on-rails-with-passenger" rel="alternate" type="text/html" />
    <title>Hosting Ruby on Rails with Passenger</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://www.modrails.com/"&gt;Phusion Passenger aka mod_rails&lt;/a&gt; has been on a tour de force lately and rightfully so. It makes Rails deployment so much simpler and combined with &lt;a href="http://www.rubyenterpriseedition.com/"&gt;&lt;span class="caps"&gt;REE&lt;/span&gt;&lt;/a&gt; faster and with less memory overhead. So I’m really happy to see that lots of the hosting companies in the Rails world are adopting it and making it available to their customers.&lt;/p&gt;


	&lt;p&gt;Rails Machine recently announced that &lt;a href="http://blog.railsmachine.com/2008/12/6/hosting-your-way-passenger"&gt;Passenger is now part of their standard stack&lt;/a&gt; and that they’ve made it silly easy to switch from a Mongrel-based setup to Passenger. The &lt;a href="http://www.joyeur.com/2008/11/05/joyent-accelerator-214-release"&gt;latest Accelerator from Joyent&lt;/a&gt; has Passenger preconfigured as well. At the shared hosting end, &lt;a href="http://blog.dreamhost.com/2008/05/13/passenger-for-ruby-on-rails/"&gt;Dreamhost has been supporting Passenger for a while&lt;/a&gt; (&lt;a href="http://railstips.org/2008/12/14/deploying-rails-on-dreamhost-with-passenger"&gt;nice tutorial using Passenger at Dreamhost&lt;/a&gt;).&lt;/p&gt;


	&lt;p&gt;I’ve personally been setting up Passenger at Slicehost with Ubuntu and having great results with that. At 37signals, we’re already running &lt;a href="http://www.tadalist.com/"&gt;Ta-da List&lt;/a&gt; (on &lt;span class="caps"&gt;EC2&lt;/span&gt;) and &lt;a href="http://www.backpackit.com/"&gt;Backpack&lt;/a&gt; (at Rackspace) on Passenger and plan to move over the rest of the applications shortly. Our system administrators certainly appreciate not having to funk with Mongrels any more.&lt;/p&gt;


	&lt;p&gt;Lots of other hosters are in advanced testing with Passenger as well. Brightbox has been &lt;a href="http://blog.brightbox.co.uk/posts/the-passenger-masterplan"&gt;building Ubuntu packages for Passenger&lt;/a&gt; and is putting one together for &lt;span class="caps"&gt;REE&lt;/span&gt;. They should have complete Passenger support shortly. Most other Rails hosters I’ve talked to are at least looking into it as well.&lt;/p&gt;


	&lt;p&gt;But just because Passenger is a big step forward for Rails hosting, it doesn’t mean that other approaches are suddenly useless. There may still be situations where a traditional proxy/Mongrel setup would be relevant. For example, if you for some reason are unable to use Apache, that’s still the way to go. Rails will continue to support both &lt;span class="caps"&gt;FCGI&lt;/span&gt;, proxy/Mongrel, any Rack web server, and of course Passenger.&lt;/p&gt;


	&lt;p&gt;The change is that if you do not already have an investment in an alternative solution, or if you’re feeling pain with that solution, you should definitely consider Passenger to be the default choice for Rails.&lt;/p&gt;


	&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; Phusion has posted a &lt;a href="http://blog.phusion.nl/2008/12/16/passing-environment-variables-to-ruby-from-phusion-passenger/"&gt;guide to how you control the Rails and Ruby environment variables under Passenger&lt;/a&gt;. Useful for tweaking the GC settings etc.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/16/hosting-ruby-on-rails-with-passenger</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-15:23913</id>
    <published>2008-12-15T13:32:00Z</published>
    <updated>2008-12-15T13:34:46Z</updated>
    <category term="Documentation" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542726/videos-from-paris-on-rails-08" rel="alternate" type="text/html" />
    <title>Videos from Paris on Rails '08</title>
<content type="html">
            &lt;p&gt;I love how so many conferences are recording their sessions. Paris on Rails is another of those conferences and they’ve recently published &lt;a href="http://2008.parisonrails.org/"&gt;their recordings as both video and audio&lt;/a&gt;. Most of these sessions are in French, but Michael Koziarski did a great session on Rails Performance that’s in English and so was my iChat Q&amp;A session.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/15/videos-from-paris-on-rails-08</feedburner:origLink></entry>
  <entry xml:base="http://weblog.rubyonrails.com/">
    <author>
      <name>David</name>
    </author>
    <id>tag:weblog.rubyonrails.com,2008-12-15:23912</id>
    <published>2008-12-15T12:05:00Z</published>
    <updated>2008-12-15T12:07:29Z</updated>
    <category term="Documentation" />
    <link href="http://feeds.feedburner.com/~r/RidingRails/~3/491542727/videos-from-railsconf-europe-08-live" rel="alternate" type="text/html" />
    <title>Videos from RailsConf Europe '08 live</title>
<content type="html">
            &lt;p&gt;Blip.tv have published the five keynote videos from RailsConf Europe 2008. It includes Jeremy’s excellent talk on &lt;a href="http://railsconfeurope.blip.tv/file/1555719/"&gt;Performance on Rails&lt;/a&gt; and my own &lt;a href="http://railsconfeurope.blip.tv/file/1555560/"&gt;Living with Legacy Software&lt;/a&gt;. Check ‘em out.&lt;/p&gt;
          </content>  <feedburner:origLink>http://weblog.rubyonrails.com/2008/12/15/videos-from-railsconf-europe-08-live</feedburner:origLink></entry>
</feed>
