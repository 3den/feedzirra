<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <title>the.railsi.st - Home</title>
  <id>tag:the.railsi.st,2009:mephisto/</id>
  <generator uri="http://mephistoblog.com" version="0.7.3">Mephisto Noh-Varr</generator>
  
  <link href="http://the.railsi.st/" rel="alternate" type="text/html" />
  <updated>2008-06-13T03:07:35Z</updated>
  <link rel="self" href="http://feeds.feedburner.com/therailsist" type="application/atom+xml" /><entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2008-06-13:974</id>
    <published>2008-06-13T03:06:00Z</published>
    <updated>2008-06-13T03:07:35Z</updated>
    <link href="http://the.railsi.st/2008/6/13/sass-version-of-eric-meyers-reset" rel="alternate" type="text/html" />
    <title>Sass version of Eric Meyer's Reset</title>
<content type="html">
            &lt;p&gt;Here’s a Sass version of &lt;a href="http://meyerweb.com/eric/thoughts/2008/01/15/resetting-again/"&gt;Eric Meyer’s &lt;span class="caps"&gt;CSS&lt;/span&gt; reset&lt;/a&gt; (the “Resetting Again” version).&lt;/p&gt;


&lt;pre&gt;&lt;code class="ruby"&gt;// Reset

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, font, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td
  :margin 0
  :padding 0
  :border 0
  :outline 0
  :font-size 100%
  :vertical-align baseline
  :background transparent

body
  :line-height 1

ol, ul
  :list-style none

blockquote, q
  :quotes none

// remember to define focus styles!
\:focus 
  :outline 0

// remember to highlight inserts somehow!
ins
  :text-decoration none

del
  :text-decoration line-through

// tables still need 'cellspacing=&amp;quot;0&amp;quot;' in the markup
table
  :border-collapse collapse
  :border-spacing 0&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Just drop this into the top of your application.sass file, and you’re good to go!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2008-03-26:475</id>
    <published>2008-03-26T00:35:00Z</published>
    <updated>2008-03-26T00:36:01Z</updated>
    <link href="http://the.railsi.st/2008/3/26/helper-for-converting-links-into-markdown" rel="alternate" type="text/html" />
    <title>Helper for converting links into Markdown</title>
<content type="html">
            &lt;p&gt;I’m working on importing lots of legacy content into Rails, so I came up with this little method to convert old-school link formats (like &lt;a href="http://en.wikipedia.org/wiki/BBCode"&gt;BBCode&lt;/a&gt; and &lt;span class="caps"&gt;HTML&lt;/span&gt;) into &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;.&lt;/p&gt;


&lt;pre&gt;&lt;code class="ruby"&gt;def convert_links_to_markdown(text)
  # [url=http://google.com]Google[/url]
  text = text.gsub(/(\[url\=)(.*?)(\])(.*?)(\[\/url\])/, ('[\4](\2)'))

  # &amp;lt;a href=&amp;quot;http://google.com&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt;
  text = text.gsub(/(&amp;lt;a href=&amp;quot;)(.*?)(&amp;quot;&amp;gt;)(.*?)(&amp;lt;\/a&amp;gt;)/, ('[\4](\2)'))
end&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Here’s a &lt;a href="http://pastie.caboo.se/170623"&gt;Pastie version&lt;/a&gt;, as well. (Special thanks to &lt;a href="http://railsontherun.com/"&gt;Matt Aimonetti&lt;/a&gt; for fixing a bug in the Regexp.)&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-11-27:148</id>
    <published>2007-11-27T20:33:00Z</published>
    <updated>2008-03-26T00:20:41Z</updated>
    <link href="http://the.railsi.st/2007/11/27/roll-your-own-attachment_fu-validations" rel="alternate" type="text/html" />
    <title>Roll your own attachment_fu validations</title>
<content type="html">
            &lt;p&gt;Lots of folks use attachment_fu to handle image uploads. It handles all the dirty work of uploading files, integrates with Amazon S3, and even supports all the different image libraries.&lt;/p&gt;


	&lt;p&gt;Which is awesome… but it kinda sucks at validating files. Take a pretty typical Photo class:&lt;/p&gt;


&lt;pre&gt;&lt;code class="ruby"&gt;class Photo &amp;lt; ActiveRecord::Base
  has_attachment :content_type =&amp;gt; :image, 
                 :storage =&amp;gt; :file_system, 
                 :max_size =&amp;gt; 5.megabytes,
                 :resize_to =&amp;gt; '320x200&amp;gt;',
                 :thumbnails =&amp;gt; { :thumb =&amp;gt; '100x100&amp;gt;', :widget =&amp;gt; &amp;quot;262x262&amp;gt;&amp;quot; },
                 :processor =&amp;gt; MiniMagick
  validates_as_attachment

end&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;What happens when you forget to select a file before uploading?&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;Content type can’t be blank&lt;/li&gt;
&lt;li&gt;Content type is not included in the list&lt;/li&gt;
&lt;li&gt;Size can’t be blank&lt;/li&gt;
&lt;li&gt;Size is not included in the list&lt;/li&gt;
&lt;li&gt;Filename can’t be blank&lt;/li&gt;
&lt;/ul&gt;

	&lt;p&gt;So, let’s try uploading a Word document:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;Content type is not included in the list&lt;/li&gt;
&lt;/ul&gt;

	&lt;p&gt;Or a file that’s too big:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;Size is not included in the list&lt;/li&gt;
&lt;/ul&gt;

	&lt;p&gt;Let’s try it again, but in English:&lt;/p&gt;


&lt;pre&gt;&lt;code class="ruby"&gt;class Photo &amp;lt; ActiveRecord::Base
  has_attachment :content_type =&amp;gt; :image, 
                 :storage =&amp;gt; :file_system, 
                 :max_size =&amp;gt; 5.megabytes,
                 :resize_to =&amp;gt; '320x200&amp;gt;',
                 :thumbnails =&amp;gt; { :thumb =&amp;gt; '100x100&amp;gt;', :widget =&amp;gt; &amp;quot;262x262&amp;gt;&amp;quot; },
                 :processor =&amp;gt; MiniMagick

  def validate
    errors.add_to_base(&amp;quot;You must choose a file to upload&amp;quot;) unless self.filename

    unless self.filename == nil

      # Images should only be GIF, JPEG, or PNG
      [:content_type].each do |attr_name|
        enum = attachment_options[attr_name]
        unless enum.nil? || enum.include?(send(attr_name))
          errors.add_to_base(&amp;quot;You can only upload images (GIF, JPEG, or PNG)&amp;quot;)
        end
      end

      # Images should be less than 5 MB
      [:size].each do |attr_name|
        enum = attachment_options[attr_name]
        unless enum.nil? || enum.include?(send(attr_name))
          errors.add_to_base(&amp;quot;Images should be smaller than 5 MB in size&amp;quot;)
        end
      end

    end
  end

end&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;To get started, let’s drop the &lt;code&gt;validates_as_attachment&lt;/code&gt; method. Or, more specifically, try extracting its useful parts into something more useful.&lt;/p&gt;


	&lt;p&gt;Since we’re dropping attachment_fu’s validations, we need to roll our own validations for the Photo class. You can do this by declaring a &lt;code&gt;validate&lt;/code&gt; method in your class, and adding appropriate logic.&lt;/p&gt;


	&lt;p&gt;We can also use &lt;code&gt;errors.add_to_base&lt;/code&gt; to get total control over your validation messages. By default, Rails pair the model attribute name with an error message (“person” + “is missing an ear”), but sometimes this can lead to awkward phrases (“person is empty”).&lt;/p&gt;


	&lt;p&gt;You’ll need to custom this for your application, of course, but this post should give you some examples.&lt;/p&gt;


	&lt;p&gt;(I’m planning to follow this blog post up with a series of posts about improving validation messages.)&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-11-20:129</id>
    <published>2007-11-20T20:52:00Z</published>
    <updated>2007-11-20T20:55:12Z</updated>
    <link href="http://the.railsi.st/2007/11/20/new-talk-haml-and-sass-in-15-minutes" rel="alternate" type="text/html" />
    <title>New talk: Haml and Sass in 15 minutes</title>
<content type="html">
            &lt;p&gt;SD Ruby just posted &lt;a href="http://podcast.sdruby.com/2007/11/20/episode-038-haml-and-sass-in-15-minutes"&gt;my talk on Haml and Sass&lt;/a&gt; (given at this month’s meeting).&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://haml.hamptoncatlin.com/docs/haml"&gt;Haml&lt;/a&gt; is a drop-in replacement for embedded ruby templates that has really helped me tame wild and crazy view code (especially on bigger apps). &lt;a href="http://haml.hamptoncatlin.com/docs/sass"&gt;Sass&lt;/a&gt; is sorta like Haml’s kid brother. It transforms your &lt;span class="caps"&gt;CSS&lt;/span&gt; into something that feels more like Ruby. Cleaner syntax, dynamic variables and logic, auto-nesting. All good stuff.&lt;/p&gt;


	&lt;p&gt;If you’ve been on the fence about Haml, check out this talk.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-11-15:128</id>
    <published>2007-11-15T20:59:00Z</published>
    <updated>2007-11-15T23:10:54Z</updated>
    <link href="http://the.railsi.st/2007/11/15/how-to-use-haml-with-actionmailer" rel="alternate" type="text/html" />
    <title>How to use Haml with ActionMailer</title>
<content type="html">
            &lt;p&gt;Poor ActionMailer. It just doesn't get enough love.&lt;/p&gt;

&lt;p&gt;If you try using &lt;a href="http://haml.hamptoncatlin.com/"&gt;Haml&lt;/a&gt; in your email templates, Rails will ignore your pretty little Haml code.&lt;/p&gt;

&lt;p&gt;Why does this happen? Because, by default, ActionMailer only recognizes .erb or .rhtml extensions with templates that use a specific mime type (example: &lt;code&gt;forgot_password.text.html.erb&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But thanks to &lt;a href="http://dev.rubyonrails.org/ticket/7534"&gt;changest 7534&lt;/a&gt;, ActionMailer can now use Haml too.&lt;/p&gt;

&lt;p&gt;Just drop this into your environment.rb and restart:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;ActionMailer::Base.register_template_extension('haml')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should work on Rails 1.2.4 and up.&lt;/p&gt;

&lt;h2&gt;Extra credit&lt;/h2&gt;

&lt;p&gt;Don't use HTML email unless you really need it. You'll upset users and go crazy trying to make things work in a hundred email clients. Stick to text unless HTML can really add substantial value to your notifications.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-11-14:121</id>
    <published>2007-11-14T18:11:00Z</published>
    <updated>2007-11-14T18:12:41Z</updated>
    <link href="http://the.railsi.st/2007/11/14/new-sd-ruby-podcast-episodes" rel="alternate" type="text/html" />
    <title>New SD Ruby podcast episodes</title>
<content type="html">
            &lt;p&gt;In case you don't subscribe to the &lt;a href="http://podcast.sdruby.com/"&gt;SD Ruby podcast&lt;/a&gt;, we just uploaded a huge batch of fresh episodes.&lt;/p&gt;

&lt;p&gt;We've got talks on &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-026-acts-as-solr"&gt;ActsAsSolr&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-033-life-on-edge"&gt;Edge Rails&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-031-seaside"&gt;Seaside&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-035-activerecord-backup-mimetypefu"&gt;ActiveRecord Backup &amp;amp; Mimetypefu&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-034-intro-to-jruby"&gt;JRuby&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-025-ajax-css-star-rating-with-actsasrateable"&gt;AJAX CSS stars&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-024-using-ruby-amazon-sqs-to-build-backdoors"&gt;Amazon SQS&lt;/a&gt;, &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-032-capistrano"&gt;Capistrano&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;There's also a 20 minute talk on &lt;a href="http://podcast.sdruby.com/2007/11/2/episode-027-headliner-and-styler"&gt;Headliner and Styler&lt;/a&gt; that I gave back in May.&lt;/p&gt;

&lt;p&gt;(Sydney RORO members can skip this one... this is the same talk I did in Australia.)&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-09-28:94</id>
    <published>2007-09-28T01:08:00Z</published>
    <updated>2007-09-28T01:19:06Z</updated>
    <link href="http://the.railsi.st/2007/9/28/helper-for-generating-technorati-tags" rel="alternate" type="text/html" />
    <title>Helper for generating Technorati tags</title>
<content type="html">
            &lt;p&gt;Need to support &lt;a href="http://technorati.com/help/tags.html"&gt;Technorati tags&lt;/a&gt; in your application?&lt;/p&gt;

&lt;p&gt;Here's a helper that does all the work. Just give it a list of tags and the helper will spit out all the necessary html for Technorati to index your content. (When you deploy, don't forget to &lt;a href="http://technorati.com/ping/"&gt;ping them&lt;/a&gt; so they index you.)&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def technorati_tags_for(model)
  tag_links = Array.new
  model.tags.split(',').sort.each do |tag|
  tag_links &amp;lt;&amp;lt; '&amp;lt;a href=&amp;quot;http://technorati.com/tag/' + 
                tag.split(&amp;quot; &amp;quot;).join(&amp;quot;+&amp;quot;) + '&amp;quot; rel=&amp;quot;tag&amp;quot;&amp;gt;' + 
                tag + '&amp;lt;/a&amp;gt;'
  end
  tag_links.join(&amp;quot;\n&amp;quot;)
end&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;Your tags are comma delimited and stored in a model attribute called &lt;code&gt;tags&lt;/code&gt;. (This helper should be placed on each individual blog post... typically the &lt;code&gt;"show"&lt;/code&gt; action.)&lt;/p&gt;

&lt;h2&gt;Extra credit&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you have a tag cloud, replace &lt;code&gt;http://technorati.com/tag/&lt;/code&gt; with the path to your local tag pages.&lt;/li&gt;
&lt;li&gt;Don't need to show the tags? Wrap them in a div that's styled with &lt;code&gt;display: none;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Think about automatically adding a default set of tags to each post. If, for instance your blog was 100% about Rails, add tags for "rails" and "ruby on rails". You can add these in the helper without cluttering up your database or admin interface with redundant information.&lt;/li&gt;
&lt;/ul&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-08-22:62</id>
    <published>2007-08-22T00:21:00Z</published>
    <updated>2007-08-22T00:21:34Z</updated>
    <link href="http://the.railsi.st/2007/8/22/javascripter-organize-your-javascript" rel="alternate" type="text/html" />
    <title>Javascripter: Organize your javascript</title>
<content type="html">
            &lt;p&gt;Just like &lt;a href="http://the.railsi.st/2007/5/3/styler-stylesheets-made-easy"&gt;Styler&lt;/a&gt;, you can use Javascripter to keep javascript organized in your application.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use Javascripter, replace your &lt;code&gt;javascript_include_tags&lt;/code&gt; with a single tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;the.rails.ist&amp;lt;/title&amp;gt;
&amp;lt;%= javascripts %&amp;gt;
&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you do, your javascripts will be included automatically, using the conventions below.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;the.rails.ist&amp;lt;/title&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/application.js?1183566571&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Organize your javascripts&lt;/h2&gt;

&lt;p&gt;Javascripter uses a simple set of conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Javascript for your entire application should be stored in application.js&lt;/li&gt;
&lt;li&gt;Javascript for specific controllers should be stored in controller.js&lt;/li&gt;
&lt;li&gt;Javascript for specific actions should be stored in controller_action.js&lt;/li&gt;
&lt;li&gt;Javascript for specific actions should be stored in controller/action.js (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow these conventions and Javascripter will reward you with automagic goodness, loading javascripts for specific controllers or actions whenever they are active.&lt;/p&gt;

&lt;h2&gt;Support for :defaults&lt;/h2&gt;

&lt;p&gt;Need Prototype? Just use the :defaults parameter, like normal.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;the.rails.ist&amp;lt;/title&amp;gt;
&amp;lt;%= javascripts :defaults %&amp;gt;
&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you'll get this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;the.rails.ist&amp;lt;/title&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/prototype.js?1187404678&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/effects.js?1187404678&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/dragdrop.js?1187404678&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/controls.js?1187404678&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/javascripts/application.js?1187404678&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Include additional javascripts&lt;/h2&gt;

&lt;p&gt;Need to include extra javascript libraries? Use the :include parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;%= javascripts :include =&amp;gt; &amp;quot;lowpro&amp;quot; %&amp;gt;
&amp;lt;%= javascripts :include =&amp;gt; [&amp;quot;lowpro&amp;quot;, &amp;quot;lightbox&amp;quot;] %&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Generator&lt;/h2&gt;

&lt;p&gt;Javascripter also includes a generator that will create a default application.js 
script and separate javascript files for each controller in your application.&lt;/p&gt;

&lt;p&gt;To use the generator, run this command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;script/generate javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you add a new controller, just run the generator again and a new javascript
for the controller will be created. (Existing javascripts will be ignored.)&lt;/p&gt;

&lt;h2&gt;Credits&lt;/h2&gt;

&lt;p&gt;Special thanks to &lt;a href="http://blog.smartbomb.com.au"&gt;Lachie Cox&lt;/a&gt; and the rest of my &lt;a href="http://rubyonrails.com.au/sydney-meetups"&gt;RORO Sydney&lt;/a&gt; comrades who asked for this plugin.&lt;/p&gt;

&lt;h2&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;script/plugin install http://the.railsi.st/svn/repo/plugins/javascripter/&lt;/code&gt;&lt;/pre&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-08-21:57</id>
    <published>2007-08-21T01:55:00Z</published>
    <updated>2007-09-10T02:21:19Z</updated>
    <link href="http://the.railsi.st/2007/8/21/how-to-customize-attachment_fu-file-names" rel="alternate" type="text/html" />
    <title>How to customize attachment_fu file names</title>
<content type="html">
            &lt;p&gt;For uploading files, it's pretty hard to beat &lt;a href="http://svn.techno-weenie.net/projects/plugins/attachment_fu/"&gt;attachment_fu&lt;/a&gt;. But it can be overkill for smaller projects.&lt;/p&gt;

&lt;p&gt;One issue is that attachment_fu uses id partioning. This is a great way to overcome native file system limitations when you have more than 32,000 attachments. By segmenting files into different directories, you can have millions of attachments, if necessary. Empahsis on "if necessary". It usually isn't.&lt;/p&gt;

&lt;p&gt;Also, attachment_fu preserves original filenames. While this make sense for many projects, sometimes you need to have control over the naming of attachments.&lt;/p&gt;

&lt;p&gt;Since a lot of people use Mike Clark's excellent &lt;a href="http://clarkware.com/cgi/blosxom/2007/02/24"&gt;File Upload Fu tutorial&lt;/a&gt;, let's use that as our starting point for customizing file names.&lt;/p&gt;

&lt;p&gt;If we complete the tutorial, here's how attachment_fu will store our first image upload:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;public/mugshots/0000/0001/chunkybacon.png
public/mugshots/0000/0001/chunkybacon_thumb.png&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmmm, not bad. But I'd like to customize things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Images should be stored in &lt;code&gt;public/images/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Thumbnails should be organized by size&lt;/li&gt;
&lt;li&gt;ID partioning (&lt;code&gt;0000/0001/&lt;/code&gt;) should be disabled&lt;/li&gt;
&lt;li&gt;Images should be renamed with the Mugshot id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's open up our Mugshot model and tweak it a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Mugshot &amp;lt; ActiveRecord::Base
  has_attachment :content_type =&amp;gt; :image,
                 :storage =&amp;gt; :file_system,
                 :max_size =&amp;gt; 500.kilobytes,
                 :resize_to =&amp;gt; '320x200&amp;gt;',
                 :thumbnails =&amp;gt; { :thumb =&amp;gt; '100x100&amp;gt;' },
                 :path_prefix =&amp;gt; 'public/images/mugshots'
  validates_as_attachment

  def full_filename(thumbnail = nil)
    file_system_path = (thumbnail ? thumbnail_class : self).attachment_options[:path_prefix]
    case self.thumbnail
    when &amp;quot;thumb&amp;quot;
      File.join(RAILS_ROOT, file_system_path, 'thumb', thumbnail_name_for(thumbnail, self.parent_id))
    else
      File.join(RAILS_ROOT, file_system_path, 'fullsize', thumbnail_name_for(thumbnail, self.id))
    end
  end

  def thumbnail_name_for(thumbnail = nil, asset = nil)
    extension = filename.scan(/\.\w+$/)
    return &amp;quot;#{asset}#{extension}&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we upload an image, it will be stored like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;public/images/mugshots/fullsize/2.png
public/images/mugshots/thumb/2.png&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How does this work?&lt;/p&gt;

&lt;p&gt;Well, first, we customize the &lt;code&gt;:path_prefix&lt;/code&gt; value in &lt;code&gt; has_attachment&lt;/code&gt; to set the base location of our files.&lt;/p&gt;

&lt;p&gt;Second, we override the &lt;code&gt;full_filename&lt;/code&gt; method to force attachment_fu to save each thumbnail type into its own directory. This way, all large thumbnails are stored in &lt;code&gt;images/mugshots/fullsize&lt;/code&gt; and all small thumbnails are stored in &lt;code&gt;images/mugshots/thumb&lt;/code&gt;. (By default, attachment_fu stores all thumbnail sizes for an object in a single directory.)&lt;/p&gt;

&lt;p&gt;Lastly, we override the &lt;code&gt;thumbnail_name_for&lt;/code&gt; method to customize the filename to our liking... in this case, the file name will consist of the parent mugshot id, plus the original file's file extension.&lt;/p&gt;

&lt;p&gt;That's all we need to do... now our files are stored exactly where we want them!&lt;/p&gt;

&lt;p&gt;(Thanks to AirBlade Software for &lt;a href="http://blog.airbladesoftware.com/2007/6/20/how-to-store-thumbnails-and-full-size-images-in-different-directories-with-attachment_fu"&gt;showing the way&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;Extra credit&lt;/h2&gt;

&lt;p&gt;If your attachments belong to another model (like a user), you'll need to use a before filter to associate the parent model id with the thumbnail you wish to store.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;before_thumbnail_saved do |record, thumbnail|
  thumbnail.user_id = record.user_id
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll also need an extra migration to store the parent id. (Don't use the parent_id field... that's reserved by attachment_fu.)&lt;/p&gt;

&lt;h2&gt;Extra, extra credit&lt;/h2&gt;

&lt;p&gt;What if you want three sizes? Large (original image), medium, and small?&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;has_attachment :content_type =&amp;gt; :image,
               :storage =&amp;gt; :file_system,
               :max_size =&amp;gt; 500.kilobytes,
               :thumbnails =&amp;gt; { :small =&amp;gt; '100x100&amp;gt;', :medium =&amp;gt; '200x200&amp;gt;' },
               :path_prefix =&amp;gt; 'public/images/mugshots'
validates_as_attachment

def full_filename(thumbnail = nil)
  file_system_path = (thumbnail ? thumbnail_class : self).attachment_options[:path_prefix]
  case self.thumbnail
  when &amp;quot;small&amp;quot;
    File.join(RAILS_ROOT, file_system_path, 'small', thumbnail_name_for(thumbnail, self.parent_id))
  when &amp;quot;medium&amp;quot;
    File.join(RAILS_ROOT, file_system_path, 'medium', thumbnail_name_for(thumbnail, self.parent_id))
  else
    File.join(RAILS_ROOT, file_system_path, 'large', thumbnail_name_for(thumbnail, self.id))
  end
end&lt;/code&gt;&lt;/pre&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-08-20:56</id>
    <published>2007-08-20T02:53:00Z</published>
    <updated>2007-08-20T02:53:57Z</updated>
    <link href="http://the.railsi.st/2007/8/20/problems-installing-restful-auth" rel="alternate" type="text/html" />
    <title>Problems installing restful_auth?</title>
<content type="html">
            &lt;p&gt;When installing &lt;code&gt;restful_authentication&lt;/code&gt;, you run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;patrick$: script/generate authenticated user sessions --include-activation&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And get this error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;invalid option: --include-activation&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What's wrong with this picture? Remove &lt;code&gt;acts_as_authenticated&lt;/code&gt;. You can't use both plugins at the same time.&lt;/p&gt;

&lt;p&gt;Dumb, but I'm sure I won't be the only one.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-08-16:59</id>
    <published>2007-08-16T00:56:00Z</published>
    <updated>2007-08-16T00:58:55Z</updated>
    <link href="http://the.railsi.st/2007/8/16/headliner-and-styler-talk" rel="alternate" type="text/html" />
    <title>Headliner and Styler talk</title>
<content type="html">
            &lt;p&gt;As you might know, I've been over in Australia this summer... so I've been hanging with the &lt;a href="http://rubyonrails.com.au"&gt;Sydney Rails group&lt;/a&gt;. (More about that later.)&lt;/p&gt;

&lt;p&gt;At their July meeting, I gave a talk on Headliner and Styler:&lt;/p&gt;

&lt;p&gt;&amp;lt;object id="viddler" height="370" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="437"&gt;&amp;lt;param name="movie" value="http://www.viddler.com/player/60686700/" /&gt;&amp;lt;param name="allowScriptAccess" value="always" /&gt;&amp;lt;param name="allowFullScreen" value="true" /&gt;&amp;lt;embed name="viddler" allowfullscreen="true" type="application/x-shockwave-flash" src="http://www.viddler.com/player/60686700/" allowscriptaccess="always" height="370" width="437"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-07-16:40</id>
    <published>2007-07-16T07:46:00Z</published>
    <updated>2007-08-21T08:46:04Z</updated>
    <link href="http://the.railsi.st/2007/7/16/headliner-bug-fix" rel="alternate" type="text/html" />
    <title>Headliner bug fix</title>
<content type="html">
            &lt;p&gt;Thanks to Jason Perry and Richard Crowley for catching a bug in the last Headliner update.&lt;/p&gt;

&lt;p&gt;I'm hoping to put together tests for Headliner (and Styler) soon, so releases can be more reliable in the future, especially for people who are using svn externals.&lt;/p&gt;

&lt;p&gt;Anyways, the bug is fixed, so I highly recommend updating now.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-07-15:36</id>
    <published>2007-07-15T01:13:00Z</published>
    <updated>2007-08-21T08:45:17Z</updated>
    <link href="http://the.railsi.st/2007/7/15/styler-adds-support-for-nested-stylesheets" rel="alternate" type="text/html" />
    <title>Styler adds support for nested stylesheets</title>
<content type="html">
            &lt;p&gt;What happens when you have a really big application? You wind up with a ton of stylesheets in &lt;code&gt;public/stylesheets&lt;/code&gt;. It can get messy.&lt;/p&gt;

&lt;p&gt;That's why Styler now supports &lt;em&gt;nested&lt;/em&gt; stylesheet directories.&lt;/p&gt;

&lt;p&gt;To use this feature, just create subdirectories in &lt;code&gt;public/stylesheets&lt;/code&gt; for each of your controllers, and then add stylesheets for individual actions you wish to style.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Styles for an entire controller should be stored in &lt;code&gt;controller.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Styles for specific actions should be stored in &lt;code&gt;controller/action.css&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also... there's no configuration required, and you can use flat and nested stylesheets at the same time.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-05-25:9</id>
    <published>2007-05-25T05:16:00Z</published>
    <updated>2007-08-21T08:44:16Z</updated>
    <link href="http://the.railsi.st/2007/5/25/dont-use-finders-with-validation-helpers" rel="alternate" type="text/html" />
    <title>Don’t use finders with validation helpers</title>
<content type="html">
            &lt;p&gt;Rather innocently, I tried using this validation on my Category model.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;validates_exclusion_of :name,
                       :within =&amp;gt; Widget.find(:all).collect(&amp;amp;:name), 
                       :message =&amp;gt; &amp;quot;used by a widget&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea behind this validation was to make sure a Category doesn't have the same name as a Widget.&lt;/p&gt;

&lt;p&gt;But since validations are class methods, they get loaded whenever you access a model. So that means we get an extra SQL query &amp;lt;u&gt;every time&amp;lt;/u&gt; we do anything with our Category class, not just on create or update.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sql"&gt;User Load (0.001142)   SELECT * FROM widgets LIMIT 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might not seem like a big deal, but it's always good practice to keep database calls to a minimum.&lt;/p&gt;

&lt;p&gt;So what's the workaround? Use a protected &lt;code&gt;#validate&lt;/code&gt; method instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def validate
  errors.add(:name, &amp;quot;used by a widget&amp;quot;) if Widget.find_by_name(self.name)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the same validation, but without all the extra SQL love.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://the.railsi.st/">
    <author>
      <name>patrick</name>
    </author>
    <id>tag:the.railsi.st,2007-05-23:8</id>
    <published>2007-05-23T21:04:00Z</published>
    <updated>2007-08-21T08:42:31Z</updated>
    <link href="http://the.railsi.st/2007/5/23/railsconf-2007" rel="alternate" type="text/html" />
    <title>RailsConf 2007</title>
<content type="html">
            &lt;p&gt;Well, once again, RailsConf did not disappoint.&lt;/p&gt;

&lt;p&gt;Portland kicked ass. Three times more attendees. Actual exhibitors. Great keynotes from Chad Fowler and Dave Thomas. Chris Wanstrath's talk on memecached. Watching a pack of swinging seniors overtake the SD Ruby meetup. Exploring downtown Portland. Printing business cards at Kinkos. Late night meals at Denny's. Happy hour with the Joyent folk. Meeting Ze Frank in person. And hacking out at RejectConf.&lt;/p&gt;

&lt;p&gt;But the best part was just meeting all you Ruby folk.&lt;/p&gt;
          </content>  </entry>
</feed>
