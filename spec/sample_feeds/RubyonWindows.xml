<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-284600789737488130</id><updated>2009-01-21T09:48:09.478-05:00</updated><title type='text'>Ruby on Windows</title><subtitle type='html'>On using the Ruby programming language on the Microsoft Windows platform</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>84</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-4467054225380537280</id><published>2009-01-21T08:32:00.008-05:00</published><updated>2009-01-21T09:12:48.666-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2009-01-21T09:12:48.666-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='commentary'/><title type='text'>Amen, Brother</title><content type='html'>In an article entitled "&lt;a href="http://akitaonrails.com/2009/1/13/the-best-environment-for-rails-on-windows" target="_blank"&gt;The Best Environment for Rails on Windows&lt;/a&gt;", Fabio Akita writes:&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;The same goes for Windows: some Railers would say that you need to give up on Windows completely and simply go to Ubuntu or Mac OS X. I know for a fact that there are lots of people simply unable to do just that. And “give up their jobs” – as some kindly suggest – is not an option. Some of the people that are starting Rails in closed-minded companies are exactly the seeds those companies need to start to change their minds and every time we, Railers, tell them to just move to another job, we are killing a precious opportunity to introduce Rails to those companies.&lt;/blockquote&gt;&lt;br /&gt;In a followup comment to a &lt;a href="http://www.railsinside.com/tutorials/210-setting-up-a-rails-development-environment-on-windows.html" target="_blank"&gt;post on Rails Inside&lt;/a&gt;, Fabio adds:&lt;br /&gt;&lt;blockquote&gt;Please keep this in mind: there are several circumstances that keep people locked to Windows. Specially if this person works for a closed minded company that won't allow him to use Ubuntu. The instant you tell this person "give up, Ruby is unable to be used under Windows", you lose the single person that could actually bootstrap Ruby adoption inside this company. People have to start somewhere and sometimes Windows is this way. So let's help them get started and one of three things will happen: 1) he will be super happy and will evangelize Ruby to his peers, leading to mass adoption on this company; 2) he will lose hope on his employer and will try to find another job; 3) he will simply give up and none of us lose nothing.&lt;/blockquote&gt;&lt;br /&gt;You should read Fabio's article and the comments at both links above; even if, like me, you don't use Rails as much as you use Ruby itself.&lt;br /&gt;&lt;br /&gt;It's very easy (and very fashionable -- all the cool kids do it!) for the Mac OS and Linux crowds to take shots at the Windows developers.  And I tip my hat to those that actually changed jobs just so that they could avoid working with Windows.  Good for you.&lt;br /&gt;&lt;br /&gt;But some of us actually &lt;span style="font-style:italic;"&gt;like&lt;/span&gt; our jobs and our companies, despite having to work with -- Gasp! Cover the children's ears, Mother! -- Windows.  Besides, as Marcos Ricardo commented on Fabio's site, "We can never throw way 90% of market share."</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/4467054225380537280/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=4467054225380537280' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/4467054225380537280?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/4467054225380537280'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2009/01/amen-brother.html' title='Amen, Brother'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-5335857335595501232</id><published>2008-11-30T12:00:00.002-05:00</published><updated>2008-11-30T12:06:44.040-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-11-30T12:06:44.040-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='word'/><category scheme='http://www.blogger.com/atom/ns#' term='win32ole'/><title type='text'>Automating Word with Ruby: Adding Bookmarks</title><content type='html'>Someone recently asked a question about using Ruby to add bookmarks to a Microsoft Word document.  Here's a brief, but hopefully helpful, explanation...&lt;br /&gt;&lt;br /&gt;Word's &lt;a href="http://rubyonwindows.blogspot.com/2007/04/automating-word-with-ruby-document.html"&gt;Document object&lt;/a&gt; includes a &lt;span style="font-style:italic;"&gt;Bookmarks&lt;/span&gt; collection.  To get a reference to this collection, call the &lt;span style="font-style:italic;"&gt;Bookmarks()&lt;/span&gt; method on the Document object:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;word = WIN32OLE.connect('Word.Application')&lt;br /&gt;doc = word.ActiveDocument&lt;br /&gt;bookmarks = doc.Bookmarks()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To create a new bookmark, call the &lt;span style="font-style:italic;"&gt;Add()&lt;/span&gt; method on the Bookmarks collection, passing it (1) a one-word name for the new bookmark, and (2) the range to be bookmarked.  The following line of code adds a new bookmark, cleverly named 'Bookmark1', for the currently selected text:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;bookmarks.Add('Bookmark1', word.Selection)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The Bookmarks collection includes (among others) a &lt;span style="font-style:italic;"&gt;Count()&lt;/span&gt; method for getting the number of items in the collection, and an &lt;span style="font-style:italic;"&gt;Exists()&lt;/span&gt; method for determining if a bookmark with that name already exists.  So the following code prints the number of bookmarks, then adds a bookmark if it doesn't already exist, then prints the number of bookmarks again:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;puts(doc.Bookmarks.Count)&lt;br /&gt;if not doc.Bookmarks.Exists('Bookmark1')&lt;br /&gt;    doc.Bookmarks.Add('Bookmark1', word.Selection)&lt;br /&gt;end&lt;br /&gt;puts(doc.Bookmarks.Count)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To get a reference to an individual Bookmark, call the &lt;span style="font-style:italic;"&gt;Bookmarks()&lt;/span&gt; method and pass it the name of the bookmark:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;bookmark1 = doc.Bookmarks('Bookmark1')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To delete an individual Bookmark, call its &lt;span style="font-style:italic;"&gt;Delete()&lt;/span&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.Bookmarks('Bookmark1').Delete&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There you have it.  Let me know if you have questions or comments.  And, of course, there'll be more on this topic (and many others) in the book I'm currently working on.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/5335857335595501232/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=5335857335595501232' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/5335857335595501232?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/5335857335595501232'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/11/automating-word-with-ruby-adding.html' title='Automating Word with Ruby: Adding Bookmarks'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-5369401288858379331</id><published>2008-09-27T13:18:00.002-05:00</published><updated>2008-09-27T13:35:09.552-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-09-27T13:35:09.552-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='books'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Scripted GUI Testing with Ruby</title><content type='html'>Anyone who reads this blog knows that I love Ruby, and I love Automation.&lt;br /&gt;&lt;br /&gt;Ian Dees is wise enough to realize that automation is not the Ultimate Solution to Everything, pointing out that "some domains are better suited than others for automation". "So," he asks, "why not let the computers and people each do what they're good at?" To that end, he offers his new book "&lt;a href="http://www.amazon.com/gp/product/1934356182" target="_blank"&gt;Scripted GUI Testing with Ruby&lt;/a&gt;", a book for testers who code and coders who test -- and maybe for others, as well. &lt;br /&gt;&lt;br /&gt;As the title implies, test scripts are written in the Ruby language -- and its Java implementation, JRuby -- and the author assumes that readers will have some experience with Ruby. If you've written and run a few Ruby scripts, you'll be fine. Ian doesn't require you to be a black-belt Rubyist to understand what's going on here, and his humor helps keep it interesting.&lt;br /&gt;&lt;br /&gt;Ian's guinea pig for client-side testing is LockNote, a simple text editor that saves your notes with password-protected encryption. The program is freely available for Windows, and Ian has developed his own cross-platform Java/Swing version, dubbed "JunqueNote". Using these two applications, Dees teaches us how to automate testing of GUI applications on both the Windows and Java platforms. You'll learn how to launch the app and use API calls to find windows, automate keystrokes and mouse-clicks, and more. This can be valuable as either a means to an end, or as the end goal itself; whether you're testing software, or simply looking to automate it via the user interface.&lt;br /&gt;&lt;br /&gt;In one chapter, Dees provides a gentle introduction to the popular RSpec Behaviour Driven Development framework. In another, he shows how we can simplify our test code by separating out the common code from the platform-specific code.&lt;br /&gt;&lt;br /&gt;Because the focus is on software testing, the author devotes a chapter to leveraging randomness to expose bugs that might otherwise be missed. Another chapter focuses on the ZenTest test matrix library. A later chapter delves into testing web-based applications using Selenium and WATIR, and how to combine these with RSpec.&lt;br /&gt;&lt;br /&gt;As a Ruby on Windows advocate, I'm pleased to see a book that devotes more than just a half-dozen pages to Windows-specific task automation. But "Scripted GUI Testing with Ruby" spends a good deal of time discussing Java-based testing, as well.&lt;br /&gt;&lt;br /&gt;This book is targeted at software testers, and they'll certainly be the section of the market that gets the maximum value from it. But it has potential value beyond that niche. There's something useful to be learned by both testers and non-testers, on both Java and Windows platforms.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/5369401288858379331/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=5369401288858379331' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/5369401288858379331?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/5369401288858379331'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/09/scripted-gui-testing-with-ruby.html' title='Scripted GUI Testing with Ruby'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-2105029956717161058</id><published>2008-08-31T08:56:00.001-05:00</published><updated>2008-08-31T08:59:45.896-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-08-31T08:59:45.896-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='powerpoint'/><category scheme='http://www.blogger.com/atom/ns#' term='win32ole'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Automating PowerPoint with Ruby</title><content type='html'>Here at &lt;span style="font-style:italic;"&gt;Ruby on Windows&lt;/span&gt;, we've looked at how to automate a variety of applications using Ruby. One popular MS Office app that I haven't yet discussed is PowerPoint, Microsoft's ubiquitous presentation software. But, like other Office apps, PowerPoint exposes a full-featured object model for automating, so there's virtually nothing that you can't do with PowerPoint via Ruby code.&lt;br /&gt;&lt;br /&gt;As usual, we'll be leveraging the &lt;span style="font-weight:bold;"&gt;win32ole&lt;/span&gt; library:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We'll start by creating an instance of the PowerPoint Application object, and assigning that object to a variable we'll call &lt;span style="font-weight:bold;"&gt;ppt&lt;/span&gt; :&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;ppt = WIN32OLE.new('PowerPoint.Application')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Note that PowerPoint (like Outlook and Project) is a single-instance application. This means that if an instance of PowerPoint is already running, that instance will be returned, even though you called the WIN32OLE.new method. If PowerPoint is not currently running, a new instance will be launched.&lt;br /&gt;&lt;br /&gt;Like most MS Office applications, the PowerPoint application window is not visible by default when launched from code. To show or hide the Application window, set the &lt;span style="font-weight:bold;"&gt;Visible&lt;/span&gt; property...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;ppt.Visible = true&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The Presentations collection contains the list of presentation documents currently open. To create a new Presentation, we'll call the &lt;span style="font-weight:bold;"&gt;Presentations.Add()&lt;/span&gt; method...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc = ppt.Presentations.Add()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To open an existing presentation, we'll call the &lt;span style="font-weight:bold;"&gt;Presentations.Open(&lt;/span&gt;) method and pass it the path and name of the PPT file...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc = ppt.Presentations.Open('c:\docs\mully1.ppt')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The Presentations.Add() and Presentations.Open() methods add the new Presentation object to the Presentations collection, and return a reference to the Presentation object. As you can see above, we're assigning that object to a variable we've called &lt;span style="font-weight:bold;"&gt;doc&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;The Presentation object contains a collection of Slide objects. To add a new slide to your presentation, call the &lt;span style="font-weight:bold;"&gt;Slides.Add()&lt;/span&gt; method and pass it two integers as arguments: the position at which to insert the new slide, and the layout to use for the new slide...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;ppLayoutText = 2&lt;br /&gt;slide = doc.Slides.Add(1, ppLayoutText)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The position argument must be between 1 and the current number of slides plus 1.&lt;br /&gt;&lt;br /&gt;The Slides.Add() method adds the new slide to the Slides collection and returns a reference to the new slide, which we've assigned to the variable &lt;span style="font-weight:bold;"&gt;slide&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;To get the current count of slides, call the &lt;span style="font-weight:bold;"&gt;Slides.Count()&lt;/span&gt; method.&lt;br /&gt;&lt;br /&gt;So, we could use this code to add a new blank slide to the end of the collection:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;slide = doc.Slides.Add(doc.Slides.Count + 1, ppLayoutBlank)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can find a complete list of Slide Layout constants in &lt;a href="http://msdn.microsoft.com/en-us/library/aa211582(office.11).aspx" target="_blank"&gt;this Microsoft document&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Each slide object contains a Shapes collection of all objects on the slide, such as textboxes, pictures, and OLE objects.&lt;br /&gt;&lt;br /&gt;In the words of Microsoft, a shape object's TextFrame "contains the text in the text frame and the properties and methods that control the alignment and anchoring of the text frame". The TextFrame object's TextRange property "returns a TextRange object that represents the text in the specified text frame". You can get/set the text via the TextRange object's Text property. Got all that? There'll be a quiz later.&lt;br /&gt;&lt;br /&gt;Putting this all together, we can insert or change the text of the first textbox on our slide using a line of code like this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;slide.Shapes(1).TextFrame.TextRange.Text = "Hello, World!"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To save your newly-created presentation, call the &lt;span style="font-weight:bold;"&gt;SaveAs()&lt;/span&gt; method and pass it the path and filename:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.SaveAs('c:\docs\presentation1.ppt')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To save changes to a previously-saved presentation, call the &lt;span style="font-weight:bold;"&gt;Save()&lt;/span&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.Save()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Call the presentation object's &lt;span style="font-weight:bold;"&gt;Close()&lt;/span&gt; method to close the presentation, and call the application object's &lt;span style="font-weight:bold;"&gt;Quit()&lt;/span&gt; method to exit the PowerPoint application:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.Close()&lt;br /&gt;ppt.Quit()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Well, that's our show for today. There's much more to be covered on this topic. Please let me know if you have specific questions or suggestions for future articles.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/2105029956717161058/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=2105029956717161058' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/2105029956717161058?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/2105029956717161058'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/08/automating-powerpoint-with-ruby.html' title='Automating PowerPoint with Ruby'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1661201160190579596</id><published>2008-07-06T10:00:00.003-05:00</published><updated>2008-07-06T10:18:29.324-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-07-06T10:18:29.324-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='win32ole'/><category scheme='http://www.blogger.com/atom/ns#' term='excel'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Working with Win32OLE Constants</title><content type='html'>Excel (and Word, Outlook, etc.) has hundreds of built-in constants that represent numeric values. When reviewing code written in Visual Basic, you may see these constants passed when calling methods or setting property values:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartType = &lt;span style="font-style:italic;"&gt;xlColumnClustered&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;But the above line of code won't work on its own in Ruby, as &lt;span style="font-style:italic;"&gt;xlColumnClustered&lt;/span&gt; won't be recognized as a constant. So, when translating this code to Ruby, how do you get it to work?&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Do-It-Yourself&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In my code examples here, I usually either provide the actual value...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartType = 51&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...or explicitly assign the value to a constant or variable myself:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xlColumnClustered = 51&lt;br /&gt;mychart.ChartType = xlColumnClustered&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In Ruby, constants must begin with an upper-case letter, so '&lt;span style="font-style:italic;"&gt;xlColumnClustered&lt;/span&gt;' is really a variable in the last example above. To make it a constant, I should actually name it something like '&lt;span style="font-style:italic;"&gt;XlColumnClustered&lt;/span&gt;', with an upper-case X.&lt;br /&gt;&lt;br /&gt;How did I know that the Excel constant &lt;span style="font-style:italic;"&gt;xlColumnClustered &lt;/span&gt;equals 51? Well, I simply googled '&lt;span style="font-style:italic;"&gt;Const xlColumnClustered&lt;/span&gt;' and quickly found examples where the constant was being explicitly declared in VB/VBA code ("Const xlColumnClustered = 51"). Googling for '&lt;span style="font-style:italic;"&gt;Excel Constants&lt;/span&gt;' will return numerous pages that list all the the Excel constants and their corresponding values. Microsoft provides their own listing &lt;a href="http://msdn.microsoft.com/en-us/library/aa221100(office.11).aspx" target="_blank"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Loading the Win32OLE Constants&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But you don't have to do it yourself. Ruby's win32ole library allows you to load an object's built-in constants into a class or module. To do so, first create an empty class or module:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class ExcelConst&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Then call the &lt;span style="font-weight:bold;"&gt;WIN32OLE.const_load&lt;/span&gt; method. Pass this method your previously-defined &lt;a href="http://rubyonwindows.blogspot.com/2007/03/automating-excel-with-ruby-application.html" target="_blank"&gt;Excel application object&lt;/a&gt; and your new ExcelConst class:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;WIN32OLE.const_load(excel, ExcelConst)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This loads the Excel application object's built-in constants into your ExcelConst class, but &lt;span style="font-style:italic;"&gt;each constant will now begin with an upper-case letter&lt;/span&gt;, as required in Ruby. Now you can call Excel's built-in constants from your new ExcelConst class. So our original example...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartType = xlColumnClustered&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...works with only a slight modification, inserting the name of our ExcelConst class and capitalizing the first letter of the constant:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartType = ExcelConst::XlColumnClustered&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There you have it. This same method works for loading constants from other win32 application objects, such as Word or Outlook.&lt;br /&gt;&lt;br /&gt;By the way, you can review the docs for the WIN32OLE library, including the const_load method, &lt;a href="http://www.ruby-doc.org/core/classes/WIN32OLE.html" target="_blank"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I hope you found this useful. Feel free to post a comment here or email me if you have questions, comments, or suggestions for future articles (or &lt;a href="http://rubyonwindows.blogspot.com/2008/06/ruby-on-windows-book.html"&gt;the book&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1661201160190579596/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1661201160190579596' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1661201160190579596?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1661201160190579596'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/07/working-with-win32ole-constants.html' title='Working with Win32OLE Constants'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-2150259143347856139</id><published>2008-06-30T07:19:00.002-05:00</published><updated>2008-06-30T07:57:15.512-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-06-30T07:57:15.512-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='book'/><title type='text'>Ruby on Windows: The Book</title><content type='html'>A reader recently commented:&lt;br /&gt;&lt;br /&gt;"Have you written a book on Ruby + Windows? I'd love to see the material expanded and put down on paper. I suppose I can print it out myself, but it's just not the same."&lt;br /&gt;&lt;br /&gt;I've been asked about this before. While I currently have no such "Ruby on Windows" book to offer, I can now say that I have finally started on it.&lt;br /&gt;&lt;br /&gt;I welcome any comments, suggestions, or advice you may have -- as readers and/or writers.</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/2150259143347856139/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=2150259143347856139' title='10 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/2150259143347856139?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/2150259143347856139'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/06/ruby-on-windows-book.html' title='Ruby on Windows: The Book'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>10</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-6309254094213519604</id><published>2008-06-22T08:00:00.003-05:00</published><updated>2008-06-22T08:40:23.162-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-06-22T08:40:23.162-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='win32ole'/><category scheme='http://www.blogger.com/atom/ns#' term='excel'/><title type='text'>Automating Excel: Creating Charts</title><content type='html'>They say a picture is worth a thousand words, and sometimes a chart can make your point more effectively than the raw data behind it can. This is especially true when comparing relative values such as monthly revenue data or team statistics.&lt;br /&gt;&lt;br /&gt;In our &lt;a href="http://rubyonwindows.blogspot.com/2008/06/automating-excel-chart-axis-and-legend.html"&gt;last episode&lt;/a&gt;, we looked at how to define titles in existing Excel charts. Sticking with the Excel Charts theme, let's now investigate how to create new charts in Excel.&lt;br /&gt;&lt;br /&gt;A chart is a visualization of data, and for this example, the data represents Runs Scored and Runs Allowed for American League Baseball teams, as reported on the &lt;a href="http://mlb.mlb.com/mlb/standings/index.jsp" target="_blank"&gt;mlb.com&lt;/a&gt; website. Our Excel worksheet contains a row for each team, with columns for Runs Scored and Runs Allowed:&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_9LH5hSdA01Y/SF2N-g-dIUI/AAAAAAAAADE/lLxEOQIS7QM/s1600-h/ChartData.png"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://3.bp.blogspot.com/_9LH5hSdA01Y/SF2N-g-dIUI/AAAAAAAAADE/lLxEOQIS7QM/s320/ChartData.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5214480048708198722" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We'll use the &lt;span style="font-weight: bold;"&gt;win32ole&lt;/span&gt; library for automating Excel, and we'll connect to a running instance of Excel and use the already open 'mlb_stats.xls' workbook:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;xl = WIN32OLE.connect('Excel.Application')&lt;br /&gt;wb = xl.Workbooks('mlb_stats.xls')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Let's define some parameter variables that we'll use later:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xlColumns = 2&lt;br /&gt;xlColumnClustered = 51&lt;br /&gt;xlWhite = 2&lt;br /&gt;xlRed = 3&lt;br /&gt;xlBlue = 5&lt;br /&gt;xlGray = 15&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To add a new Chart object to the workbook's Charts collection, call the &lt;span style="font-weight:bold;"&gt;Charts.Add&lt;/span&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart = wb.Charts.Add&lt;br /&gt;mychart.Name = "MLB Scoring"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The &lt;span style="font-weight:bold;"&gt;Charts.Add&lt;/span&gt; method returns a reference to the newly-created Chart object, which we've assigned to the variable &lt;span style="font-style:italic;"&gt;mychart&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;To delete an existing Chart object, call the Charts(&lt;span style="font-style:italic;"&gt;chart&lt;/span&gt;).Delete method, where &lt;span style="font-style:italic;"&gt;chart&lt;/span&gt; is the name or (1-based) index of the chart to delete:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;wb.Charts("MLB Scoring").Delete&lt;br /&gt;wb.Charts(1).Delete&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Naturally, we can't produce a chart without data, and we use the &lt;span style="font-weight:bold;"&gt;SetSourceData&lt;/span&gt;  method to define the source of the data that the chart will represent. This method takes 2 arguments, [1] a range of cells from a worksheet, and [2] a number that indicates whether to plot the graph by rows (1) or by columns (2):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.SetSourceData wb.Worksheets("Runs Scored and Allowed").Range("A1:C15"), xlColumns&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There are many different types of charts to choose from, and for our purpose, we'll use a 2-dimensional column [aka vertical bars] chart, setting the &lt;span style="font-weight:bold;"&gt;ChartType&lt;/span&gt; property to 51 (via our previously-defined xlColumnClustered variable):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartType = xlColumnClustered&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now, you could execute your code at this point and create a new chart. But let's tweak the colors a bit. The SeriesCollection object holds each series of data and its related properties. Our chart has 2 series, one for Runs Scored, and one for Runs Allowed. Let's make the Runs Scored columns blue and the Runs Allowed columns red, via the &lt;span style="font-weight:bold;"&gt;Interior.ColorIndex&lt;/span&gt; property:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.SeriesCollection(1).Interior.ColorIndex = xlBlue&lt;br /&gt;mychart.SeriesCollection(2).Interior.ColorIndex = xlRed&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We could also dictate the name that is displayed for each series in the legend:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.SeriesCollection(1).Name = "Runs Scored"&lt;br /&gt;mychart.SeriesCollection(2).Name = "Runs Allowed  "&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If you do not define a name for each series, Excel will try to pull it from your source data worksheet.&lt;br /&gt;&lt;br /&gt;The PlotArea represents the area on which the data (columns, in our case) is plotted. The ChartArea is the area surrounding the PlotArea, on which the title, axes, and legend are placed. For demonstration purposes, let's define specific colors for these objects by setting their &lt;span style="font-weight:bold;"&gt;Interior.ColorIndex&lt;/span&gt; property:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.ChartArea.Interior.ColorIndex = xlWhite&lt;br /&gt;mychart.ChartArea.Border.ColorIndex = xlBlue&lt;br /&gt;mychart.PlotArea.Interior.ColorIndex = xlGray&lt;br /&gt;mychart.PlotArea.Border.ColorIndex = xlWhite&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, we'll add a title to the top of the chart, and format the text:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mychart.HasTitle = true&lt;br /&gt;mychart.ChartTitle.Characters.Text = "American League - Runs Scored vs. Runs Allowed"&lt;br /&gt;mychart.ChartTitle.Font.Name = 'Verdana'&lt;br /&gt;mychart.ChartTitle.Font.Size = 16&lt;br /&gt;mychart.ChartTitle.Font.Bold = true&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Note that we first have to set the &lt;span style="font-weight:bold;"&gt;HasTitle&lt;/span&gt; property to true. Without first doing this, trying to define the various &lt;span style="font-weight:bold;"&gt;ChartTitle&lt;/span&gt; properties will raise an error.&lt;br /&gt;&lt;br /&gt;Our complete code looks like &lt;a href="http://pastie.org/219846" target="_blank"&gt;this&lt;/a&gt;, and produces  a chart that looks like this:&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_9LH5hSdA01Y/SF0_wAMlFgI/AAAAAAAAAC0/-QW5vC45ruM/s1600-h/Chart.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://1.bp.blogspot.com/_9LH5hSdA01Y/SF0_wAMlFgI/AAAAAAAAAC0/-QW5vC45ruM/s320/Chart.png" alt="" id="BLOGGER_PHOTO_ID_5214394037483935234" border="0" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Not a bad start, eh? A quick glance at this chart tells you that Boston and Chicago are doing very well, run-wise, and that it could be a very long season for Kansas City and Seattle. And we see that Texas scores a tremendous amount of runs, but allows even more.&lt;br /&gt;&lt;br /&gt;I encourage you to investigate the vast array of chart methods and properties. Towards that end, you might want to check out &lt;a href="http://peltiertech.com/Excel/ChartsHowTo/" target="_blank"&gt;Jon Peltier's Chart tutorials&lt;/a&gt;, which I have found to be helpful.&lt;br /&gt;&lt;br /&gt;Questions? Comments? Suggestions? Post a comment here or send me an email.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/6309254094213519604/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=6309254094213519604' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/6309254094213519604?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/6309254094213519604'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/06/automating-excel-creating-charts.html' title='Automating Excel: Creating Charts'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_9LH5hSdA01Y/SF2N-g-dIUI/AAAAAAAAADE/lLxEOQIS7QM/s72-c/ChartData.png' height='72' width='72'/><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1880492493025856777</id><published>2008-06-15T03:00:00.002-05:00</published><updated>2008-06-15T09:21:44.870-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-06-15T09:21:44.870-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='excel'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Automating Excel: Chart, Axis, and Legend Titles</title><content type='html'>A reader writes, "I need to use Ruby to automate Excel... How can I set the chart title, axes title, or legend name, etc in the chart by using Ruby?"  I confess that my knowledge of Excel charts is limited, but let's dive in and see what we can learn...&lt;br /&gt;&lt;br /&gt;As usual, you'll start by using the win32ole library. For our example, we'll connect to a running &lt;a href="http://rubyonwindows.blogspot.com/2007/03/automating-excel-with-ruby-application.html"&gt;instance of Excel&lt;/a&gt;:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;xl = WIN32OLE.connect('Excel.Application')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Referencing a Chart Object&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Let's assume that ws is your &lt;a href="http://rubyonwindows.blogspot.com/2007/04/automating-excel-with-ruby-worksheet.html"&gt;worksheet object&lt;/a&gt;. You can obtain a reference to a Chart object either...&lt;br /&gt;&lt;br /&gt;...via the Charts collection, if it is a chart sheet...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart = ws.Charts(1).Chart&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;or via the ChartObjects collection, if it is an embedded chart (not a chart sheet)...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart = ws.ChartObjects(1).Chart&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...or via the ActiveChart method if the chart is the currently active object:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart = xl.ActiveChart&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Setting the Chart Title&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In order to set the value of a chart's title, you must ensure that the HasTitle property is enabled:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart.HasTitle = true&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Then set the value of the ChartTitle.Text property:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart.ChartTitle.Text = "2008 Sales"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Setting the Axes Title&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Select one of the  chart's axes by calling the Chart object's Axes method and passing it an integer representing either the category, value, or series axis:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;XL_CATEGORY = 1&lt;br /&gt;XL_VALUE = 2&lt;br /&gt;XL_SERIESAXIS = 3&lt;br /&gt;axis = chart.Axes(XL_CATEGORY)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Much like with the chart title above, in order to set the value of an axis' title, you must ensure that the HasTitle property is enabled:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;axis.HasTitle = true&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Then set the value of the ChartTitle.Text property:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;axis.AxisTitle.Text = "July Sales"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Setting the Legend Names&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You can reference a legend via the Chart object's SeriesCollection method, passing it the (1-based) index of the item you wish to reference:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;chart.SeriesCollection(1).Name = "Jan"&lt;br /&gt;chart.SeriesCollection(2).Name = "Feb"&lt;br /&gt;chart.SeriesCollection(3).Name = "Mar"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And there you have it. If you found this to be useful, you may want to check out &lt;a href="http://msdn.microsoft.com/en-us/library/aa213725(office.11).aspx"&gt;this Microsoft MSDN Chart object reference&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Got a question, comment, or suggestion? Post your comment here or send me an email.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1880492493025856777/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1880492493025856777' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1880492493025856777?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1880492493025856777'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/06/automating-excel-chart-axis-and-legend.html' title='Automating Excel: Chart, Axis, and Legend Titles'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-6592104922488958059</id><published>2008-06-03T19:23:00.000-05:00</published><updated>2008-06-03T19:27:05.395-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-06-03T19:27:05.395-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>Running In A Console Window?</title><content type='html'>Someone recently asked me how to determine if your code is running in a console window  or not. Perhaps you have a program that provides both GUI and command line interfaces and you need to know which interface is being used. You may wish to output error messages to the console, if it exists, but to a file if the console doesn't exist.&lt;br /&gt;&lt;br /&gt;UPDATE:  Perhaps the preferred means for this is the &lt;span style="font-weight:bold;"&gt;STDIN.isatty&lt;/span&gt; method, which returns true if running in a console window and false otherwise...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;if STDIN.isatty&lt;br /&gt;    # do some command-line stuff&lt;br /&gt;else&lt;br /&gt;    # do some GUI stuff&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Thanks to Brent and Dan for their comments.&lt;br /&gt;&lt;br /&gt;Alternatively, Nobu Nakada mentioned in &lt;a href="http://www.ruby-forum.com/topic/152599"&gt;a recent Ruby Forum post&lt;/a&gt; that you cannot open the CONIN$ (console input) device file unless you are running in a console window. So the following method (adapted from Nobu) would return true if running in a console window and false otherwise...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;def in_console?&lt;br /&gt;    begin&lt;br /&gt;        open("CONIN$") {}&lt;br /&gt;        console = true&lt;br /&gt;    rescue SystemCallError&lt;br /&gt;        console = false&lt;br /&gt;    end&lt;br /&gt;    return console&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Usage example:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;if in_console?&lt;br /&gt;    # do some command-line stuff&lt;br /&gt;else&lt;br /&gt;    # do some GUI stuff&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There you have it. Got a question or suggestion? Post a comment or send me email.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/6592104922488958059/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=6592104922488958059' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/6592104922488958059?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/6592104922488958059'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/06/running-in-console-window.html' title='Running In A Console Window?'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-3124088567636616779</id><published>2008-04-21T22:30:00.000-05:00</published><updated>2008-04-21T21:32:27.242-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-04-21T21:32:27.242-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Shutting Down Windows from Ruby Code</title><content type='html'>Someone recently asked how to shut down or restart Windows from their Ruby code. Windows provides an executable, "shutdown.exe", to accomplish this. Execute this command from your script with the appropriate parameters and you can log off, shutdown, or restart the OS.&lt;br /&gt;&lt;br /&gt;Parameters accepted include, but are not limited to:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;-l        Log off (cannot be used with -m option)&lt;br /&gt;-s        Shutdown the computer&lt;br /&gt;-r        Shutdown and restart the computer&lt;br /&gt;-t xx     Set timeout for shutdown to xx seconds&lt;br /&gt;-f        Forces running applications to close without warning&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So, the following line of code will close all applications without a warning and instantly shut down and restart your PC:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;system('shutdown.exe -r -f -t 0')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To get the full list of parameters, open a console window and enter&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;shutdown.exe /?&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Further details can be found in &lt;a href="http://technet.microsoft.com/en-us/library/bb491003.aspx"&gt;this Microsoft article&lt;/a&gt;. And Gordon Thiesfeld offers WMI and win32ole alternatives in &lt;a href="http://www.ruby-forum.com/topic/150301"&gt;this Ruby Forum thread&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/3124088567636616779/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=3124088567636616779' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/3124088567636616779?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/3124088567636616779'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/04/shutting-down-windows-from-ruby-code.html' title='Shutting Down Windows from Ruby Code'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1985435176799323563</id><published>2008-04-02T18:15:00.002-05:00</published><updated>2008-04-03T07:14:17.455-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-04-03T07:14:17.455-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='jruby'/><category scheme='http://www.blogger.com/atom/ns#' term='win32ole'/><title type='text'>Win32OLE Library for JRuby?</title><content type='html'>Charles O. Nutter of the JRuby project is &lt;a href="http://wiki.jruby.org/wiki/Google_Summer_of_Code_2008"&gt;seeking proposals for Google's Summer of Code&lt;/a&gt; (GSoC).&lt;br /&gt;&lt;br /&gt;Among the suggested projects is this one of possible interest to many [J]Ruby on Windows users:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;Win32OLE Library for JRuby - Implement the win32ole library for JRuby. This would also be an excellent contribution, since there's already libraries like Jacob to take some of the pain out of it, and it would be great to have it working on JRuby. (suggested by sgwong)&lt;/blockquote&gt;&lt;br /&gt;Update from Charlie:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;BTW, if you know anyone that might be interested in doing this through GSoC, please spread the word quickly. The &lt;span style="font-weight:bold;"&gt;deadline for submissions is Monday, April 7&lt;/span&gt;, so there's not a lot of time left.&lt;br /&gt;&lt;br /&gt;And to make it more attractive, there's already a very nice Java library that provides COM/OLE support (http://danadler.com/jacob/) so the task is more about wiring that library into JRuby than mucking about with any low-level native nasties.&lt;/blockquote&gt;&lt;br /&gt;I'd love to see this project undertaken, as it could be a big boost for those of us who currently do COM automation work with Ruby. I haven't done much with JRuby yet (a wee bit of Jython in the past), but I like the possibilities for having an easily-distributable app (JAR file?) that includes a GUI (e.g., Swing) and Win32OLE functionality.&lt;br /&gt;&lt;br /&gt;What do you think? Would a Win32OLE library increase the likelihood of you using JRuby for some future projects?&lt;br /&gt;&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2008/04/win32ole-library-for-jruby.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1985435176799323563/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1985435176799323563' title='10 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1985435176799323563?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1985435176799323563'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/04/win32ole-library-for-jruby.html' title='Win32OLE Library for JRuby?'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>10</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-4845950475693500215</id><published>2008-03-29T20:51:00.013-05:00</published><updated>2008-03-30T08:11:23.502-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-03-30T08:11:23.502-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='commentary'/><title type='text'>Windows: Ruby's Red-Headed Stepchild</title><content type='html'>In case you missed it, there has been increased online discussion these past few days regarding the viability of Windows as a development platform for Ruby. This was triggered by at least two blog posts...&lt;br /&gt;&lt;br /&gt;Luis Lavena: &lt;br /&gt;&lt;br /&gt;&lt;a href="http://blog.mmediasys.com/2008/03/06/is-windows-a-supported-platform-for-ruby-i-guess-not/"&gt;"Is Windows a supported platform for Ruby? I guess not"&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Peter Cooper:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.rubyinside.com/is-windows-a-first-class-platform-for-ruby-823.html"&gt;"Is Windows a first class platform for Ruby, or not?"&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;"All the cool kids are doing it."&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I've been disappointed by some of the readers' comments to these posts. As in so many discussions within the open source community, there's a significant anti-Microsoft sentiment. There are many reasons to dislike Microsoft and Windows. But those who wonder aloud if anyone still uses Windows, or that comment that "real programmers don't use Windows" are either tragically ignorant or blinded by their passion for Linux and/or MacOS. Yes, I know, we're wandering back towards the &lt;a href="http://www.ruby-forum.com/topic/102776"&gt;Ruby in the Enterprise&lt;/a&gt; debate.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;“The race is not always to the swift, nor the battle to the strong, but that's the way to bet.” -Damon Runyon&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Fortunately, there are voices of reason in this discussion, including Peter Cooper, who, while not a Windows user, says "a poor Windows Ruby ecosystem could harm the growth and spread of the language". Whether you like it or not, Windows is far and away the most popular desktop OS. Many desktop developers in the [insert Darth Vader/Evil Empire theme here] Corporate World are required to develop for Windows because &lt;span style="font-style:italic;"&gt;that's where the users are.&lt;/span&gt; We might be able to "sneak Ruby through the system", but expecting a company to switch hundreds or thousands of users from Windows to Linux or Mac is childish.&lt;br /&gt;&lt;br /&gt;If you love Ruby, and care about the future of The Language, then you &lt;span style="font-style:italic;"&gt;want&lt;/span&gt; Windows to be a "first-class platform for Ruby". It's not about developer preferences. It's about market forces.&lt;br /&gt;&lt;br /&gt;Ruby is more than just Rails.&lt;br /&gt;&lt;br /&gt;Software development is more than just websites.&lt;br /&gt;&lt;br /&gt;Ruby needs Windows more than Windows needs Ruby.&lt;br /&gt;&lt;br /&gt;Think about it.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2008/03/windows-rubys-red-headed-stepchild.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/4845950475693500215/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=4845950475693500215' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/4845950475693500215?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/4845950475693500215'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/03/windows-rubys-red-headed-stepchild.html' title='Windows: Ruby&apos;s Red-Headed Stepchild'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-2283873733770139226</id><published>2008-01-27T11:05:00.000-05:00</published><updated>2008-01-31T08:40:59.472-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-01-31T08:40:59.472-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='rubygarden'/><category scheme='http://www.blogger.com/atom/ns#' term='excel'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>RubyGarden Archives: Scripting Excel</title><content type='html'>&lt;span style="font-style:italic;"&gt;&lt;span style="font-weight:bold;"&gt;Editor's Note: &lt;/span&gt;Once upon a time, there was a website named RubyGarden.org, which contained many helpful links and articles. The website has recently dropped off the face of the earth. The following "Scripting Excel" article was salvaged &lt;a href="http://www.google.com/search?q=cache:q7fKHFEtxjwJ:rubygarden.org/ruby/page/show/ScriptingExcel+scriptingexcel+site:rubygarden.org&amp;hl=en&amp;ct=clnk&amp;cd=1&amp;gl=us"&gt;from   the Google cache&lt;/a&gt; and is provided here in its entirety.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;&lt;br /&gt;Although the Pickaxe book has some examples of scripting Excel, I still had quite a lot of digging to do for some of the scripts I needed. I got some by looking at the M$ docs (poor as they are**), and some by looking at Perl examples. So this page is for collecting examples of code that others might adapt (and add to).&lt;br /&gt;&lt;br /&gt;See also: ScriptingOutlook, ScriptingAccess&lt;br /&gt;&lt;br /&gt;          o You can download the Office XP Excel Object Reference help file as part of an expanded help bundle here [1]. It's large [19MB], but it includes a bunch of VBA help files that I couldn't track down otherwise. The file you need for Excel items is VBAXL10.CHM. It appears to have complete docs on all the Excel objects. -- ChrisMorris &lt;br /&gt;&lt;br /&gt;          o A great resource for general Excel and programming related questions (well with VBA) are Chip Pearsons [Excel Pages]. I learned a lot from his article [Cell References In A Range] for example. -- BernhardLeicher &lt;br /&gt;&lt;br /&gt;First of all:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Opening spreadsheets, accessing workbooks and worksheets&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel = WIN32OLE::new('excel.Application')&lt;br /&gt;workbook = excel.Workbooks.Open('c:\examples\spreadsheet.xls')&lt;br /&gt;worksheet = workbook.Worksheets(1) #get hold of the first worksheet&lt;br /&gt;worksheet.Select  #bring it to the front -need sometimes to run macros, &lt;br /&gt;#    not for working with a worksheet from ruby&lt;br /&gt;excel['Visible'] = true #make visible, set to false to make invisible &lt;br /&gt;#    again. Don't need it to be visible for script to work&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;reading data from spreadsheet&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;worksheet.Range('a12')['Value']  #get value of single cell&lt;br /&gt;data = worksheet.Range('a1:c12')['Value'] #read into 2D array&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;finding the first empty row (using empty column A)&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;line = '1'&lt;br /&gt;while worksheet.Range("a#{line}")['Value']&lt;br /&gt;   line.succ!&lt;br /&gt;end #line now holds row number of first empty row&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;or to read as you go&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;line = '1'&lt;br /&gt;data = []&lt;br /&gt;while worksheet.Range("a#{line}")['Value']&lt;br /&gt;   data &lt;&lt; worksheet.Range("a#{line}:d#{line}")['Value']&lt;br /&gt;   line.succ!&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;writing data into spreadsheet, example&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;worksheet.Range('e2')['Value'] = Time.now.strftime &lt;br /&gt;    '%d/%m/%Y' #single value&lt;br /&gt;worksheet.Range('a5:c5')['Value'] = ['Test', '25', 'result']&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;loading all Excel constants into a class&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class ExcelConst&lt;br /&gt;end&lt;br /&gt;WIN32OLE.const_load(excel, ExcelConst)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now the constant xlDown is accessible as&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;ExcelConst::XlDown&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To find out what constants to use you can use this script. You run it by passing in a string which is matched against the constant names.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;br /&gt;module ExcelConsts&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;excel = WIN32OLE.new("Excel.Application")&lt;br /&gt;WIN32OLE.const_load(excel, ExcelConsts)&lt;br /&gt;excel.quit()&lt;br /&gt;&lt;br /&gt;puts 'Matches for: ' + ARGV[0]&lt;br /&gt;ExcelConsts.constants.each {|const|&lt;br /&gt;    match = const.match(/#{ARGV[0]}/)&lt;br /&gt;    value = eval("ExcelConsts::#{const}")&lt;br /&gt;    puts ' '*4 + const + ' =&gt; ' + value.to_s unless match.nil?&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;An example would be looking for the constant to center text. I ran&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;ruby search_excel_consts.rb Center &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;and the following results came up:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;XlCenterAcrossSelection =&gt; 7&lt;br /&gt;XlVAlignCenter =&gt; -4108&lt;br /&gt;XlCenter =&gt; -4108&lt;br /&gt;XlLabelPositionCenter =&gt; -4108&lt;br /&gt;XlPhoneticAlignCenter =&gt; 2&lt;br /&gt;XlHAlignCetner =&gt; -4108&lt;br /&gt;XlHAlignCenterAcrossSelection =&gt; 7&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;calling macros&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel.Run('SortByNumber')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Setting background colour&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;worksheet.Range('a3:f5').Interior['ColorIndex'] = 36 #pale yellow&lt;br /&gt;# Set background color back to uncoloured (rnicz)&lt;br /&gt;worksheet.Range('a3:f5').Interior['ColorIndex'] = -4142 # XlColorIndexNone constant&lt;br /&gt;# or use Excel constant to set background color back to uncoloured&lt;br /&gt;worksheet.Range('a3:f5').Interior['ColorIndex'] = ExcelConst::XlColorIndexNone&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Adding Formulae&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;emptyRow = 15&lt;br /&gt;worksheet.Range("t#{emptyRow}")['Formula'] = "=(Q#{emptyRow}+L#{emptyRow}+I#{emptyRow}+S#{emptyRow})"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;saving changes&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;workbook.Close(1)&lt;br /&gt;# or&lt;br /&gt;workbook.SaveAs 'myfile.xls'&lt;br /&gt;# default path is the system defined My Documents folder&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;ending session&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel.Quit&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If you're experimenting from within irb and are having problems with processes hanging around after you've called excel.Quit - try deleting the reference to excel and invoking the garbage collector.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel.Quit&lt;br /&gt;excel = nil&lt;br /&gt;GC.start&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Hopefully this is of some use. Please add anything else you have discovered.&lt;br /&gt;&lt;br /&gt;Some further stuff that I learned so far...&lt;br /&gt;It partly overlaps with what ChrisMorris already wrote, maybe we can merge it later on. -- BernhardLeicher&lt;br /&gt;&lt;br /&gt;Start Excel, create new workbook and save it:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;excel = WIN32OLE.new("excel.application")&lt;br /&gt;excel.visible = true     # in case you want to see what happens &lt;br /&gt;workbook = excel.workbooks.add&lt;br /&gt;workbook.saveas('c:\examples\spreadsheet1.xls')&lt;br /&gt;workbook.close&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Or, suppose Excel is already started and a few Excel files are opened (=workbooks in Excel jargon): Connect to the running instance of Excel, activate one of the workbooks and write something.&lt;br /&gt;&lt;br /&gt;This also shows that Excel collections can be iterated very handy with "each", and that collections can sometimes be indexed by number or by name:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel = WIN32OLE.connect("excel.application")&lt;br /&gt;excel.workbooks.each{|wb|puts wb.name}  # loop through workbooks and display names&lt;br /&gt;excel.workbooks(1).activate             # activate by number&lt;br /&gt;excel.workbooks("Mappe1").activate      # or by name     &lt;br /&gt;excel.range("b5").value="soso"          # write something to cell B5&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Connecting to Excel is particularly good fun when done interactively from irb: You instantly see what happens!&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;irb(main):001:0&gt; require 'win32ole'&lt;br /&gt;true&lt;br /&gt;irb(main):002:0&gt; excel=WIN32OLE.connect('excel.application')&lt;br /&gt;#&lt;WIN32OLE:0xa0b3528&gt;&lt;br /&gt;irb(main):003:0&gt; excel.workbooks.each{|wb|puts wb.name}&lt;br /&gt;PERSONL.XLS&lt;br /&gt;Mappe1&lt;br /&gt;Mappe2&lt;br /&gt;Mappe3&lt;br /&gt;nil&lt;br /&gt;irb(main):004:0&gt; excel.workbooks(1).name&lt;br /&gt;"PERSONL.XLS"&lt;br /&gt;irb(main):005:0&gt; excel.workbooks("Mappe1").activate&lt;br /&gt;true&lt;br /&gt;irb(main):006:0&gt; excel.range("b5").value="soso"&lt;br /&gt;nil&lt;br /&gt;&lt;br /&gt;Excel =&gt; workbook =&gt; worksheet =&gt; range(cell)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;What always bugged me when browsing through examples were the various ways of referring to a particular cell on a particular worksheet in a particular workbook. When Excel is started and "Mappe1" is the currently active workbook and "Tabelle1" is the currently active worksheet, all following statements do the same thing:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel.workbooks("Mappe1").worksheets("Tabelle1").range("a1").value&lt;br /&gt;excel.worksheets("Tabelle1").range("a1").value&lt;br /&gt;excel.activeworkbook.activesheet.range("a1").value&lt;br /&gt;excel.activesheet.range("a1").value&lt;br /&gt;excel.range("a1").value&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;My confusion was probably caused by the fact that a lot of properties/methods can be called on "excel" directly and then default to the currently active workbook/worksheet. It's more a matter of taste to specify "activesheet" and "activeworkbook" or not.&lt;br /&gt;&lt;br /&gt;And regarding the hierarchy, it seems to be as simple as: When Excel is up and running, it contains 0 (no file opened) or more workbooks (Workbook? Just Excel jargon for an Excel file!), with each workbook/file containing 1 or more worksheets.&lt;br /&gt;&lt;br /&gt;Various methods for addressing a cell or range of cells&lt;br /&gt;&lt;br /&gt;In the Excel object model there isn't something like a cell object, it's all covered by the "Range" object. A range can represent only one cell or a whole bunch of them (a column, a row, a rectangular block of cells, ....).&lt;br /&gt;&lt;br /&gt;Let's assume for the following examples, that "sheet" contains a reference to an Excel worksheet, obtained e.g. by:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;excel = WIN32OLE.connect('excel.application')   # connect to running instance of Excel&lt;br /&gt;sheet = excel.activesheet&lt;br /&gt;&lt;br /&gt;sheet.range(cellname/cell[, cellname/cell])&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A range can be obtained by using the worksheet's Range property. A range with only one cell:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Or a rectangular block of cells (A1 to C3):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1", "c3")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Same with one argument:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1:c3")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Whole Column A:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a:a")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Whole Row 3:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("3:3")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A range itself has a range property, thus allowing to write:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("c3").range("a1").address     # &gt;&gt; "$C$3"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Doesn't make much sense, one might note that the second range's address becomes relative to the first range.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.cells(rowindex, columnindex)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This is all wonderful, but shouldn't there be a way of addressing cells by row and column number? The worksheet's Cells property does that: It gets you a range with one cell by specifying the row and column number. The indices are counted from 1, so Cells(1,1) gives you cell A1:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.cells(3,1).address                  # &gt;&gt; "$C$3"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Combined with range to get range A1:C3:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range(sheet.cells(1,1), sheet.cells(3,3))   &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And when applied to another range, row and column index become relative to the first range:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b2").cells(2,2).address      # &gt;&gt; "$C$3"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The index can be negative:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("c3").cells(-1,-1).address    # &gt;&gt; "$A$1"&lt;br /&gt;range.offset(rowoffset, columnoffset)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If you have a range, this can be used to return another range that is y rows and x columns away (or offset) from this one. This time the offsets count from 0:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").offset(0,0).address      # &gt;&gt; "$A$1"&lt;br /&gt;sheet.range("b5").offset(1,1).address      # &gt;&gt; "$C$6"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;While offset somehow reminds of the cells function, this might make a difference: If range contains a block of cells, an offset block of cells is returned too:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1:c3").offset(0,2).address   # &gt;&gt; "$C$1:$E$3"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Negative offsets can be specified too:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b2").offset(-1,-1).address    # &gt;&gt; "$A$1"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Getting cell values&lt;br /&gt;&lt;br /&gt;There isn't only one method for obtaining a cell's value, but at least three of them: text, value, value2. So which should one use, what is the difference between them?&lt;br /&gt;&lt;br /&gt;Sidenote:&lt;br /&gt;An Excel cell's content is somewhat relative, what you see isn't necessarily what is actually inside the cell, because a cell's content is displayed according to a specified format. A cell might contain "0.12345", but is displayed as "0.12" or "0.12 DM" or whatever. It might be good to know, that internally a cell's content is either a text or a floating point number. That's it, nothing else.&lt;br /&gt;&lt;br /&gt;Just for curiosity:&lt;br /&gt;Dates are represented internally as floating point values too (more details at Chip Pearson's site: HTTP://www.cpearson.com/excel/datetime.htm):³59³ "Excel stores dates and times as a number representing the number of days since 1900-Jan-0, plus a fractional portion of a 24 hour day: ddddd.tttttt . This is called a serial date, or serial date-time."&lt;br /&gt;So if the content is 37936.0 and its format is "date", it's displayed as "11.11.03" or "Nov 2003".&lt;br /&gt;&lt;br /&gt;For the following examples let's assume a content of:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;A1 =&gt; 10.12345 =&gt; formatted with 2 decimal digits =&gt; 10.12&lt;br /&gt;B1 =&gt; 10.12345 =&gt; formatted as currency =&gt; 10,00 DM&lt;br /&gt;C1 =&gt; 11.11.03 =&gt; date =&gt; 11.11.03 &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;range.text&lt;br /&gt;&lt;br /&gt;Text property retrieves the value as it is displayed, as a string. It's readonly, so only for getting values. Because my country settings are "German", floats are displayed with a comma.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").text      # &gt;&gt; "10,12"&lt;br /&gt;sheet.range("b1").text      # &gt;&gt; "10,12 DM"&lt;br /&gt;sheet.range("c1").text      # &gt;&gt; "11.11.03"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;range.value&lt;br /&gt;&lt;br /&gt;This is the result when retrieved with value:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").value       # &gt;&gt; 10.12345&lt;br /&gt;sheet.range("b1").value       # &gt;&gt; "10,1235"&lt;br /&gt;sheet.range("c1").value       # &gt;&gt; "2003/11/11 00:00:00"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Retrieves the "internal" value (A1 becomes a float), whereby currency and date are still returned as strings albeit somewhat different than before.&lt;br /&gt;&lt;br /&gt;range.value2&lt;br /&gt;&lt;br /&gt;According to the Excel documentation value2 behaves just like value, but additionally retrieves currency and dates as doubles (the actual internal content):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").value2        # &gt;&gt; 10.12345&lt;br /&gt;sheet.range("b1").value2        # &gt;&gt; 10.12345&lt;br /&gt;sheet.range("c1").value2        # &gt;&gt; 37936.0 &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Yes, seems to work as advertised.&lt;br /&gt;&lt;br /&gt;Setting values&lt;br /&gt;&lt;br /&gt;Seems that only "value" is useful here. An integer or float arrives as expected as number in Excel:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").value = 1.2345&lt;br /&gt;sheet.range("a1").value = 2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;For strings Excel does the same processing that it does when something is interactively entered. It thus depends on how Excel interprets the string:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1").value = "10.11.2003"     # becomes a date&lt;br /&gt;sheet.range("a1").value = "1,2345"           # becomes a number (at least with German country settings)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Iterating ranges...&lt;br /&gt;&lt;br /&gt;...with each&lt;br /&gt;&lt;br /&gt;Ranges can be iterated with each:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1:a10").each{|cell|puts cell.value}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If the range is a block of cells the iteration goes from left to right, then down one line, and so on:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("a1:b5").each{|cell|puts cell.value}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Iterating block of cells by row and output the first cell of each row:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b3:c7").rows.each{|r|puts r.cells(1,1).value}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;and by column:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b3:c7").columns.each{|c|puts c.cells(1,1).value}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Result of row.value is an array within an array:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b3:c7").rows.each{|r|puts r.value.inspect}  # &gt;&gt; [1.0, 10.0]?&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...with activecell&lt;br /&gt;&lt;br /&gt;Like moving around an Excel sheet with the cursor. Moving down one cell:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.activecell.offset(1,0).activate&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Walking down from the active cell until an empty cell is encountered:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.activecell.offset(1,0).activate while excel.activecell.value&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...with an index&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;range = sheet.range("b3:c7")&lt;br /&gt;noofrows = range.rows.count&lt;br /&gt;(1..noofrows).each{|i|puts range.cells(i,1).value}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Named Ranges&lt;br /&gt;&lt;br /&gt;Named ranges make Excel spreadsheets more usable for the end user. To create a named range "myRange":&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.names.Add( { 'Name' =&gt; 'myRange', 'RefersTo' =&gt; 'A2:A216' } )&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;One problem! This doesn't work. Use a Range object for RefersTo?, not a String:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;myRange = sheet.Range( 'A2:A216' )&lt;br /&gt;sheet.names.Add( { 'Name' =&gt; 'myRange', 'RefersTo' =&gt; myRange } )&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;How do you use named ranges in ruby? Named ranges are kept in the worksheet as well as the workbook. You may need to check both locations.&lt;br /&gt;&lt;br /&gt;Something like the following works for named ranges manually defined by the user:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;rangeString = workbook.names( 'Sheet1!myRange' ).Value&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;1. Remove "=" prefix (e.g. "=Sheet1!$A$2:$A$4") &lt;br /&gt;&lt;pre&gt;&lt;br /&gt;rangeString = rangeString.slice( 1, rangeString.length - 1 ) if ( rangeString =~ /^=/ ) worksheet.range( rangeString ).value = 'testing...'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finding Data Regions...&lt;br /&gt;&lt;br /&gt;Data don't always start in row 1, column A, the number of columns might not be fixed, and the number of rows is most often variable. There are two handy methods that can help to find that "block of data".&lt;br /&gt;&lt;br /&gt;Let's assume, that B3:C7 contain data.&lt;br /&gt;&lt;br /&gt;...with CurrentRegion&lt;br /&gt;&lt;br /&gt;Given any cell inside the "data block", CurrentRegion?() finds the surrounding contiguous data region and returns its range:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b5").currentregion.address   # &gt;&gt; "$B$3:$C$7"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...by "jumping around"&lt;br /&gt;&lt;br /&gt;There's a shortcut key in Excel "&lt;CTRL&gt;+&lt;DOWN/UP/RIGHT/LEFT-ARROW&gt;", that allows you to jump to the end/start of regions with content. With our example and the cursor in B3, pressing &lt;CTRL&gt;+&lt;DOWN&gt; would jump the cursor to cell B7, pressing that shortcut again would move the cursor to the last line of the spreadsheet to B65536. There's an equivalent method: "End()".&lt;br /&gt;&lt;br /&gt;Finding the last row with data:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;sheet.range("b3").end(-4121).address   # &gt;&gt; "$B$7"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The parameter indicates the direction, the Excel constants are:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xlDown    = -4121&lt;br /&gt;xlToLeft  = -4159&lt;br /&gt;xlToRight = -4161&lt;br /&gt;xlUp      = -4162&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Saving to CSV (or other formats)&lt;br /&gt;&lt;br /&gt;Note that Excel can show quite a lot of warnings / confirm request. To supress these:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;excel.DisplayAlerts = false&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Then:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;workbook.SaveAs 'myfile.csv', xlCSV&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;where xlCSV = 6.&lt;br /&gt;&lt;br /&gt;Here are some common file formats:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xlCSV=6&lt;br /&gt;xlCSVMac=22&lt;br /&gt;xlCSVMSDOS=24&lt;br /&gt;xlCSVWindows=23&lt;br /&gt;xlCurrentPlatformText=-4158&lt;br /&gt;xlExcel9795=43&lt;br /&gt;xlTextMSDOS=21&lt;br /&gt;xlTextPrinter=36&lt;br /&gt;xlTextWindows=20&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;See also: ScriptingOutlook, ScriptingAccess&lt;br /&gt;&lt;br /&gt;- How about OpenOffice and Ruby scripting? Anything in this area? The examples all seem to rely on&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;and I believe this will only work on Windows OSes.&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/2283873733770139226/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=2283873733770139226' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/2283873733770139226?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/2283873733770139226'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/01/rubygarden-archives-scripting-excel.html' title='RubyGarden Archives: Scripting Excel'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-4023312061507308473</id><published>2008-01-20T11:53:00.000-05:00</published><updated>2008-01-31T08:40:38.031-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-01-31T08:40:38.031-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='rubygarden'/><category scheme='http://www.blogger.com/atom/ns#' term='access'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>RubyGarden Archives: Scripting Access</title><content type='html'>&lt;span style="font-style:italic;"&gt;&lt;span style="font-weight:bold;"&gt;Editor's Note: &lt;/span&gt;Once upon a time, there was a website named RubyGarden.org, which contained many helpful links and articles. That website has recently disappeared. The following "Scripting Access" article was salvaged &lt;a href="http://www.google.com/search?q=cache:Uy0oqGPuJhcJ:rubygarden.org/Ruby/page/show/ScriptingAccess+scriptingaccess+site:rubygarden.org&amp;hl=en&amp;ct=clnk&amp;cd=1&amp;gl=us"&gt;from the Google cache&lt;/a&gt; and is provided here in its entirety.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;&lt;br /&gt;Here is a quick example on getting data from a Microsoft Access database.&lt;br /&gt;&lt;br /&gt;Recordset with a connection, using JET. This works, but for some reason the memory requirements were large. Using an ODBC source for the same data seems to use almost no memory!&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require "win32ole"&lt;br /&gt;&lt;br /&gt;conn = WIN32OLE.new("ADODB.Connection")&lt;br /&gt;conn["Provider"] = "Microsoft.Jet.OLEDB.4.0"&lt;br /&gt;conn.Open('c:\ruby\dev\calldata.mdb')&lt;br /&gt;&lt;br /&gt;rs = conn.Execute("select date, dialednumber, extension, cost from&lt;br /&gt;    callrecords where call = 2 and date &gt;=#01-jan-2005#")&lt;br /&gt;rs.getrows.each do |row|&lt;br /&gt;    puts row&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;conn.Close&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Recordset without a connection, using JET. This works, but for some reason the memory requirements were large. Using an ODBC source for the same data seems to use almost no memory!&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require "win32ole"&lt;br /&gt;&lt;br /&gt;rs = WIN32OLE.new("ADODB.recordset")&lt;br /&gt;&lt;br /&gt;qry = "select date, dialednumber, extension, cost from callrecords where&lt;br /&gt;    call = 2 and date &gt;=#01-jan-2005#"&lt;br /&gt;constr = 'Provider=Microsoft.Jet.OLEDB.4.0;Data&lt;br /&gt;Source=c:\data\calldata.mdb'&lt;br /&gt;&lt;br /&gt;rs.open(qry,constr)&lt;br /&gt;&lt;br /&gt;rs.getrows.each do |row|&lt;br /&gt;    puts row&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Recordset without connection using an ODBC source. My program took about 28MB mem vs. 39MB for the JET version. The difference is massive when working with a lot of data Requires that you create the ODBC data source!&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require "win32ole"&lt;br /&gt;&lt;br /&gt;rs = WIN32OLE.new("ADODB.recordset")&lt;br /&gt;qry = "select date, dialednumber, extension, cost from callrecords where&lt;br /&gt;    call = 2 and date &gt;=#01-jan-2005#"&lt;br /&gt;rs.open(qry,"DSN=calldata;")&lt;br /&gt;&lt;br /&gt;rs.getrows.each do |row|&lt;br /&gt;    puts row&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here's a function you can drop at the top of your program that alters the definition of Object. It will work for loading access data into any object class that supports "&lt;&lt;" and "transpose" - such as Array. Transpose is required since the recordset comes back with the rows "rotated".&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;public&lt;br /&gt;def readMDB(qry,dsn)&lt;br /&gt;    rs = WIN32OLE.new("ADODB.recordset")&lt;br /&gt;    rs.open(qry,"DSN=#{dsn};")&lt;br /&gt;    rs.getrows.each do |row|&lt;br /&gt;        self &lt;&lt; row&lt;br /&gt;    end&lt;br /&gt;    self.transpose&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Usage example&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;qry = "select date, dialednumber, extension, cost from callrecords"&lt;br /&gt;dsn = "DSN=calldata;"&lt;br /&gt;&lt;br /&gt;a = []&lt;br /&gt;a.readMDB(qry, dsn)&lt;br /&gt;p a&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Question: Is there a way to use paramters on the query like the ones from DBI? E.g.: (note the '?')&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;select * from callrecords where call = ?&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/4023312061507308473/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=4023312061507308473' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/4023312061507308473?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/4023312061507308473'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/01/rubygarden-archives-scripting-access.html' title='RubyGarden Archives: Scripting Access'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1807503088540316332</id><published>2008-01-13T10:50:00.000-05:00</published><updated>2008-01-31T08:38:38.688-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-01-31T08:38:38.688-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='outlook'/><category scheme='http://www.blogger.com/atom/ns#' term='rubygarden'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>RubyGarden Archives: Scripting Outlook</title><content type='html'>&lt;span style="font-style:italic;"&gt;&lt;span style="font-weight:bold;"&gt;Editor's Note: &lt;/span&gt;Once upon a time, there was a website named RubyGarden.org, which contained many helpful links and articles. The website has recently dropped off the face of the earth. The following "Scripting Outlook" article was salvaged &lt;a href="http://www.google.com/search?q=cache:mLr7PP6dna0J:rubygarden.org/Ruby/page/show/ScriptingOutlook+scriptingoutlook+site:rubygarden.org&amp;hl=en&amp;ct=clnk&amp;cd=1&amp;gl=us"&gt;from the Google cache&lt;/a&gt; and is provided here in its entirety.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;&lt;br /&gt;With some help of the the ScriptingExcel page and the Office helpfiles mentioned there a short script to list your Outlook messages. The script should be pretty easy to expand. One method that was really helpfull in figuring out what is possible is:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;OLEObject.ole_methods&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;MarkJanssen&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;br /&gt;myApp = WIN32OLE::new("outlook.Application")&lt;br /&gt;&lt;br /&gt;# load Outlook OLE constants&lt;br /&gt;&lt;br /&gt;class OutlookConst&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;WIN32OLE.const_load(myApp, OutlookConst)&lt;br /&gt;&lt;br /&gt;p "OlMailItem = #{OutlookConst::OlMailItem}"&lt;br /&gt;&lt;br /&gt;ns = myApp.GetNameSpace("MAPI")&lt;br /&gt;#ns.Logon # uncomment for online usage&lt;br /&gt;folders = ns.Folders&lt;br /&gt;&lt;br /&gt;new_messages = 0&lt;br /&gt;&lt;br /&gt;folders.each { &lt;br /&gt;    | folder |&lt;br /&gt;     puts "+" + folder.Name&lt;br /&gt;&lt;br /&gt;    begin&lt;br /&gt;        folder.Folders.each {&lt;br /&gt;            | folder |&lt;br /&gt;            # puts " " + folder.Name&lt;br /&gt;            if ["Inbox","Sent Items"].member? folder.Name&lt;br /&gt;                folder.Items.each { &lt;br /&gt;                    | msg |&lt;br /&gt;                    if msg['UnRead']&lt;br /&gt;                        new_messages += 1&lt;br /&gt;                    end&lt;br /&gt;                    puts "  From: " + msg['SenderName']&lt;br /&gt;                    puts "  Subject: " + msg['Subject']&lt;br /&gt;                }&lt;br /&gt;            end&lt;br /&gt;        }&lt;br /&gt;    rescue&lt;br /&gt;        &lt;br /&gt;         puts " Unable to open"&lt;br /&gt;    end&lt;br /&gt;}&lt;br /&gt;puts "You have #{new_messages} new message(s)"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Glauber 2003-10-09:&lt;br /&gt;&lt;br /&gt;    * Here's a quick tip that would have saved me some time: When iterating over a list of Outlook items (e.g.: MailItems) in order to move or delete some of them, you must do so backwards (GetLast... GetPrevious... GetPrevious...). In other words, don't attempt to access an item that's after the one you deleted or moved.&lt;br /&gt;    * Here's another tip: there's no good way to find the From Internet email address of a message. Most times, creating a reply and extracting the first recipient for it will work, but sometimes not (it may give you an Exchange X.400 address instead of what you're looking for). Don't send the reply, discard it.&lt;br /&gt;&lt;br /&gt;&lt;hr&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1807503088540316332/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1807503088540316332' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1807503088540316332?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1807503088540316332'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/01/rubygarden-archives-scripting-outlook.html' title='RubyGarden Archives: Scripting Outlook'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-4590999204934395719</id><published>2008-01-03T08:25:00.000-05:00</published><updated>2008-01-03T08:44:06.563-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-01-03T08:44:06.563-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='dotnet'/><title type='text'>IronRuby, Ruby.NET, and the Differences</title><content type='html'>Following on the heels of &lt;a href="http://on-ruby.blogspot.com/2007/12/rubynetironruby-interview-with-m-david.html"&gt;Pat Eyler's interview of M. David Peterson&lt;/a&gt;, Mr. Peterson has posted an article entitled &lt;span style="font-style:italic;"&gt;&lt;a href="http://www.oreillynet.com/windows/blog/2008/01/rubynet_vs_ironruby_whats_the.html"&gt;Ruby.NET vs. IronRuby: What's The Difference?&lt;/a&gt;&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;Microsoft's John Lam has posted a follow-up &lt;a href="http://www.iunknown.com/2008/01/ironruby-vs-rub.html"&gt;on his blog&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;It's good to see increased public discussion of these two important projects.&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2008/01/ironruby-rubynet-and-differences.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/4590999204934395719/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=4590999204934395719' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/4590999204934395719?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/4590999204934395719'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/01/ironruby-rubynet-and-differences.html' title='IronRuby, Ruby.NET, and the Differences'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-8776493168859603736</id><published>2008-01-02T19:37:00.000-05:00</published><updated>2008-01-03T08:08:23.013-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2008-01-03T08:08:23.013-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='excel'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Parsing Spreadsheets with the Roo Gem</title><content type='html'>I've &lt;a href="http://rubyonwindows.blogspot.com/search/label/excel"&gt;talked at length&lt;/a&gt; about using the &lt;span style="font-weight:bold;"&gt;win32ole&lt;/span&gt; library to automate Microsoft Excel. But there are alternatives for accessing data in Excel spreadsheets -- some of which don't even require Excel to be installed. One of these is the &lt;a href="http://roo.rubyforge.org/"&gt;roo&lt;/a&gt; gem, which allows you to extract data from Excel, OpenOffice and Google spreadsheets. Roo provides read-only access to Excel and OpenOffice spreadsheets, but both read and write access to Google spreadsheets.&lt;br /&gt;&lt;br /&gt;To install the roo gem, including its dependencies, open a console window and enter:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;gem install roo -y&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Require the roo library in your script:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'roo'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To parse an Excel worksheet, we first create an instance of the Excel workbook object by calling the &lt;span style="font-weight: bold;"&gt;Excel.new&lt;/span&gt; method and passing it the path and filename:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xl = Excel.new('C:\my_workbook.xls')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The next step is to define which worksheet in the workbook we will be working with. We do this by setting the &lt;span style="font-weight: bold;"&gt;Excel.default_sheet&lt;/span&gt; value to one of the worksheets in the &lt;span style="font-weight: bold;"&gt;Excel.sheets&lt;/span&gt; array:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;xl.default_sheet = xl.sheets[0]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To extract the value from a particular cell, call the &lt;span style="font-weight:bold;"&gt;cell&lt;/span&gt; method, passing it the row number and either the column number or column letter. Examples:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;val = xl.cell(3, 5)&lt;br /&gt;val = xl.cell(3, 'E')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The &lt;span style="font-weight:bold;"&gt;row&lt;/span&gt; method returns an array of values from the specified row number, so...&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;values = xl.row(3)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;...returns the values from the third row.&lt;br /&gt;&lt;br /&gt;Similarly, the &lt;span style="font-weight:bold;"&gt;column&lt;/span&gt; method returns an array of values from a column:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;values = xl.column(5)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Get the full details from the &lt;a href="http://roo.rubyforge.org/"&gt;roo homepage&lt;/a&gt;, and the &lt;a href="http://roo.rubyforge.org/rdoc/index.html"&gt;roo Rdoc page&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;That's all for now. As always, feel free to post a comment here or email me with questions, comments, or suggestions.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2008/01/parsing-spreadsheets-with-roo-gem.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/8776493168859603736/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=8776493168859603736' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/8776493168859603736?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/8776493168859603736'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2008/01/parsing-spreadsheets-with-roo-gem.html' title='Parsing Spreadsheets with the Roo Gem'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-3638340087838876816</id><published>2007-12-28T12:06:00.000-05:00</published><updated>2007-12-28T14:27:00.538-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-12-28T14:27:00.538-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='dotnet'/><title type='text'>Ruby.NET/IronRuby Interview With M. David Peterson</title><content type='html'>Over on the &lt;span style="font-weight:bold;"&gt;On Ruby&lt;/span&gt; blog, &lt;a href="http://on-ruby.blogspot.com/2007/12/rubynetironruby-interview-with-m-david.html"&gt;Pat Eyler interviews M. David Peterson&lt;/a&gt; about the &lt;a href="http://rubydotnet.googlegroups.com/web/Home.htm"&gt;Ruby.NET&lt;/a&gt; project. Peterson comments on the relationships between Ruby.NET, &lt;a href="http://en.wikipedia.org/wiki/IronRuby"&gt;IronRuby&lt;/a&gt;, Microsoft, and the larger Ruby community. Check it out.</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/3638340087838876816/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=3638340087838876816' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/3638340087838876816?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/3638340087838876816'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/12/rubynetironruby-interview-with-m-david.html' title='Ruby.NET/IronRuby Interview With M. David Peterson'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-7932633991979857459</id><published>2007-12-06T08:22:00.000-05:00</published><updated>2007-12-06T08:56:07.184-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-12-06T08:56:07.184-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='outlook'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Automating Outlook with Ruby: Saving File Attachments</title><content type='html'>A while back, we looked at &lt;a href="http://rubyonwindows.blogspot.com/2007/08/automating-outlook-with-ruby-inbox.html"&gt;accessing the Outlook Inbox and managing messages&lt;/a&gt;. A reader recently asked how to iterate over the messages and save file attachments to their hard drive. Specifically, they wanted to save only those file attachments that exceeded 500k in size.&lt;br /&gt;&lt;br /&gt;In Outlook, a message (MailItem) object's file attachments are accessed via the &lt;span style="font-weight:bold;"&gt;Attachments &lt;/span&gt;collection:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;message.Attachments.each do |attachment|&lt;br /&gt;    # Do something here&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The Attachment object has few properties and methods, but one you will use is the FileName property, which returns the, uh, filename.&lt;br /&gt;&lt;br /&gt;To save the attachment, call its &lt;span style="font-weight:bold;"&gt;SaveAsFile &lt;/span&gt;method, passing it a path and filename:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;attachment.SaveAsFile("c:\\attachments\\#{attachment.FileName}")&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The attachment object does not offer a method/property for determining the file size. If you were looking to save only files of a certain size, you could save the file, then check the saved file's size and delete it if necessary. This is not optimal, but it does the trick.&lt;br /&gt;&lt;br /&gt;So, putting this all together, we'd have something like the following code which iterates over your Inbox messages and saves all attachments of 500,000 bytes or larger:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;br /&gt;outlook = WIN32OLE.new('Outlook.Application')&lt;br /&gt;mapi = outlook.GetNameSpace('MAPI')&lt;br /&gt;inbox = mapi.GetDefaultFolder(6)&lt;br /&gt;inbox.Items.each do |message|&lt;br /&gt;    message.Attachments.each do |attachment|&lt;br /&gt;        filename = "c:\\attachments\\#{attachment.FileName}"&lt;br /&gt;        attachment.SaveAsFile(filename)           &lt;br /&gt;        File.delete(filename) if File.size(filename) &lt; 500000&lt;br /&gt;    end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That's our show for today. Questions? Comments? Suggestions? Post a comment here or send me an email.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2007/12/automating-outlook-with-ruby-saving.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/7932633991979857459/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=7932633991979857459' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/7932633991979857459?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/7932633991979857459'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/12/automating-outlook-with-ruby-saving.html' title='Automating Outlook with Ruby: Saving File Attachments'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-3587521183955310938</id><published>2007-12-02T15:42:00.000-05:00</published><updated>2007-12-02T15:51:59.209-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-12-02T15:51:59.209-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><category scheme='http://www.blogger.com/atom/ns#' term='dotnet'/><title type='text'>The Ruby.NET Compiler: A Little Love</title><content type='html'>Amidst all the &lt;a href="http://en.wikipedia.org/wiki/IronRuby"&gt;IronRuby &lt;/a&gt;hype, you could be forgiven if you didn't hear mention of the &lt;a href="http://rubydotnet.googlegroups.com/web/Home.htm"&gt;Ruby.NET Compiler&lt;/a&gt;. But if you use Ruby on Windows -- and you probably do if you're reading this blog -- you owe it to yourself to at least be aware of the work that Wayne Kelly and friends have been doing.&lt;br /&gt;&lt;br /&gt;To quote the Ruby.NET page:&lt;br /&gt;&lt;blockquote&gt;Ruby.NET is a compiler that translates Ruby source code into .NET intermediate code. This allows components implemented using the Ruby language to:&lt;br /&gt;&lt;br /&gt;    * Natively execute on the .NET platform&lt;br /&gt;    * Be linked with third party components developed using other .NET languages such as C#.&lt;br /&gt;    * Utilize the extensive resources of the .NET platform including visual design and debugging tools, the security framework and an extensive collection of class libraries used, for example, to create Windows forms, web and database applications. &lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Ruby.NET version 0.9 was released a couple weeks ago and can be installed via a binary installer from &lt;a href="http://rubydotnetcompiler.googlecode.com/files/Ruby.NET-0.9.0.msi"&gt;here&lt;/a&gt;. It requires the Microsoft .Net Framework version 2.0. &lt;br /&gt;&lt;br /&gt;There's an optional Visual Studio integration package, which requires &lt;a href="http://www.microsoft.com/downloads/details.aspx?familyid=51A5C65B-C020-4E08-8AC0-3EB9C06996F4&amp;displaylang=en"&gt;Visual Studio 2005 SDK version 4.0&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I've just started tinkering with this, so I can't provide any meaningful analysis or instruction on it yet. But I like the possibilities that it presents...&lt;br /&gt;&lt;br /&gt;* Compile your code to a .Net executable&lt;br /&gt;* Use the .NET framework's Forms library for your GUI&lt;br /&gt;* Leverage the vast array of .NET framework libraries&lt;br /&gt;* Work is currently underway to port the win32ole library to Ruby.NET&lt;br /&gt;&lt;br /&gt;I'd like to see more documentation and examples, including Windows forms code samples. If you have Ruby.NET examples you would like to share, feel free to email them to me or post in the comments.&lt;br /&gt;&lt;br /&gt;There's also a Ruby.NET Compiler Discussion group &lt;a href="http://groups.google.com/group/RubyDOTNET/topics"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;So check it out and maybe, as Antonio Cangiano recommends, &lt;a href="http://antoniocangiano.com/2007/11/23/give-rubynet-09-some-love/"&gt;give Ruby.NET some love&lt;/a&gt;. I think this is a project that deserves much more attention.&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2007/12/rubynet-compiler-little-love.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/3587521183955310938/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=3587521183955310938' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/3587521183955310938?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/3587521183955310938'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/12/rubynet-compiler-little-love.html' title='The Ruby.NET Compiler: A Little Love'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-3663007481825289936</id><published>2007-11-12T19:51:00.000-05:00</published><updated>2007-11-14T22:09:27.384-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-11-14T22:09:27.384-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='word'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Find &amp; Replace with MS Word</title><content type='html'>While browsing through some &lt;a href="http://snippets.dzone.com/tags/ruby"&gt;DZone Ruby Snippets&lt;/a&gt;, I came across &lt;a href="http://snippets.dzone.com/posts/show/4747"&gt;this nice little example&lt;/a&gt; of using Ruby to automate Find &amp; Replace in Microsoft Word, compliments of &lt;a href="http://snippets.dzone.com/user/timmorgan"&gt;Tim Morgan&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You could use such a snippet as part of a mail-merge type solution. To use it, create a form letter in a Word document, with bracketed placeholders where the actual values are to be inserted. Example:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;Dear [name],&lt;br /&gt;&lt;br /&gt;On [date] account [account_number] was charged a [amount] fee.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Let's take a walk through the code...&lt;br /&gt;&lt;br /&gt;Load the &lt;span style="font-weight:bold;"&gt;win32ole&lt;/span&gt; library:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'win32ole'&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Launch Microsoft Word:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;word = WIN32OLE.new('Word.Application')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Open the template document:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc = word.Documents.Open('c:\file_to_open.doc')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Iterate over a hash containing keys and values. Each key is the placeholder code and the corresponding value is the text to insert:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;{&lt;br /&gt;  'name' =&gt; 'Tim Morgan',&lt;br /&gt;  'date' =&gt; Date.today.strftime('%B %d, %Y'),&lt;br /&gt;  'account_number' =&gt; '123456',&lt;br /&gt;  'amount' =&gt; '$45.76'&lt;br /&gt;}.each do |key, value|&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Start the search at the beginning of the document:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;word.Selection.HomeKey(unit=6)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Grab a reference to the &lt;span style="font-weight:bold;"&gt;Find &lt;/span&gt;object:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;find = word.Selection.Find&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Set the Find object's text string (the hash key) to locate, surrounded by brackets:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;find.Text = "[#{key}]"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;For each occurrence of the string found (via the Find object's &lt;span style="font-weight:bold;"&gt;Execute &lt;/span&gt;method), insert the replacement text (the hash value):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;while word.Selection.Find.Execute&lt;br /&gt;  word.Selection.TypeText(text=value)&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Save the document with a new name:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.SaveAs('c:\output_file.doc')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Close the document:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;doc.Close&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The example above shows the hash hard-coded in the script, but you could build on this to load an array of hashes from a text or YAML file, Excel worksheet, or database table.&lt;br /&gt;&lt;br /&gt;My thanks to Tim Morgan, who posted the original snippet on Dzone, and to you, for stopping by to read it!</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/3663007481825289936/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=3663007481825289936' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/3663007481825289936?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/3663007481825289936'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/11/find-replace-with-ms-word.html' title='Find &amp; Replace with MS Word'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-7822790394707472270</id><published>2007-11-11T17:53:00.001-05:00</published><updated>2007-11-15T08:26:07.713-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-11-15T08:26:07.713-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='wxruby'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='gui'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Getting Started with the wxRuby GUI Toolkit</title><content type='html'>Many readers have asked "What is the best GUI toolkit?". There is no single answer to this question, and I won't try to lobby for my GUI of choice. Use whatever works best for you and your users.&lt;br /&gt;&lt;br /&gt;I use the wxRuby library. It's cross-platform, provides a native look-and-feel, and is easy to install (via a gem) and distribute with your application (via RubyScript2Exe). Further features can be found in the wxRuby wiki &lt;a href="http://wxruby.rubyforge.org/wiki/wiki.pl?IntroductionToWxRuby"&gt;here&lt;/a&gt;. wxRuby is the Ruby interface to wxWidgets, a very stable and &lt;a href="http://en.wikipedia.org/wiki/WxWidgets#Software_using_wxWidgets"&gt;widely-used&lt;/a&gt; widget toolkit.&lt;br /&gt;&lt;br /&gt;Installing wxRuby is simple using RubyGems:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;gem install wxruby&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Though you can use a GUI designer, creating most forms "by hand" is probably simpler than you suspect. A useful wxRuby user interface can be created in less than 50 lines of code, as we shall see...&lt;br /&gt;&lt;br /&gt;Let's create a simple form with a label, text box, combo box, and button. We start by requiring the wx library and including the Wx namespace:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;require 'wx'&lt;br /&gt;include Wx&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We create a new class which inherits from the &lt;span style="font-weight:bold;"&gt;Wx::Frame&lt;/span&gt; class and includes an &lt;span style="font-weight:bold;"&gt;initialize&lt;/span&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class MyFrame &lt; Frame&lt;br /&gt;  def initialize()&lt;br /&gt;    super(nil, -1, 'My Frame Title')&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The Frame class' &lt;span style="font-weight:bold;"&gt;super&lt;/span&gt; constructor method takes the following arguments (all but Parent are optional):&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Parent&lt;/span&gt;: The window parent. This may be NULL. If it is non-NULL, the frame will always be displayed on top of the parent window on Windows.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;ID&lt;/span&gt;: The window identifier. It may take a value of -1 to indicate a default value.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Title&lt;/span&gt;: The caption to be displayed on the frame’s title bar.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Position&lt;/span&gt;: The window position. A value of (-1, -1) indicates a default position, chosen by either the windowing system or Widgets, depending on platform.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Size&lt;/span&gt;: The window size. A value of (-1, -1) indicates a default size, chosen by either the windowing system or Widgets, depending on platform.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Style&lt;/span&gt;: The window style (ie, if the minimize, maximize, and close boxes appear on the Frame).&lt;br /&gt;&lt;br /&gt;Further details on the Frame class can be found in the wxRuby wiki &lt;a href="http://wxruby.rubyforge.org/doc/frame.html"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Next, let's add the code to the &lt;span style="font-weight:bold;"&gt;initialize&lt;/span&gt; method to create a panel, which will contain the other controls:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;@my_panel = Panel.new(self)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The &lt;span style="font-weight:bold;"&gt;self&lt;/span&gt; passed to the &lt;span style="font-weight:bold;"&gt;new&lt;/span&gt; constructor is a reference to the Frame object, which we are passing as the parent of the Panel object.&lt;br /&gt;&lt;br /&gt;Next, we'll create a variety of controls, passing the newly created &lt;span style="font-weight:bold;"&gt;@my_panel&lt;/span&gt; as the parent of each control:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;@my_label = StaticText.new(@my_panel, -1, 'My Label Text', &lt;br /&gt;  DEFAULT_POSITION, DEFAULT_SIZE, ALIGN_CENTER)&lt;br /&gt;@my_textbox = TextCtrl.new(@my_panel, -1, 'Default Textbox Value')&lt;br /&gt;@my_combo = ComboBox.new(@my_panel, -1, 'Default Combo Text', &lt;br /&gt;  DEFAULT_POSITION, DEFAULT_SIZE, ['Item 1', 'Item 2', 'Item 3'])&lt;br /&gt;@my_button = Button.new(@my_panel, -1, 'My Button Text')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;I recommend assigning all your form controls to instance variables. This is the reason for the '@' preceding each control variable name.&lt;br /&gt;&lt;br /&gt;We want to bind the button click to a "my_button_click" method which we will add to this class later. We do with the &lt;span style="font-weight:bold;"&gt;evt_button&lt;/span&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;evt_button(@my_button.get_id()) { |event| my_button_click(event)}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now we'll proceed to the layout: arranging the controls in the Panel. We'll do this using a &lt;a href="http://wxruby.rubyforge.org/doc/boxsizer.html"&gt;BoxSizer&lt;/a&gt;, which we'll have arrange the controls vertically:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;@my_panel_sizer = BoxSizer.new(VERTICAL)&lt;br /&gt;@my_panel.set_sizer(@my_panel_sizer)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Next we add each control to the panel's sizer by calling the sizer's &lt;a href="http://wxruby.rubyforge.org/doc/sizer.html#Sizer_add"&gt;add&lt;/a&gt; method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;@my_panel_sizer.add(@my_label, 0, GROW|ALL, 2)&lt;br /&gt;@my_panel_sizer.add(@my_textbox, 0, GROW|ALL, 2)&lt;br /&gt;@my_panel_sizer.add(@my_combo, 0, GROW|ALL, 2)&lt;br /&gt;@my_panel_sizer.add(@my_button, 0, GROW|ALL, 2)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;See the &lt;a href="http://wxruby.rubyforge.org/doc/sizer.html#Sizer_add"&gt;Sizer.Add documentation&lt;/a&gt; for an explanation of the various parameters.&lt;br /&gt;&lt;br /&gt;Our last line of code in the &lt;span style="font-weight:bold;"&gt;initialize&lt;/span&gt; method makes the frame visible:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;show()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Don't forget to add the my_button_click method that is called by the button click:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;def my_button_click(event)&lt;br /&gt;    # Your code here&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That concludes our MyFrame class. Now we want to create a MyApp class that will call our MyFrame class:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class MyApp &lt; App&lt;br /&gt;  def on_init&lt;br /&gt;    MyFrame.new&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, we create a new instance of our MyApp class and call its main_loop method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;MyApp.new.main_loop()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;View the complete code &lt;a href="http://pastie.caboo.se/116661"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;There you have it. A complete, but simple, wxRuby form. It's not much to look at...&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_9LH5hSdA01Y/RzeQmR7MOjI/AAAAAAAAABc/D06cvFeIZWw/s1600-h/wxForm1.jpg"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://3.bp.blogspot.com/_9LH5hSdA01Y/RzeQmR7MOjI/AAAAAAAAABc/D06cvFeIZWw/s400/wxForm1.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5131729287733066290" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;...but it demonstrates the basics and we'll enhance it shortly.&lt;br /&gt;&lt;br /&gt;Soon, we'll cover related topics: dressing up our GUI a little, using the wxSugar extensions, using a Forms designer such as &lt;a href="http://www.wxformbuilder.org/"&gt;wxFormBuilder&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Questions? Comments? Suggestions? Post a comment here or send me an email message.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2007/11/getting-started-with-wxruby-gui-toolkit.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/7822790394707472270/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=7822790394707472270' title='14 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/7822790394707472270?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/7822790394707472270'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/11/getting-started-with-wxruby-gui-toolkit.html' title='Getting Started with the wxRuby GUI Toolkit'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_9LH5hSdA01Y/RzeQmR7MOjI/AAAAAAAAABc/D06cvFeIZWw/s72-c/wxForm1.jpg' height='72' width='72'/><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>14</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1675333968321804097</id><published>2007-11-01T08:07:00.000-05:00</published><updated>2007-11-01T07:37:55.925-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-11-01T07:37:55.925-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='rubyconf'/><title type='text'>RubyConf 2007</title><content type='html'>I'll be attending my first RubyConf here in Charlotte this weekend and there's a lot of great stuff on &lt;a href="http://rubyconf.org/agenda.html"&gt;the agenda&lt;/a&gt;. In addition, I learned from Bill Plummer that Microsoft is hosting an event Thursday night with John Lam talking about IronRuby. Unfortunately, I will have to miss it but I hope that John will duplicate the best parts of it in his RubyConf talk Saturday morning. Charlie Nutter follows that with his JRuby presentation. Of course, "Writing Client and Desktop Applications in Ruby" by Bruce Williams also caught my eye, as I am a desktop apps developer.&lt;br /&gt;&lt;br /&gt;There's been a bit of a lull in my blog postings (and replies to readers) of late, as I've been swamped with work, but I plan to post more frequently going forward. I have a few topics suggested by readers, but welcome any comments, questions, or suggestions you may have. I still feel that Windows is Ruby's red-headed stepchild, with far more potential than the attention given to it. That may change (somewhat) in the future as projects such as IronRuby and the Ruby.Net compiler mature.&lt;br /&gt;&lt;br /&gt;And if you're at RubyConf, stop by and say 'Hey!'</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1675333968321804097/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1675333968321804097' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1675333968321804097?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1675333968321804097'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/11/rubyconf-2007.html' title='RubyConf 2007'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-1749888690749898683</id><published>2007-10-21T16:35:00.000-05:00</published><updated>2007-10-21T15:41:49.734-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-10-21T15:41:49.734-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='wxruby'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='gui'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Windows XP Visual Style Controls with wxRuby</title><content type='html'>wxRuby uses the native Microsoft Windows common controls when displaying widgets on a Windows OS. You may have noticed, however, that the form controls do not have the Windows XP look and feel. They have the flat and 2-dimensional look of earlier Windows versions...&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_9LH5hSdA01Y/RxuzoqDrdDI/AAAAAAAAABM/iabC79KhVC8/s1600-h/wxForm5.jpg"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://3.bp.blogspot.com/_9LH5hSdA01Y/RxuzoqDrdDI/AAAAAAAAABM/iabC79KhVC8/s320/wxForm5.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5123886512129930290" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;...rather than having the rounded corners and 3-dimensional look of Windows XP...&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_9LH5hSdA01Y/Rxuzz6DrdEI/AAAAAAAAABU/GSAX5noX3fA/s1600-h/wxForm6.jpg"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://4.bp.blogspot.com/_9LH5hSdA01Y/Rxuzz6DrdEI/AAAAAAAAABU/GSAX5noX3fA/s320/wxForm6.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5123886705403458626" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Note, among other things, the "glowing button" effect when the mouse hovered over the "Get Films Data" button.&lt;br /&gt;&lt;br /&gt;This is because Windows XP comes with both version 5 and version 6 of the Common Controls, but unless specifically instructed to use version 6, it will default to using version 5 controls.&lt;br /&gt;&lt;br /&gt;So, how do you instruct Windows to use the version 6 controls for your wxRuby GUI application? By including a simple manifest XML file with your application.&lt;br /&gt;&lt;br /&gt;Copy the following text into a new text file. Save the file as "rubyw.exe.manifest" in your ruby/bin folder, the same folder that contains rubyw.exe. You might also save a copy to the same folder as "ruby.exe.manifest".&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&amp;gt;&lt;br /&gt;    &amp;lt;assemblyIdentity version="1.8.6.0" processorArchitecture="X86" &lt;br /&gt;        name="Microsoft.Winweb.Ruby" type="win32"/&amp;gt;&lt;br /&gt;        &amp;lt;description&amp;gt;Ruby interpreter&amp;lt;/description&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;         &amp;lt;dependentAssembly&amp;gt;&lt;br /&gt;                &amp;lt;assemblyIdentity &lt;br /&gt;                    type="win32" &lt;br /&gt;                    name="Microsoft.Windows.Common-Controls" &lt;br /&gt;                    version="6.0.0.0" &lt;br /&gt;                    processorArchitecture="X86" &lt;br /&gt;                    publicKeyToken="6595b64144ccf1df" &lt;br /&gt;                    language="*"&lt;br /&gt;                /&amp;gt;&lt;br /&gt;        &amp;lt;/dependentAssembly&amp;gt;&lt;br /&gt;    &amp;lt;/dependency&amp;gt;&lt;br /&gt;&amp;lt;/assembly&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When the ruby.exe or rubyw.exe interpreter is run, Windows will look for a manifest file matching the program name in the same folder. When it finds our manifest file, it will then use the version 6 controls, as defined in the &lt;span style="font-weight:bold;"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; section of the manifest.&lt;br /&gt;&lt;br /&gt;We place the file in our c:\ruby\bin directory because that is where ruby.exe and rubyw.exe are located. We name the file ruby.exe.manifest or rubyw.exe.manifest to match the name of the interpreter being run.&lt;br /&gt;&lt;br /&gt;If you are compiling your application with RubyScript2Exe, copy the manifest file into the folder with your script, then embed the manifest file in your compiled executable using the &lt;span style="font-weight:bold;"&gt;RUBYSCRIPT2EXE.bin&lt;/span&gt; statement:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;RUBYSCRIPT2EXE.bin = ["rubyw.exe.manifest"]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When your compiled executable is run, your manifest file will be extracted to the same temporary "/bin" folder as the rubw.exe (or ruby.exe) interpreter.&lt;br /&gt;&lt;br /&gt;Questions? Comments? Suggestions? Post a comment here or send me email.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2007/10/windows-xp-visual-style-controls-with.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/1749888690749898683/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=1749888690749898683' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/1749888690749898683?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/1749888690749898683'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/10/windows-xp-visual-style-controls-with.html' title='Windows XP Visual Style Controls with wxRuby'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_9LH5hSdA01Y/RxuzoqDrdDI/AAAAAAAAABM/iabC79KhVC8/s72-c/wxForm5.jpg' height='72' width='72'/><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-284600789737488130.post-525031493600314925</id><published>2007-10-07T17:25:00.000-05:00</published><updated>2007-10-07T17:26:04.669-05:00</updated><app:edited xmlns:app='http://purl.org/atom/app#'>2007-10-07T17:26:04.669-05:00</app:edited><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><category scheme='http://www.blogger.com/atom/ns#' term='windows'/><title type='text'>Hide &amp; Seek: Using NTFS Alternate Data Streams</title><content type='html'>The NTFS file system utilized by Windows (NT and later) includes support for Alternate Data Streams (ADS). ADS was implemented in NTFS to provide compatibility with Apple's Macintosh Hierarchical File System (HFS), which uses resource forks to store icons and other information for a file, but such streams can be used to store any type of data that a normal file would store. You could, for example, use an ADS to store metadata about the file to which the ADS is attached. You could even store binary data inside an ADS. This might be useful for storing backup versions of a file before making changes.&lt;br /&gt;&lt;br /&gt;To work with an alternate data stream for a file, simply append a colon and the stream name to the filename. The following code appends a stream named 'stream1' to file.txt:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;open('file.txt:stream1', 'w') do |f|&lt;br /&gt;    f.puts('Your Text Here')&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If file.txt did not exist, it would have been created and would be 0 bytes in size, since no data was written to the main stream. But you can append streams to an existing file, as well. The reported size of the file would not change, though it now includes alternate data streams of embedded data.  &lt;br /&gt;&lt;br /&gt;Reading from a stream is just as simple:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;stream_text = open('file.txt:stream1').read&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Alternate data streams can also be used for storing binary data, including executables:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;bytes = open('MyApp.exe', 'rb').read&lt;br /&gt;open('file.txt:MyApp.exe', 'wb') do |f|&lt;br /&gt;    f.write(bytes)&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;bytes = open('file.txt:MyApp.exe','rb').read&lt;br /&gt;open('MyApp2.exe', 'wb') do |f|&lt;br /&gt;    f.write(data)&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A file can contain multiple data streams, so you could, for example, include a data stream for text and another stream for binary data.&lt;br /&gt;&lt;br /&gt;Another possible use for ADS would be to create a backup of the file which could be restored later:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;def create_backup(filename)&lt;br /&gt;    open("#{filename}:backup", "wb") do |f|&lt;br /&gt;        f.write(open(filename, "rb").read)&lt;br /&gt;    end&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;def restore_backup(filename)&lt;br /&gt;    if not File.exist?("#{filename}:backup")&lt;br /&gt;        puts("Backup stream does not exist!")&lt;br /&gt;        return&lt;br /&gt;    end&lt;br /&gt;    backup = open("#{filename}:backup", "rb").read&lt;br /&gt;    open("#{filename}", "wb") do |f|&lt;br /&gt;        f.write(backup)&lt;br /&gt;    end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Note: &lt;/span&gt;A file's alternate data streams will be preserved on the NTFS disk, but would be stripped off of a file when copied to a non-NTFS disk, such as a flash drive or CD/DVD disk; or when a file is copied via ftp. For this reason you may not want to rely on alternate data streams for storing critical data.&lt;br /&gt;&lt;br /&gt;There you have it. Sound interesting? Further details on Alternate Data Streams can be found &lt;a href="http://www.wikistc.org/wiki/Alternate_data_streams"&gt;here&lt;/a&gt; and &lt;a href="http://www.bleepingcomputer.com/tutorials/tutorial25.html"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Thanks for stopping by!&lt;br /&gt;&lt;a href="http://digg.com/submit?phase=2&amp;url=http://rubyonwindows.blogspot.com/2007/10/hide-seek-using-ntfs-alternate-data.html"&amp;target="_blank"&gt;&lt;br /&gt;&lt;img border="0" alt="Digg my article" src="http://digg.com/img/badges/91x17-digg-button.gif"/&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/525031493600314925/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=284600789737488130&amp;postID=525031493600314925' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/284600789737488130/posts/default/525031493600314925?v=2'/><link rel='self' type='application/atom+xml' href='http://rubyonwindows.blogspot.com/feeds/posts/default/525031493600314925'/><link rel='alternate' type='text/html' href='http://rubyonwindows.blogspot.com/2007/10/hide-seek-using-ntfs-alternate-data.html' title='Hide &amp; Seek: Using NTFS Alternate Data Streams'/><author><name>David Mullet</name><uri>http://www.blogger.com/profile/05597492688893461137</uri><email>noreply@blogger.com</email></author><thr:total xmlns:thr='http://purl.org/syndication/thread/1.0'>1</thr:total></entry></feed>