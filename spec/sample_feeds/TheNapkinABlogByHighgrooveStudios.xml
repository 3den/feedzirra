<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/rss2full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">
  <channel>
    <title>The Napkin ~ A Blog By Highgroove Studios</title>
    <link>http://cleanair.highgroove.com/</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>The Napkin ~ A Blog By Highgroove Studios</description>
    <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" href="http://feeds.feedburner.com/cleanair" type="application/rss+xml" /><item>
      <title>James to headline MountainWest Ruby Conference 2009</title>
      <description>&lt;p&gt;Many critics are hailing &lt;i&gt;Little Big Planet&lt;/i&gt; as the video game of the year.  Its &amp;#8220;flexible, fun, and powerful&amp;#8221; level creator and sharing system has created an interactive platform never before seen in gaming.&lt;/p&gt;


	&lt;p&gt;But you don&amp;#8217;t need to tell our James Edward Gray II about it &amp;#8211; in March, at the &lt;a href="http://mtnwestrubyconf.org/2009/index"&gt;MountainWest Ruby Conference&amp;#8221;&lt;/a&gt; in Salt Lake City, he&amp;#8217;ll be giving a featured speech on how Ruby programmers can learn from &lt;i&gt;Little Big Planet&amp;#8217;s&lt;/i&gt; creative problem solving and code reading.  He&amp;#8217;ll also be discussing some of the most creative Ruby projects out there, showing how their developers build servers, optimize code, and more.&lt;/p&gt;


	&lt;p&gt;A Playstation 3 and advanced knowledge of Super Mario Brothers Level 1-1 is optional but encouraged for attendees of this talk.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=KUizHd.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=KUizHd.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=0HifmZ.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=0HifmZ.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/518970942" height="1" width="1"/&gt;</description>
      <pubDate>Fri, 16 Jan 2009 15:48:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2009/01/16/james-to-headline-mountainwest-ruby-conference-2009</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/518970942/james-to-headline-mountainwest-ruby-conference-2009</link>
      <category>Speaking</category>
      <category>Community</category>
      <category>Presentations</category>
      <category>Ruby on Rails</category>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/116</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2009%2F01%2F16%2Fjames-to-headline-mountainwest-ruby-conference-2009</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2009/01/16/james-to-headline-mountainwest-ruby-conference-2009</feedburner:origLink></item>
    <item>
      <title>Rack at the Atlanta Ruby Meetup</title>
      <description>&lt;p&gt;Come see Matt talk about the &lt;a href="http://rack.rubyforge.org/"&gt;Rack&lt;/a&gt; project, a minimal interface between webservers supporting Ruby and Ruby frameworks that&amp;#8217;s behind the new Rails Metal functionality.&lt;/p&gt;


	&lt;p&gt;He&amp;#8217;ll be going over Rack, and showing an example of a quick and dirty framework.  He may even show how we use Rack handler&amp;#8217;s to help handle &lt;a href="htp://scoutapp.com/"&gt;Scout&amp;#8217;s&lt;/a&gt; load.&lt;/p&gt;


Other topics include:
	&lt;ul&gt;
	&lt;li&gt;Weather Stuff from a developer at the Weather Channel&lt;/li&gt;
		&lt;li&gt;Rails Metal!&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Check out the &lt;a href="http://www.meetup.com/atlantaruby"&gt;Atlanta Ruby Meetup Group&lt;/a&gt; and the &lt;a href="http://www.meetup.com/atlantaruby/calendar/9317385/"&gt;January Meeting Event Details&lt;/a&gt; for more information.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=1esZ5r.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=1esZ5r.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=AR7zQ4.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=AR7zQ4.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/510369098" height="1" width="1"/&gt;</description>
      <pubDate>Mon, 12 Jan 2009 20:07:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2009/01/12/rack-at-the-atlanta-ruby-meetup</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/510369098/rack-at-the-atlanta-ruby-meetup</link>
      <category>Ruby on Rails</category>
      <category>Atlanta</category>
      <category>Speaking</category>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/111</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2009%2F01%2F12%2Frack-at-the-atlanta-ruby-meetup</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2009/01/12/rack-at-the-atlanta-ruby-meetup</feedburner:origLink></item>
    <item>
      <title>Merb Day and Highgroove</title>
      <description>&lt;p&gt;Check out what&amp;#8217;s going on with &lt;a href="http://blog.scoutapp.com/articles/2008/12/05/say-hey-at-merb-day"&gt;Scout&lt;/a&gt; and &lt;a href="http://atlanta.merbday.com"&gt;Merb&lt;/a&gt; in Atlanta this weekend!&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=LlWGO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=LlWGO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=eWQtO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=eWQtO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/475858105" height="1" width="1"/&gt;</description>
      <pubDate>Fri,  5 Dec 2008 11:56:39 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/12/05/merb-day-and-highgroove</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/475858105/merb-day-and-highgroove</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/109</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F12%2F05%2Fmerb-day-and-highgroove</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/12/05/merb-day-and-highgroove</feedburner:origLink></item>
    <item>
      <title>MerbCamp Registration Open</title>
      <description>&lt;p&gt;MerbCamp is the first official gathering for the &lt;a href="http://merbivore.com/"&gt;Merb&lt;/a&gt; community.&lt;/p&gt;


	&lt;p&gt;Our own Matt Todd is speaking on &amp;#8220;Going Beyond Web Sites with Merb&amp;#8221;&amp;#8212;where he&amp;#8217;ll talk about using Merb to do things other than just your run-of-the-mill web-sites&amp;#8212;things like APIs, Web Services, lightweight protocols, and making your grass greener.  Well, maybe not that last one.&lt;/p&gt;


	&lt;p&gt;You can Register at:&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://merbcamp.com/"&gt;http://merbcamp.com/&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=n5upL"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=n5upL" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=qtPlL"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=qtPlL" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/387940468" height="1" width="1"/&gt;</description>
      <pubDate>Tue,  9 Sep 2008 14:15:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/09/09/merbcamp-registration-open</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/387940468/merbcamp-registration-open</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/107</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F09%2F09%2Fmerbcamp-registration-open</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/09/09/merbcamp-registration-open</feedburner:origLink></item>
    <item>
      <title>Looking for insight? Skip the coffee</title>
      <description>&lt;style&gt;
blockquote { 
   padding : 3px; 
   margin-left: 3em; 
   margin-bottom:0.2em;
   background: #f9f9f9 none; 
   color: #000; 
   font-family:Georgia;
   line-height: 150%;
}
.credit { 
  text-align : right; 
  page-break-before: avoid;
  margin-bottom: 10px;
}
.credit small { font-size: 80%; } 
blockquote p { margin: 0; text-indent:1.5em; }

&lt;/style&gt;

	&lt;p&gt;It hurts &amp;#8211; it feels like giving up. You&amp;#8217;re stuck on a problem and do the last thing that makes sense &amp;#8211; stop thinking about it. And the minute you forgot about the problem the solution comes into focus. Sometimes it&amp;#8217;s a shower, for others it&amp;#8217;s a long walk or playing a video game.&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;&lt;a href="http://www.newyorker.com/reporting/2008/07/28/080728fa_fact_lehrer"&gt;The Eureka Hunt &amp;#8211; Why do good ideas come to us when they do?&lt;/a&gt;&lt;/em&gt;, an article by Jonah Lehrer published in the the July 28th issue of the &lt;a href="http://www.newyorker.com"&gt;New Yorker&lt;/a&gt;, covered scientific research on moments of insight. There were a couple nuggets on provoking insights:&lt;/p&gt;


	&lt;h2&gt;Simmer down the focus.
Avoid things that help you focus (like caffeine).&lt;/h2&gt;


&lt;blockquote&gt;If you&amp;#8217;re in an environment that forces you to produce and produce, and you feel very stressed, then you&amp;#8217;re not going to have any insights&amp;#8230;Concentration, it seems, comes with the hidden cost of diminished creativity.&lt;/blockquote&gt;
&lt;div class="credit"&gt;
&lt;small&gt;John Kounious, Cognitive Neuroscientist, Drexel University&lt;/small&gt;
&lt;/div&gt;

	&lt;h2&gt;Set the alarm clock a few minutes early&lt;/h2&gt;


&lt;blockquote&gt;The drowsy brain is unwound and disorganized, open to all sorts of unconvential ideas. The right hemisphere is unusally active.&lt;/blockquote&gt; 

	&lt;h2&gt;Get in a good mood&lt;/h2&gt;


&lt;blockquote&gt;Jung-Beeman&amp;#8217;s latest paper investigates why people who are in a good mood are so much better at solving insight puzzels (On average, they solve nearly twenty per cent more C.R.A. problems.)&lt;/blockquote&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=plkiO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=plkiO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=RLaQO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=RLaQO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/362600196" height="1" width="1"/&gt;</description>
      <pubDate>Mon, 11 Aug 2008 23:35:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/08/11/looking-for-insight-skip-the-coffee</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/362600196/looking-for-insight-skip-the-coffee</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/106</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F08%2F11%2Flooking-for-insight-skip-the-coffee</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/08/11/looking-for-insight-skip-the-coffee</feedburner:origLink></item>
    <item>
      <title>Matt Todd to speak at RubyFringe</title>
      <description>&lt;p&gt;We&amp;#8217;ve had the pleasure of working with &lt;a href="http://maraby.org"&gt;Matt Todd&lt;/a&gt; recently on several Highgroove projects.&lt;/p&gt;


	&lt;p&gt;Matt&amp;#8217;s going to be speaking at &lt;a href="http://rubyfringe.com"&gt;RubyFringe&lt;/a&gt;, &amp;#8220;an avant-garde conference for developers that are excited about emerging Ruby projects and technologies&amp;#8221; on July 18-20, 2008 in Toronto, Canada.&lt;/p&gt;


	&lt;p&gt;And while there is a very clever joke I could insinuate about Matt&amp;#8217;s talk entitled &lt;a href="http://rubyfringe.com/talks#matt_todd"&gt;Being Dumb And Using It To Your Advantage&lt;/a&gt;, on Matt being &amp;#8220;the expert on dumb,&amp;#8221; I can&amp;#8217;t quite come up with it&amp;#8212;and then there&amp;#8217;s the fact that he is actually really frickin&amp;#8217; smart.&lt;/p&gt;


	&lt;p&gt;If you&amp;#8217;ve ever thought of an idea, only to convince yourself &amp;#8220;eh, that&amp;#8217;ll never work, that&amp;#8217;s a dumb idea&amp;#8221;&amp;#8212;his talk will make you think otherwise.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=a23sO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=a23sO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=6k0QO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=6k0QO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/332805275" height="1" width="1"/&gt;</description>
      <pubDate>Fri, 11 Jul 2008 10:51:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/07/11/matt-todd-to-speak-at-rubyfringe</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/332805275/matt-todd-to-speak-at-rubyfringe</link>
      <category>Speaking</category>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/105</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F07%2F11%2Fmatt-todd-to-speak-at-rubyfringe</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/07/11/matt-todd-to-speak-at-rubyfringe</feedburner:origLink></item>
    <item>
      <title>Say hello at RailsConf</title>
      <description>&lt;p&gt;Andre, Charles, and myself leave for RailsConf Thursday.&lt;/p&gt;


	&lt;p&gt;If you want to discuss Rails monitoring, Javascript, the business of Rails, biking, camping, or dogs, talk to us!&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;m the tall, skinny scarecrow-like figure with the big head. Charles looks like he might belong to a hipster boy band. Andre&amp;#8230;well he looks completely normal. Just look for the scarecrow and the hipster &amp;#8211; Andre will be the other one in our group.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=Vkg0O"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=Vkg0O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=Z6tLO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=Z6tLO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/300255334" height="1" width="1"/&gt;</description>
      <pubDate>Wed, 28 May 2008 21:32:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/05/28/say-hello-to-us-at-railsconf</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/300255334/say-hello-to-us-at-railsconf</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/103</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F05%2F28%2Fsay-hello-to-us-at-railsconf</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/05/28/say-hello-to-us-at-railsconf</feedburner:origLink></item>
    <item>
      <title>Development with Rails + Passenger (AKA mod_rails) on Mac</title>
      <description>&lt;h2&gt;Passenger, AKA mod_rails&lt;/h2&gt;

&lt;p&gt;There are a number of posts (&lt;a href="http://www.fngtps.com/2008/04/using-passenger-on-osx-for-rails-development"&gt;one&lt;/a&gt;,  &lt;a href="http://benr75.com/articles/2008/04/12/setup-mod_rails-phusion-mac-os-x-leopard"&gt;two&lt;/a&gt;) out there on getting Phusion's &lt;a href="http://www.modrails.com/"&gt;Passenger&lt;/a&gt; up and running on OSX (Leopard). I decided to give it a go, and was pleased to discover several things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Despite reports to the contrary, Passenger installed just fine with Leopard's built-in Apache (I'm running Apache 2.2.8).&lt;/li&gt;
&lt;li&gt;Setup is very easy, as advertised.&lt;/li&gt;
&lt;li&gt;My default doc root(~/Sites) is works exactly as it did before. I do some HTML and PHP work there, so it was key that it continue to work properly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since the install process itself is quite easy, I wanted to offer a few tips for utilizing Passenger in a typical dev environment -- i.e., what you need after you get your first Passenger-powered Rails app up and running.&lt;/p&gt;

&lt;h2&gt;Your Brain on Passenger&lt;/h2&gt;

&lt;p&gt;As you know, &lt;code&gt;script/server&lt;/code&gt; starts your Rails app on a specific port. If you bounce around between a number of applications at any one time, you're probably used to either starting them on different ports, or control-c'ing your current mongrel, cd'ing to another app's directory, and script/server'ing again. This familiar pattern changes when you're running passenger. All your apps are available at any one time, as long as you have your vhosts configured.&lt;/p&gt;

&lt;p&gt;If you're like me, you usually hit your currently running Rails app on http://localhost:3000. That also changes when you're running Passenger. Instead, you'll hit a unique URL for each app, which you've configured in /etc/hosts to just go to 127.0.0.1&lt;/p&gt;

&lt;h2&gt;Setting up a new app&lt;/h2&gt;

&lt;p&gt;I set up a lot of Rails apps in my dev environment. With Passenger, in exchange for the on-demand convenience of accessing any of your apps any time, there are a few additional setup steps to take whenever you introduce a new app into your dev environment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create your rails project as usual&lt;/li&gt;
&lt;li&gt;add a new vhost. I configure mine in &lt;code&gt;/private/etc/apache2/extra/http-vhosts.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add the host in /etc/hosts&lt;/li&gt;
&lt;li&gt;restart apache: sudo apachectl restart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a &lt;strong&gt;vhosts&lt;/strong&gt; example with two apps I'm running locally. You can set up as many apps as you want this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot "/Users/andre/projects/rails/hotspotr/public"
    ServerName dev.hotspotr.com
    ErrorLog "/Users/andre/projects/rails/hotspotr/log/error.log"
  &amp;lt;/VirtualHost&amp;gt;

  &amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot "/Users/andre/projects/rails/shapewiki/public"
    ServerName dev.shapewiki.com
    ErrorLog "/Users/andre/projects/rails/shapewiki/log/error.log"
  &amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two things to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ErrorLog line is optional. If you don't include it, the error output for this app will go to &lt;code&gt;/private/var/log/apache2/error.log&lt;/code&gt;. Not that that's bad, but you're probably not used to looking for Rails logs there.&lt;/li&gt;
&lt;li&gt;I decided to go with the convention of dev.[PRODUCTION_URL].com. You can use anything here, as long as it matches up with an entry in /etc/hosts (see below)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And here's an example &lt;code&gt;/etc/hosts&lt;/code&gt; addition to match the two virtual hosts above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  127.0.0.1       dev.hotspotr.com
  127.0.0.1       dev.shapewiki.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it! Go to (for example) http://dev.hotspotr.com, and you're hitting you local development app. There is nothing to start and stop. The first request for any app you hit will take a moment. Subsequent requests will feel quite snappy.&lt;/p&gt;

&lt;h2&gt;Let's Set up some Aliases to Make it all Flow&lt;/h2&gt;

&lt;p&gt;Here are the aliases I added to my &lt;code&gt;.bashrc&lt;/code&gt; file to give me quick access to everything I needed for a new, Passenger-centric workflow in my development environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Use this in any RAILS_ROOT dir. That restart.txt file tells mod_rails to restart this app.
# You'll want to do this when (for example) you install a new plugin.
alias restart_rails='touch tmp/restart.txt'

# By default, your app's error log now goes here. Unless you configure your apps otherwise, 
# it's helpful to have an alias to take you to your error log quickly.
alias apache_logs='cd /private/var/log/apache2/'

# You'll be adding to your vhosts configuration everytime you introduce a new Rails app. 
# Might as well make it a shortcut
alias vhosts='sudo vi /private/etc/apache2/extra/httpd-vhosts.conf'

# Dito with hosts
alias hosts='sudo vi /etc/hosts'

# You'll need to restart apache whenever you make a change to vhosts. 
# You can also click System Preference-&amp;gt;Sharing-&amp;gt;Web Sharing, but this is quicker.
alias apache_restart='sudo apachectl restart'
&lt;/code&gt;&lt;/pre&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=2TkUO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=2TkUO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=XryuO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=XryuO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/298803971" height="1" width="1"/&gt;</description>
      <pubDate>Tue, 27 May 2008 08:18:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/05/27/development-with-rails-passenger-aka-mod_rails-on-mac</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/298803971/development-with-rails-passenger-aka-mod_rails-on-mac</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/102</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F05%2F27%2Fdevelopment-with-rails-passenger-aka-mod_rails-on-mac</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/05/27/development-with-rails-passenger-aka-mod_rails-on-mac</feedburner:origLink></item>
    <item>
      <title>Running Background Jobs in Ruby on Rails Revisited</title>
      <description>&lt;p&gt;A while back, we wrote an article on &lt;a href="http://cleanair.highgroove.com/articles/2006/06/23/running-background-jobs"&gt;Running Background Jobs in Ruby on Rails&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;The Ruby on Rails framework has a number of tools for running your code outside of the web-request, including the venerable &lt;code&gt;script/runner&lt;/code&gt; for one-off tasks, but using them can be a little heavy on your server.  If you want to run a task on the minute, or on demand, &lt;code&gt;script/runner&lt;/code&gt; will load your entire Rails environment, which can be from 20-50 MB, depending on how many libraries and how much code you&amp;#8217;re pulling in.&lt;/p&gt;


	&lt;p&gt;There are also a few other good guides, recipes, and libraries that we&amp;#8217;ve mentioned before, including:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;A chapter I helped write in Obie Fernandez&amp;#8217;s &lt;a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619"&gt;The Rails Way&lt;/a&gt; on Background Processing&lt;/li&gt;
		&lt;li&gt;A Rails Recipe in the &lt;a href="http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes"&gt;Advanced Rails Recipes&lt;/a&gt; Book on background processing with Rails by &lt;a href="http://slantwisedesign.com/"&gt;Jon Dahl&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://backgroundrb.rubyforge.org"&gt;BackgrounDRb&lt;/a&gt; a library used to divorce long-running tasks from the web-cycle of a Rails application&lt;/li&gt;
		&lt;li&gt;A great article by &lt;a href="http://justlooking.recursion.org/"&gt;Luke Francl&lt;/a&gt; explaining &lt;a href="http://railspikes.com/2007/6/1/rails-email-processing"&gt;Stress-free Incoming E-Mail Processing with Rails&lt;/a&gt; which helped inspire this solution&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;We&amp;#8217;ve found that it&amp;#8217;s not terribly hard to build your own job server that runs continuously in the background and can handle all kinds of jobs, including those that should run on a specified interval.  Here&amp;#8217;s how we did it.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to make use of the Daemons gem, so install it first:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
sudo gem install daemons
&lt;/code&gt;
&lt;/pre&gt;

Let&amp;#8217;s go ahead and build in two types of jobs: 
	&lt;ul&gt;
	&lt;li&gt;those that Run Once (immediately) and&lt;/li&gt;
		&lt;li&gt;those that Run on an interval (every x seconds or minutes or days)&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;We&amp;#8217;ll use ActiveRecord&amp;#8217;s Single Table Inheritance (STI) to handle both types of jobs and dictate their differing behaviors.&lt;/p&gt;


	&lt;p&gt;Create a PeriodicJob model:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
script/generate model PeriodicJob type:string \
 job:text interval:integer last_run_at:datetime
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;And migrate up.  Now, fill in the PeriodicJob#run! method:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# app/models/periodic_job.rb
class PeriodicJob &amp;lt; ActiveRecord::Base

  # Runs a job and updates the +last_run_at+ field.
  def run!
    begin
      eval(self.job)
    rescue Exception
      logger.error "'#{self.job}' could not run: #{$!.message}\n#{$!.backtrace}" 
    end
    self.last_run_at = Time.now.utc
    self.save  
  end

end
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Note that we&amp;#8217;re using Time.now.utc so as not to cause confusion&amp;#8212;our AR is configured to use &lt;span class="caps"&gt;UTC&lt;/span&gt; by default.&lt;/p&gt;


	&lt;p&gt;Now, let&amp;#8217;s create the subclass for Run Once jobs and let it inherit from our PeriodicJob model.  We&amp;#8217;ll  add two more class methods to it, including a finder and a cleanup method:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# app/models/run_once_periodic_job.rb
class RunOncePeriodicJob &amp;lt; PeriodicJob

  # RunOncePeriodicJobs run if they have no PeriodicJob#last_run_at time.
  def self.find_all_need_to_run
    self.find(:all, :conditions =&amp;gt; ["last_run_at IS NULL"])
  end

  # Cleans up all jobs older than a day.
  def self.cleanup
    self.destroy_all ['last_run_at &amp;lt; ?', 1.day.ago]
  end

end
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Now let&amp;#8217;s define the Run on an Interval Job and add the interval specific finder:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# app/models/run_interval_periodic_job.rb
class RunIntervalPeriodicJob &amp;lt; PeriodicJob

# RunIntervalPeriodicJobs run if PeriodicJob#last_run_at time plus 
# PeriodicJob#interval (in seconds) is past the current time (Time.now).
  def self.find_all_need_to_run
    self.find(:all).select {|job| job.last_run_at.nil? || 
      (job.last_run_at + job.interval &amp;lt;= Time.now.utc)}
  end

end
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Now, let&amp;#8217;s write some tests, to make it clear how it should work:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# test/unit/periodic_job_test.rb
require File.dirname(__FILE__) + '/../test_helper'

class PeriodicJobTest &amp;lt; Test::Unit::TestCase
  fixtures :periodic_jobs

  def test_should_run_job
    assert_nothing_thrown { periodic_jobs(:run_once_job).run! }
  end

  def test_should_find_run_once_job
    assert RunOncePeriodicJob.find_all_need_to_run.include?(periodic_jobs(:run_once_job))
  end

  def test_should_not_find_run_job_already_run
    assert !RunOncePeriodicJob.find_all_need_to_run.include?(periodic_jobs(:run_once_job_to_be_deleted))
  end

  def test_should_find_run_interval_job
    assert RunIntervalPeriodicJob.find_all_need_to_run.include?(periodic_jobs(:run_interval_job_needs_run))        
  end

  def test_should_not_find_run_interval_job_not_within_interval
    assert !RunIntervalPeriodicJob.find_all_need_to_run.include?(periodic_jobs(:run_interval_job_does_not_need_run))
  end

  def test_should_cleanup_old_jobs
    jobs_count = RunOncePeriodicJob.count

    assert periodic_jobs(:run_once_job_to_be_deleted).last_run_at
    RunOncePeriodicJob.cleanup

    assert jobs_count - 1, RunOncePeriodicJob.count
  end

end
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Here are our fixtures that setup the scenarios:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# test/fixtures/periodic_jobs.yml
run_once_job:
  id: 1
  type: RunOncePeriodicJob
  job: 'what = "w00t once!"'
run_interval_job_needs_run:
  id: 2
  type: RunIntervalPeriodicJob
  interval: 60
  job: 'what = "w00t on the minute dood!"'
  last_run_at: &amp;lt;%= (Time.now.utc - 5.minutes).to_s(:db) %&amp;gt;
run_interval_job_does_not_need_run:
  id: 3
  type: RunIntervalPeriodicJob
  interval: 60
  job: 'what = "w00t on the minute dood!"'
  last_run_at: &amp;lt;%= (Time.now.utc - 5).to_s(:db) %&amp;gt;
run_once_job_to_be_deleted:
  id: 4
  type: RunOncePeriodicJob
  job: 'what = "w00t once!"'
  last_run_at: &amp;lt;%= (Time.now.utc - 8.days).to_s(:db) %&amp;gt;
run_interval_job_needs_run_never_run_before:
  id: 5
  type: RunIntervalPeriodicJob
  interval: 60
  job: 'what = "w00t on the minute dood!"'
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Now, we have a built in system for running Periodic Jobs.  Note that all we have to do is create a new Periodic Job with the actual code we would normally toss to script/runner in the PeriodicJob#code field, and when we call the PeriodicJob#run! method, it will evaluate it.&lt;/p&gt;


	&lt;p&gt;We now need a way to always run a background task server to check these PeriodicJobs and run them.&lt;/p&gt;


	&lt;p&gt;Create a file called task_server.rb in your script directory.&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# script/task_server.rb
#!/usr/bin/env ruby
#
# Background Task Server
#
# Relies on ActiveRecord PeriodicJob and STI table (periodic_jobs):
#
# type:         string    ("RunOncePeriodicJob", or "RunIntervalPeriodicJob")
# interval:     integer   (in seconds)
# job:          text      (actual ruby code to eval)
# last_run_at:  datetime  (stored time of last run)
#
# Main algorithm is daemon process runs every XX seconds, wakes up and
# looks for jobs. Jobs placed in the RunOncePeriodicJob queue are run 
# immediately (if no last_run_at time) and stored until they are cleaned up 
# (deleted). Jobs placed in the RunIntervalPeriodicJob queue are run if: 
# their last_run_at time + their interval (in seconds) is past the current 
# time (Time.now).
#

options = {}
ARGV.options do |opts|

  opts.on( "-e", "--environment ENVIRONMENT", String,
           "The Rails Environment to run under." ) do |environment|
    options[:environment] = environment
  end

  opts.parse!
end

RAILS_ENV = options[:environment] || 'development'  

require File.dirname(__FILE__) + '/../config/environment.rb'

if RAILS_ENV  "development" or RAILS_ENV  &amp;#8220;test&amp;#8221; 
  &lt;span class="caps"&gt;SLEEP&lt;/span&gt;_TIME = 10
else
  &lt;span class="caps"&gt;SLEEP&lt;/span&gt;_TIME = 60
end

	&lt;p&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
loop do
  # Find all Run Once jobs, and run them
  RunOncePeriodicJob.find_all_need_to_run.each do |job|
    job.run!
  end

  # Find all Run on Interval jobs, and run them  
  RunIntervalPeriodicJob.find_all_need_to_run.each do |job|
    job.run!
  end

  # Cleans up periodic jobs, removes all RunOncePeriodicJobs over one
  # day old.
  RunOncePeriodicJob.cleanup

  sleep(SLEEP_TIME)
end
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;That&amp;#8217;s it.  Now, we create a control script using the daemons gem.&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# script/task_server_control.rb
#!/usr/bin/env ruby
#
# Background Task Server Control - A daemon for running jobs
#

require 'rubygems'
require 'daemons'

options = {}

default_pid_dir = "/var/run/task_server" 

if File.exists?(default_pid_dir)
  options[:dir_mode] = :normal
  options[:dir] = default_pid_dir
end

Daemons.run(File.dirname(__FILE__) + '/../script/task_server.rb', options)
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Create an optional /var/run/task_server dir if you&amp;#8217;re running on a server (in production mode):&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
mkdir -p /var/run/task_server
chown deploy:deploy /var/run/task_server
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;We can start it up in the normal server mode, as a daemon (using the start/stop commands, or we can start it up in interactive mode (so we can see the results) using the run command:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
ruby script/task_server_control.rb run
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;In another window, add some jobs:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
ruby script/console
&amp;gt;&amp;gt; RunOncePeriodicJob.create(:job =&amp;gt; 'puts "This job will only run once."')
=&amp;gt; #...
RunIntervalPeriodicJob.create(:job =&amp;gt; 'puts "This job runs every 30 seconds, and it ran: #{Time.now.utc}"', :interval =&amp;gt; 30)
=&amp;gt; #...
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;You should see the task_server_control.rb file running these jobs as the task server wakes up.&lt;/p&gt;


	&lt;p&gt;And now, it wouldn&amp;#8217;t be complete without some Capistrano support to enable restarting after we make code changes to the model, and to allow start/stop/restart:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# config/deploy.rb

# In case you're running on multiple app servers,
# we define the task_server to make sure that 
# jobs only run on one server.
role :task_server, "app_server1.example.com" 

namespace :background_task_server do

  task :setup, :roles =&amp;gt; :task_server do
    run "mkdir -p /var/run/task_server" 
    run "chown #{user}:#{group} /var/run/task_server" 
  end

  # start background task server
  task :start, :roles =&amp;gt; :task_server do
    run "#{current_path}/script/task_server_control.rb start -- -e production" 
  end

  # stop background task server
  task :stop, :roles =&amp;gt; :task_server do
    run "#{current_path}/script/task_server_control.rb stop -- -e production" 
  end

  # start background task server
  task :restart, :roles =&amp;gt; :task_server do
    # TODO: since restart won't cold_start, we could read call to status, if 
    # it returns:
    #    task_server.rb: no instances running
    # we could simply issue the start command
    run "#{current_path}/script/task_server_control.rb restart -- -e production" 
  end

end

# optional:
# after "deploy", "background_task_server:restart" 

&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;Note the use of the task_server, so you can simply allow one app server to be your task server (if you&amp;#8217;re running on multiple servers).&lt;/p&gt;


	&lt;p&gt;And now, because I&amp;#8217;m feeling generous, let&amp;#8217;s set monit up to monitor your task server, so that if it ever goes down for some strange reason, monit should boot it back up (this also ensures that restarts will boot your task server back up):&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
# /etc/monit.d/task_server.conf

check process task-server with pidfile /var/run/task_server/task_server.rb.pid
  group task-server
  start program = "/usr/bin/ruby /var/www/apps/example/current/script/task_server_control.rb start -- --environment=production" 
  stop program  = "/usr/bin/ruby /var/www/apps/example/current/script/task_server_control.rb stop -- --environment=production" 
&lt;/code&gt;
&lt;/pre&gt;

	&lt;p&gt;That&amp;#8217;s it!  If there&amp;#8217;s any interest in forming a plugin around this with generators to create the migration and models, I&amp;#8217;ll give it a go and stick it on github.&lt;/p&gt;


	&lt;p&gt;Feedback appreciated!&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=Q3WnO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=Q3WnO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=4mWaO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=4mWaO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/295508316" height="1" width="1"/&gt;</description>
      <pubDate>Wed, 21 May 2008 20:42:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/05/21/running-background-jobs-in-ruby-on-rails-revisited</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/295508316/running-background-jobs-in-ruby-on-rails-revisited</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/101</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F05%2F21%2Frunning-background-jobs-in-ruby-on-rails-revisited</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/05/21/running-background-jobs-in-ruby-on-rails-revisited</feedburner:origLink></item>
    <item>
      <title>We're Presenting at StartupRiot</title>
      <description>&lt;p&gt;&lt;img src="http://farm4.static.flickr.com/3196/2432151661_4acd7c6b63_o.png" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;Come see us talk about &lt;a href="http://scoutapp.com"&gt;Scout Server Monitoring and Reporting&lt;/a&gt; at &lt;a href="http://www.startupriot.com/"&gt;StartupRiot&lt;/a&gt; on May 19, 2008, and watch all the other startups present their wares.  This looks to be a really great event.&lt;/p&gt;


	&lt;p&gt;See ya there!&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/cleanair?a=gdPHO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=gdPHO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/cleanair?a=6YZYO"&gt;&lt;img src="http://feeds.feedburner.com/~f/cleanair?i=6YZYO" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/cleanair/~4/290252921" height="1" width="1"/&gt;</description>
      <pubDate>Wed, 14 May 2008 10:30:00 EST</pubDate>
      <guid isPermaLink="false">http://cleanair.highgroove.com/articles/2008/05/14/were-presenting-at-startupriot</guid>
      <link>http://feeds.feedburner.com/~r/cleanair/~3/290252921/were-presenting-at-startupriot</link>
      <trackback:ping>http://cleanair.highgroove.com/articles/trackback/100</trackback:ping>
    <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetItemData?uri=cleanair&amp;itemurl=http%3A%2F%2Fcleanair.highgroove.com%2Farticles%2F2008%2F05%2F14%2Fwere-presenting-at-startupriot</feedburner:awareness><feedburner:origLink>http://cleanair.highgroove.com/articles/2008/05/14/were-presenting-at-startupriot</feedburner:origLink></item>
  <feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetFeedData?uri=cleanair</feedburner:awareness></channel>
</rss>
