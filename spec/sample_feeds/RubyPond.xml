<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/rss2full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">
  <channel>
    <title>Ruby Pond</title>
    <link>http://rubypond.com/rss/</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>Ruby Pond Ltd. | Ruby on Rails Developers, Online Marketing, Social Networking</description>
    
    
        <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" href="http://feeds.feedburner.com/rubypond/JXRc" type="application/rss+xml" /><item>
          <title>Ruby Manor Videos Available</title>
          <description>&lt;p&gt;For anybody that was unable to attend (like me), or for those that just want a recap then a selection of the &lt;a href="http://rubymanor.org/videos/"&gt;Ruby Manor videos&lt;/a&gt; are now available for download. Hopefully some more will be posted soon.&lt;/p&gt;

&lt;p&gt;For any of the bits that are missing you can read through Graham&amp;#8217;s review of the various sessions. &lt;a href="http://effectif.com/2008/11/22/notes-from-the-ruby-manor"&gt;Ruby Manor part 1&lt;/a&gt; and &lt;a href="http://effectif.com/2008/11/23/notes-from-the-ruby-manor-part-2"&gt;Ruby Manor part 2&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=GbdX6q.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=GbdX6q.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=i76qAB.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=i76qAB.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=zlxiDv.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=zlxiDv.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=zDPBvK.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=zDPBvK.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=fdFq0K.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=fdFq0K.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ILhPDt.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ILhPDt.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=3qxLQj.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=3qxLQj.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=4gsCWu.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=4gsCWu.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=tEu8bK.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=tEu8bK.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/514037642" height="1" width="1"/&gt;</description>
          <pubDate>Fri, 16 Jan 2009 14:38:44 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/16/ruby-manor-videos-available/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/514037642/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/16/ruby-manor-videos-available/</feedburner:origLink></item>
    
        <item>
          <title>scRUBYt! Gets Plugins!</title>
          <description>&lt;p&gt;Yes! You heard right! As you may have gathered, it&amp;#8217;s been a rather frantic month of development for scRUBYt! and currently this is the addition I&amp;#8217;m most proud of. One of the most common requests used to be along the lines of &amp;#8220;when do you plan to support xxx format output?&amp;#8221;. Now, scRUBYt! is oblivious to output formats. That&amp;#8217;s right, it natively supports nothing, nada, zilch. But to make it useful, we&amp;#8217;ve written a Hash output plugin which we&amp;#8217;re shipping it with.&lt;/p&gt;

&lt;h2&gt;How to use a scRUBYt! output plugin&lt;/h2&gt;

&lt;p&gt;Firstly, you need to make sure you have the plugin you require installed. At the time of writing there will only be the two I&amp;#8217;ve written, Hash and XmlFile. Then in your ruby file require the plugin. As the current edge release isn&amp;#8217;t yet packaged as a gem you&amp;#8217;ll need to test this with the github checkout and reference the output plugin explicitly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;plugins/scrubyt_xml_file_output/scrubyt_xml_file_output&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;ve been following the tutorials talking about &lt;a href="http://rubypond.com/articles/2009/01/15/web-scraping---the-amazon-example-finale/"&gt;web scraping&lt;/a&gt; with the new version for the past few weeks you&amp;#8217;ll have seen how to direct output to a plugin. To request Hash output it&amp;#8217;s:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new :output =&amp;gt; :hash do
    fetch &amp;quot;http://www.google.com/search?&amp;amp;q=ruby&amp;quot;
    result &amp;quot;//html/body/div[5]/div/div/h2/a&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and for XmlFile it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@file = File.open(&amp;quot;results.xml&amp;quot;, &amp;quot;w&amp;quot;)
@extractor = Scrubyt::Extractor.new :output =&amp;gt; :xml_file, :file =&amp;gt; @file do
    fetch &amp;quot;http://www.google.com/search?&amp;amp;q=ruby&amp;quot;
    result &amp;quot;//html/body/div[5]/div/div/h2/a&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The XmlFile output takes an additional parameter which is the file to stream the results out to.&lt;/p&gt;

&lt;h2&gt;Creating your own plugin&lt;/h2&gt;

&lt;p&gt;That&amp;#8217;s great for those of you that are happy with XML or Hash output, but what about if you want some other custom format? Well it&amp;#8217;s time to create your own. I&amp;#8217;ll show you the actual code that implements the XmlFile output to show you how simple it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'rexml/document'
require &amp;quot;#{File.dirname(__FILE__)}/inflector&amp;quot;
require &amp;quot;#{File.dirname(__FILE__)}/inflections&amp;quot;

class Scrubyt::Output::XmlFile &amp;lt; Scrubyt::Output::Plugin  
  @subscribers = {}
  on_initialize :setup_file
  before_extractor :open_root_node
  after_extractor :close_root_node
  on_save_result :save_xml


  def setup_file(args = {})
    @file = args[:file]
  end

  def open_root_node(*args)
    @file.write(&amp;quot;&amp;lt;root&amp;gt;&amp;quot;)
  end

  def save_xml(name, results)
    if results.is_a?(::Hash)
      @file.write results.to_xml
    else
      results.each do |result|
        @file.write result.to_xml(name)
      end
    end
  end

  def close_root_node(*args)
    @file.write(&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The require lines at the top are only needed for this output format. REXML to construct the XML tags for me, and some inflections I&amp;#8217;ve put together to turn the Hash and Array objects into XML. Now into analysing the class proper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Scrubyt::Output::XmlFile &amp;lt; Scrubyt::Output::Plugin  
  @subscribers = {}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the moment, you&amp;#8217;ll need to inintialize this instance variable to be an empty Hash for the events to get attached correctly. I&amp;#8217;m looking for a way to remove it, stay tuned. But for now you&amp;#8217;ll need to put it in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on_initialize :setup_file
before_extractor :open_root_node
after_extractor :close_root_node
on_save_result :save_xml&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;#8217;ve got four events to listen for, the concept should be familiar if you&amp;#8217;re coming from Rails. Essentially all we are doing is saying &amp;#8220;When we initialize run the setup&lt;em&gt;file method. Before the extractor actually starts, run the method called open&lt;/em&gt;root&lt;em&gt;node. Whenever we get a result to save, call save&lt;/em&gt;xml. And finally, after the extractor run the method called close&lt;em&gt;root&lt;/em&gt;node.&amp;#8221;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def setup_file(args = {})
  @file = args[:file]
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is fairly straightforward. If you&amp;#8217;ve got any custom logic that needs to happen when the output plugin is initialized you can place it in here. Any parameter that is passed in to Extractor.new() is passed through for you to access here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def open_root_node(*args)
  @file.write(&amp;quot;&amp;lt;root&amp;gt;&amp;quot;)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now just to open the XML file, and keep it somewhat consistent with the old scRUBYt! XML output we open a &lt;root&gt; node within the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def save_xml(name, results)
  if results.is_a?(::Hash)
    @file.write results.to_xml
  else
    results.each do |result|
      @file.write result.to_xml(name)
    end
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is where the majority of the magic happens. The save_xml method will be passed the desired name for the result, and a hash of the results. This is essentially the same format you&amp;#8217;d get if you used the Hash output format, except for each individual detail block rather than then entire extractor.&lt;/p&gt;

&lt;p&gt;The reason for the if/else scenario is for when results are not part of a detail block. If you&amp;#8217;re just returning results straight (like the Google example at the top of this post) then &amp;#8220;results&amp;#8221; in this context will be a list/Array of all the matching results rather than a Hash.&lt;/p&gt;

&lt;h2&gt;Passing results back to the extractor&lt;/h2&gt;

&lt;p&gt;Not everyone is going to want to stream results out to a file though, so to deal with this you can make a results method available on the instance of your plugin. As I said earlier, even Hash operates as a plugin now so we can see an example of how this work in the Hash output plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Scrubyt::Output::Hash &amp;lt; Scrubyt::Output::Plugin
  @subscribers = {}
  on_initialize :setup_results
  on_save_result :store_hash

  def setup_results(args = {})
    @results = []
  end

  def results
    @results
  end

  def store_hash(name, passed_results)
    @results &amp;lt;&amp;lt; passed_results
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we setup a @results instance on&lt;em&gt;initialize, and then on&lt;/em&gt;save&lt;em&gt;results simply pushes the passed&lt;/em&gt;results into @results. Confused yet? Hopefully the code is clear enough to make sense.&lt;/p&gt;

&lt;p&gt;All that happens then is that back in your extractor definition the call to @extractor.results is passed through to the first output plugin it can find.&lt;/p&gt;

&lt;h2&gt;Naming Conventions and Namespacing&lt;/h2&gt;

&lt;p&gt;The only additional requirement for a plugin to work in scRUBYt! is that it is correctly named and namespaced. As you may have noticed the ones I&amp;#8217;ve provided are called Scrubyt::Output::Hash and Scrubyt::Output::XmlFile, that means they can be targeted using :output =&gt; :hash and  :output =&gt; :xml&lt;em&gt;file respectively. If you wanted to call your output GlennsBadExample it would be namespaced as Scrubyt::Output::GlennsBadExample and you&amp;#8217;d then just need to require the appropriate file and use :output =&gt; :glenns&lt;/em&gt;bad_example&lt;/p&gt;

&lt;h2&gt;Oh the possibilities! So what&amp;#8217;s next?&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;re only just starting to see the possibilities that this will offer our extractors. It opens up the possibility of pushing results not only to a different format, but possibly a completely different service. It&amp;#8217;s now trivial to create an output format that streams results directly into backgroundRB, a nanite worker, or a web service for further processing and data warehousing. By the time you read this, you&amp;#8217;ll also be able to pass in an array of outputs like :output =&gt; [:hash, :xml_file] and have both plugins generate the appropriate format(s). For the scraper I&amp;#8217;m currently working on where I have two different companies wanting the same data, this could be just the ticket for interfacing directly to their API as I scrape.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to hear what ideas people might have for this, or how you think it could be improved. We&amp;#8217;re really hopeful that this is the kind of thing that makes developing and extending scRUBYt! really easy for those with more complicated needs.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=vIXJog.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=vIXJog.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ceApbw.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ceApbw.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=e0FWth.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=e0FWth.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ucAat5.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ucAat5.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=8QGG5T.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=8QGG5T.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=lJyNpX.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=lJyNpX.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=PfFicw.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=PfFicw.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=dyOgdP.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=dyOgdP.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=1POMcA.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=1POMcA.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/513504099" height="1" width="1"/&gt;</description>
          <pubDate>Fri, 16 Jan 2009 01:18:45 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/16/scrubyt-gets-plugins/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/513504099/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/16/scrubyt-gets-plugins/</feedburner:origLink></item>
    
        <item>
          <title>Web Scraping - The Amazon Example Finale</title>
          <description>&lt;p&gt;So yesterday I showed you a fairly contrived example of &lt;a href="http://rubypond.com/articles/2009/01/13/more-web-scrapers-with-the-upcoming-scrubyt/"&gt;how to build a web scraper&lt;/a&gt; using scRUBYt! to get data from Amazon (they&amp;#8217;ve got an API that would be much easier and more robust if you need access to this info, but that&amp;#8217;s not the point at the moment). But if you look at the results, they&amp;#8217;re not the greatest. There is too much noise in some fields, and we probably want to share there data with another system so a ruby based Hash object isn&amp;#8217;t going to work.&lt;/p&gt;

&lt;h2&gt;Removing empty results with scRUBYt!&lt;/h2&gt;

&lt;p&gt;For various reasons, sometimes you may not get all the data you want back for every record. It&amp;#8217;s usually related to your result definition being too restrictive, or a change in format on a specific page. Maybe the price information is in a different DIV if it is on sale. In any event, you need to make a decision on what to do. In the new release of scRUBYt! there are three immediate options that come to mind, but we may well build more in if required. First, and what we did yesterday in the example, is to do nothing. You&amp;#8217;ll get the nil/empty result returned back to you to handle as you see fit. Second, you can simply drop any fields that are nil (I&amp;#8217;ve just displayed the first few results):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot; do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;, :remove_blank =&amp;gt; true
    saving &amp;quot;//td[@class='price']&amp;quot;
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;
  end
end
puts @extractor.results.inspect
=&amp;gt; [{:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language [ILLUSTRATED]  (Paperback)&amp;quot;}, 
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;}, 
             {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;}, 
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 0596516177&amp;quot;}]}
    {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language (Paperback)&amp;quot;}, 
             {:saving=&amp;gt;nil}, 
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 020171096X&amp;quot;}]}, 
    {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Beginning Ruby: From Novice to Professional (Beginning from Novice to Professional) (Paperback)&amp;quot;}, 
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;}, 
             {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;}, 
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 1590597664&amp;quot;}]}
    ...]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;ve set :remove_blank to true on the price field, and as a result you&amp;#8217;ll see that the 2nd result contains no price element. Alternatively, you could drop any detail block (in this example, any single book) which is missing the field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot; do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;, :required =&amp;gt; true
    price &amp;quot;//b[@class='priceLarge']&amp;quot;, :required =&amp;gt; true
    saving &amp;quot;//td[@class='price']&amp;quot;
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;
  end
end
puts @extractor.results.inspect
=&amp;gt; [{:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language [ILLUSTRATED]  (Paperback)&amp;quot;},
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;},
             {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;},
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 0596516177&amp;quot;}]},
    {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Beginning Ruby: From Novice to Professional (Beginning from Novice to Professional) (Paperback)&amp;quot;},
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;},
             {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;},
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 1590597664&amp;quot;}]},
    {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Programming Ruby: The Pragmatic Programmers' Guide, Second Edition [ILLUSTRATED]  (Paperback)&amp;quot;},
             {:price=&amp;gt;&amp;quot;$29.67&amp;quot;},
             {:saving=&amp;gt;&amp;quot;$15.28\n      (34%)\n    &amp;quot;},
             {:isbn=&amp;gt;&amp;quot;ISBN-10: 0974514055&amp;quot;}]},
    ...]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time the &amp;#8220;The Ruby Programming Language (Paperback)&amp;#8221; book isn&amp;#8217;t included in the results at all. For our purposes though, I&amp;#8217;ve decided that I only want to know about books that I have &lt;em&gt;all&lt;/em&gt; the details for. Instead of setting :required on every result, I can specify it on the book_detail definition which will give the same output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot;, :required =&amp;gt; :all do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;
    saving &amp;quot;//td[@class='price']&amp;quot;
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Sanitizing scRUBYt! output&lt;/h2&gt;

&lt;p&gt;The output still isn&amp;#8217;t quite what we want. We&amp;#8217;ve dumped the empty results, but we&amp;#8217;ve still got that ugly &amp;#8220;ISBN-10: &amp;#8221; in front of the ISBN. We could clean it up later, but it&amp;#8217;s creating additional work for ourselves. And if we want this thing to scale (I&amp;#8217;ve got scrapers which scrape thousands of pages off a single site) trying to keep all that data hanging around in memory isn&amp;#8217;t going to work. So let&amp;#8217;s do as much of possible within the scRUBYt! definition as we&amp;#8217;re collecting the data: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot;, :required =&amp;gt; :all do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;
    saving &amp;quot;//td[@class='price']&amp;quot;
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;, :script =&amp;gt; Proc.new{|isbn| isbn.gsub(&amp;quot;ISBN-10: &amp;quot;, &amp;quot;&amp;quot;)}
  end
end
puts @extractor.results.inspect
=&amp;gt; [{:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language [ILLUSTRATED]  (Paperback)&amp;quot;},
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;},
             {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;},
             {:isbn=&amp;gt;&amp;quot;0596516177&amp;quot;}]},
    ... ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you&amp;#8217;ll see that we&amp;#8217;re getting a much cleaner ISBN result. Just create a Proc, the result will be passed into in and then do as you see fit. An if statement to check it contains something you expect, a regexp, the possibilities are endless. You can also combine this with the other options like :require and :remove_blank. So let&amp;#8217;s really jazz this thing up. We&amp;#8217;ll clean up the saving, and pull in the description and that&amp;#8217;s all the data we need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot;, :required =&amp;gt; :all  do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;
    saving &amp;quot;//td[@class='price']&amp;quot;, :script =&amp;gt; Proc.new{|saving| saving.match(/(\$[\d\.]*)/)[1]}
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;, :script =&amp;gt; Proc.new{|isbn| isbn.gsub(&amp;quot;ISBN-10: &amp;quot;,&amp;quot;&amp;quot;)}
    description &amp;quot;//div[@id='productDescription']//div[@class='content']&amp;quot;
  end
end
puts @extractor.results.inspect
=&amp;gt; [{:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Beginning Ruby: From Novice to Professional (Beginning from Novice to Professional) (Paperback)&amp;quot;},
             {:price=&amp;gt;&amp;quot;$26.39&amp;quot;},
             {:saving=&amp;gt;&amp;quot;$13.60&amp;quot;},
             {:isbn=&amp;gt;&amp;quot;1590597664&amp;quot;}, 
             {:description=&amp;gt;&amp;quot;Product Description\n  Ruby is perhaps best known as the engine powering the...&amp;quot;}]}, 
    {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Programming Ruby: The Pragmatic Programmers' Guide, Second Edition [ILLUSTRATED]  (Paperback)&amp;quot;}, 
             {:price=&amp;gt;&amp;quot;$29.67&amp;quot;}, 
             {:saving=&amp;gt;&amp;quot;$15.28&amp;quot;}, 
             {:isbn=&amp;gt;&amp;quot;0974514055&amp;quot;}, 
             {:description=&amp;gt;&amp;quot;Product Description\n  Ruby is an increasingly popular, fully object-oriented dynamic...&amp;quot;}]},
    ...]&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Outputting results to XML&lt;/h2&gt;

&lt;p&gt;Inevitably there comes a time where you want to consume this data in something other than your ruby application. At that point, passing around a Hash is probably not the best idea. Alternatively, you might have a scraper that has to scrape hundreds to thousands of pages. Storing all the results in a Hash as you go will bring your machine to it&amp;#8217;s knees. So here comes one of the largest changes to the way the new release of scRUBYt! works.&lt;/p&gt;

&lt;p&gt;Previously, you always had results returned as a Hash and/or XML depending on your need. Everything was held in memory until you destroyed your extractor. Now, the standard XML option is to stream the results out to a file as they are processed and remove them from memory. There is no way to retrieve the results as XML within your program, they have to be streamed out to a file (and really, why would you want XML within your app when you can have native ruby structures instead?). So to save our scraper above out to an XML file you just pass a new output format and an instance of a File to the extractor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@file = File.new(&amp;quot;amazon_results.xml&amp;quot;, &amp;quot;w&amp;quot;)
@extractor = Scrubyt::Extractor.new :output =&amp;gt; :xml_file, :file =&amp;gt; @file do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot;, :required =&amp;gt; :all  do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;
    saving &amp;quot;//td[@class='price']&amp;quot;, :script =&amp;gt; Proc.new{|saving| saving.match(/(\$[\d\.]*)/)[1]}
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;, :script =&amp;gt; Proc.new{|isbn| isbn.gsub(&amp;quot;ISBN-10: &amp;quot;,&amp;quot;&amp;quot;)}
    description &amp;quot;//div[@id='productDescription']//div[@class='content']&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now a call to @extractor.results at the end of the scrape will return no results. I hope that wasn&amp;#8217;t too much and it&amp;#8217;s given you a good view into how to create your very own web scraper. If you have any questions, head on over to the &lt;a href="http://www.scrubyt.org/"&gt;scRUBYt! forums&lt;/a&gt; or post them in the comments.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=DNn6rh.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=DNn6rh.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=K1R54B.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=K1R54B.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=TLv0yW.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=TLv0yW.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=CA2eXK.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=CA2eXK.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Q04wxQ.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Q04wxQ.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=KjhQLS.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=KjhQLS.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=HSiq3x.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=HSiq3x.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=5co8Pu.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=5co8Pu.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Ptf3pM.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Ptf3pM.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/513289721" height="1" width="1"/&gt;</description>
          <pubDate>Thu, 15 Jan 2009 20:52:12 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/15/web-scraping---the-amazon-example-finale/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/513289721/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/15/web-scraping---the-amazon-example-finale/</feedburner:origLink></item>
    
        <item>
          <title>More web scrapers with the upcoming scRUBYt!</title>
          <description>&lt;p&gt;In the previous articles I gave a brief glimpse at the upcoming scRUBYt! release. We learned how to do some basic &lt;a href="http://rubypond.com/articles/2008/12/09/web-spidering-and-data-extraction-with-scrubyt/"&gt;html scraping&lt;/a&gt;, and then followed it up by &lt;a href="http://rubypond.com/articles/2008/12/17/web-spider-creation-with-scrubyt---part-ii/"&gt;scraping multiple pages&lt;/a&gt;. As promised, in this installment I&amp;#8217;ll go over how to get more detailed logging output to help you debug your scraper while in development and how to submit and navigate forms.&lt;/p&gt;

&lt;h2&gt;Logging Scraper Output&lt;/h2&gt;

&lt;p&gt;There&amp;#8217;s been quite a fundamental change to the way scRUBYt! works internally of late. It doesn&amp;#8217;t manifest itself visually in the way you interface to it, but it does mean logging the output is now much easier and cleaner. Using our most basic example from the first tutorial, you just need to pass the :log_level into the extractor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new(:log_level =&amp;gt; :verbose) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the output is directed to stdout so you&amp;#8217;d see the following on your screen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start
fetch: http://www.google.com/ncr
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;re after a more complex example, here is the scraper definition from the second part of the tutorial series and the corresponding log output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new(:log_level =&amp;gt; :verbose) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_detail &amp;quot;//h3[@class='r']/a&amp;quot; do
    title &amp;quot;//title&amp;quot;
    summary &amp;quot;//p&amp;quot;, :script =&amp;gt; Proc.new{|result| result if result.match(%r{(\w+\W+){25}})}
  end
  next_page &amp;quot;//a[text()*='Next']&amp;quot;, :limit =&amp;gt; 2
end&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;start
fetch: http://www.google.com/ncr
textfield: 'q' = 'ruby'
with options ''
submit
next detail: 'page' = 'http://ruby-lang.org/'
with args: ''
next detail: 'page' = 'http://en.wikipedia.org/wiki/Ruby_(programming_language)'
with args: ''

etc...

next page: /search?hl=en&amp;amp;ie=UTF-8&amp;amp;q=ruby&amp;amp;start=10&amp;amp;sa=N
fetch: http://www.google.com/search?hl=en&amp;amp;ie=UTF-8&amp;amp;q=ruby&amp;amp;start=10&amp;amp;sa=N
next detail: 'page' = 'http://www.rubycentral.com/book/'
with args: ''

etc...

end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At present the valid :log_level values are :none, :critical, :error, :warn, :info, :debug, and :verbose (in increasing order of noise). If you want to direct the log output to something other than stdout the only way at the moment is to override the Scrubyt::Logger#log method. I&amp;#8217;m looking at ways to make it easier to substitute in a file based or other logging approach.&lt;/p&gt;

&lt;h2&gt;Making Your Scraper Navigate Forms&lt;/h2&gt;

&lt;p&gt;So now that we know how to log the output, let&amp;#8217;s do something more useful with our scraper. We can&amp;#8217;t really take our Google example from previous posts any further given how simple their interface is, so let us move over to Amazon. Say I wanted to grab a list the books on ruby that are for sale. Sure, I could probably get this information via an Amazon API&amp;#8230; but that&amp;#8217;s not really the point now is it ;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Scrubyt::Extractor.new(:log =&amp;gt; :debug) do
  fetch &amp;quot;http://www.amazon.com/&amp;quot;
  select_option &amp;quot;url&amp;quot;, &amp;quot;Books&amp;quot;
  fill_textfield &amp;quot;field-keywords&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  book_detail &amp;quot;//td[@class='dataColumn']/table/tr/td/a&amp;quot; do
    title &amp;quot;//h1[@class='parseasinTitle']&amp;quot;
    price &amp;quot;//b[@class='priceLarge']&amp;quot;
    saving &amp;quot;//td[@class='price']&amp;quot;
    isbn &amp;quot;//li[text()*='ISBN-10:']&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;#8217;s run through what we&amp;#8217;ve got here, hopefully some of it looks familiar from the previous examples we&amp;#8217;ve gone through. First we fetch the page to start with, then in the select field named &amp;#8220;url&amp;#8221; we choose the options that says &amp;#8220;Books&amp;#8221;, and we then submit the form. scRUBYt! will keep track of the last form you input any data to, so if there are multiple forms on the page then you just need to target the appropriate input fields. From there, the submit action will work out what it needs to do.&lt;/p&gt;

&lt;p&gt;Next is to define a detail block, so we point out the XPath to the heading/link for each book on the page and say we want to navigate to that page and extract the title, price, saving, etc. I&amp;#8217;ve been a little cheeky with the isbn definition, saying just find me any LI tag that contains the string &amp;#8220;ISBN-10:&amp;#8221;. If we were to look at the results generated you&amp;#8217;d see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puts @extractor.results.inspect
[{:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language [ILLUSTRATED]  (Paperback)&amp;quot;}, {:price=&amp;gt;&amp;quot;$26.39&amp;quot;}, 
          {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 0596516177&amp;quot;}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Programming Language (Paperback)&amp;quot;}, 
          {:price=&amp;gt;nil}, 
          {:saving=&amp;gt;nil}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 020171096X&amp;quot;}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Beginning Ruby: From Novice to Professional (Beginning from Novice to Professional) (Paperback)&amp;quot;}, 
          {:price=&amp;gt;&amp;quot;$26.39&amp;quot;}, 
          {:saving=&amp;gt;&amp;quot;$13.60\n      (34%)\n    &amp;quot;}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 1590597664&amp;quot;}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Beginning Ruby: From Novice to Professional (Kindle Edition)&amp;quot;}, 
          {:price=&amp;gt;nil}, 
          {:saving=&amp;gt;nil}, 
          {:isbn=&amp;gt;nil}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Programming Ruby: The Pragmatic Programmers' Guide, Second Edition [ILLUSTRATED]  (Paperback)&amp;quot;}, 
          {:price=&amp;gt;&amp;quot;$29.67&amp;quot;}, 
          {:saving=&amp;gt;&amp;quot;$15.28\n      (34%)\n    &amp;quot;}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 0974514055&amp;quot;}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;The Ruby Way, Second Edition: Solutions and Techniques in Ruby Programming (2nd Edition) (Addison-Wesley Professional Ruby Series) (Paperback)&amp;quot;}, 
          {:price=&amp;gt;&amp;quot;$29.69&amp;quot;}, 
          {:saving=&amp;gt;&amp;quot;$15.30\n      (34%)\n    &amp;quot;}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 0672328844&amp;quot;}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Ruby Way, The: Solutions and Techniques in Ruby Programming (Kindle Edition)&amp;quot;}, 
          {:price=&amp;gt;nil}, 
          {:saving=&amp;gt;nil}, 
          {:isbn=&amp;gt;nil}]}, 
 {:book=&amp;gt;[{:title=&amp;gt;&amp;quot;Learning Ruby [ILLUSTRATED]  (Paperback)&amp;quot;}, 
          {:price=&amp;gt;&amp;quot;$23.09&amp;quot;}, 
          {:saving=&amp;gt;&amp;quot;$11.90\n      (34%)\n    &amp;quot;}, 
          {:isbn=&amp;gt;&amp;quot;ISBN-10: 0596529864&amp;quot;}]}
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have a reasonable snapshot of the data. You&amp;#8217;ll see there though, that it&amp;#8217;s not perfect. Firstly, we are missing information for some results. We&amp;#8217;ve got spaces and carriage returns in the saving data, and we probably don&amp;#8217;t need the &amp;#8220;ISBN-10:&amp;#8221; string at the front of the ISBN result. And what if we wanted to link to the actual result so someone could actually buy the book on Amazon? &lt;/p&gt;

&lt;p&gt;All good questions, and all easily solvable. I&amp;#8217;ll follow it up with a post in the next day or so and highlight some of the new ways of specifying constraints on your data in scRUBYt!. And special thanks have to go to Homeflow who have been funding at least a day of time for Peter and I each week lately, hence the increased level of development in scRUBYt!. It&amp;#8217;s nice when you have clients who want to actively give back.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=TIme5k.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=TIme5k.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=bSRhjG.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=bSRhjG.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=3SqFPf.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=3SqFPf.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=wYKNNU.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=wYKNNU.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=T5hUx2.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=T5hUx2.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=xQn4qo.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=xQn4qo.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ZlWXgc.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ZlWXgc.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ZrMqrV.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ZrMqrV.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=BH4I9X.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=BH4I9X.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/510354977" height="1" width="1"/&gt;</description>
          <pubDate>Tue, 13 Jan 2009 01:20:13 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/13/more-web-scrapers-with-the-upcoming-scrubyt/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/510354977/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/13/more-web-scrapers-with-the-upcoming-scrubyt/</feedburner:origLink></item>
    
        <item>
          <title>Rails Hosting - Updated</title>
          <description>&lt;p&gt;This is just a quick note so that those subscribing to my feed or checking the site for updates are aware. I&amp;#8217;ve made a series of minor changes to the &lt;a href="http://rubypond.com/articles/2008/12/04/ruby-on-rails-hosting-round-up/"&gt;rails hosting&lt;/a&gt; post from last month based on the feedback provided by you guys. If you&amp;#8217;ve got any additional experiences with different rails hosts that you&amp;#8217;d like to share, then please send them through.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=kEaBlQ.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=kEaBlQ.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=hA4aaa.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=hA4aaa.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=NBLOwD.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=NBLOwD.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=7iG47u.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=7iG47u.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ocPlSL.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ocPlSL.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=6r31p8.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=6r31p8.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=dpw1uf.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=dpw1uf.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Qi96hk.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Qi96hk.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=KVUv9s.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=KVUv9s.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/503803159" height="1" width="1"/&gt;</description>
          <pubDate>Mon, 05 Jan 2009 23:10:53 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/05/rails-hosting---updated/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/503803159/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/05/rails-hosting---updated/</feedburner:origLink></item>
    
        <item>
          <title>Ruby on Rails Tutorials</title>
          <description>&lt;p&gt;There has been a few occasions over the previous months when various people I meet have asked me to point them in the right direction to get started with ruby on rails. I remember when I started, it was a pretty easy question to answer&amp;#8230; everyone just got pointed in the general direction of why_&amp;#8217;s poignant guide, the pickaxe book, and agile web development with rails. But things have come a long way since then. There is not only a veritable cornucopia of options now out there, but for somebody who isn&amp;#8217;t already engrossed in the community it&amp;#8217;s almost impossible to tell which ones are still relevant and useful and which ones are so dated that they&amp;#8217;ll make your attempts to learning markedly more difficult.&lt;/p&gt;

&lt;p&gt;So with that in mind, I&amp;#8217;ve attempted to compile a list of resources which are still (at least for the most part) still relevant at the time of posting. Some will have some minor inconsistencies either in implementation or current convention but I&amp;#8217;ve made a genuine effort to review and ensure they are not way out of line. If you find in errors on that front, please let me know in the comments.&lt;/p&gt;

&lt;p&gt;So without any further ado, here are the ruby on rails tutorials I&amp;#8217;ve found broken into various categories (a couple are listed in more than one):&lt;/p&gt;

&lt;h2&gt;Ruby on Rails Tutorials&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started and Example Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#models-migrations"&gt;Models/Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#controllers"&gt;Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#views"&gt;Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#routing"&gt;Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mail"&gt;Mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#performance-admin-debug"&gt;Performance, Administration, and Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#special-mention"&gt;Extra Special Mention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name="getting-started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Getting Started and Example Applications&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/getting_started_with_rails.html" rel="nofollow"&gt;Getting started with Rails&lt;/a&gt;
A great guide on building your first rails app and understanding the framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.bitwisemag.com/2/Ruby-On-Rails-Tutorial-The-Basics" rel="nofollow"&gt;Ruby On Rails Tutorial : The Basics&lt;/a&gt;
A two-part tutorial to getting up and running on rails by Huw Collingbourne.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ruby.about.com/od/rubyonrails/ss/railsblog1.htm" rel="nofollow"&gt;Building a blog&lt;/a&gt;
About.com have have this guide for Rails 2.1 which runs you through the classic &amp;#8220;15-minute blog&amp;#8221; project.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://docs.activestate.com/komodo/4.4/tutorial/railstut.html" rel="nofollow"&gt;Starting a rails project using Komodo&lt;/a&gt;
For those of you using Komodo this is a great guide to show you how to develop within Komodo and run the tests within your IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.webmonkey.com/tutorial/Ruby_on_Rails_for_Beginners" rel="nofollow"&gt;Building a bookmark manager&lt;/a&gt;
A quick introductory guide to rails and an example app to manage your bookmarks.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://godbit.com/article/beginners-guide-to-rails-part-1" rel="nofollow"&gt;Building a contact manager&lt;/a&gt;
A ruby on rails tutorial on how to get acquainted with the framework by building a contact list manager.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.oracle.com/technology/pub/articles/haefel-oracle-ruby.html" rel="nofollow"&gt;A simple product catalog&lt;/a&gt;
A tutorial from Oracle on how to create a comics catalog on top of an Oracle back-end.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://media.rubyonrails.org/video/rails_blog_2.mov" rel="nofollow"&gt;The official 15-min blog screencast&lt;/a&gt;
A rather high paced run-through of how to get a blog up and running in 15mins.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sitepoint.com/article/learn-ruby-on-rails/" rel="nofollow"&gt;The ultimate guide to ruby &amp;amp; rails&lt;/a&gt;
Quite a detailed and useful tutorial from Patrick Lenz which not only goes through rails but is a pretty decent intro to the ruby you should get your head around first too.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://betterexplained.com/articles/starting-ruby-on-rails-what-i-wish-i-knew/" rel="nofollow"&gt;What I wish I knew&lt;/a&gt;
A bit of a retrospective from someone after they got their first few rails applications under their belt.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsforum.com/viewtopic.php?id=1033" rel="nofollow"&gt;Sending Instant Messages in Rails&lt;/a&gt;
How to use XMPP and BackgroundRB to send messages to GMail and other Jabber based clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsforum.com/viewtopic.php?id=1041" rel="nofollow"&gt;Programming Conventions&lt;/a&gt;
A discussion on what exactly DRY means, why you should stick to conventions, and when you should look at optimization.&lt;/p&gt;

&lt;p&gt;&lt;a name="models-migrations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Models/Migrations&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/06/18/bulk-insertion-of-data-with-activerecord/"&gt;Bulk Insert into ActiveRecord with Rails&lt;/a&gt;
How to quickly insert multiple records at once with ActiveRecord.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.oracle.com/technology/pub/articles/haefel-oracle-ruby.html" rel="nofollow"&gt;Using Oracle&lt;/a&gt;
A tutorial from Oracle on how to create a comics catalog on top of an Oracle back-end.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2007/11/20/reject-junk-email-addresses-with-email-veracity/"&gt;Rails email validation&lt;/a&gt;
Check that a provided email address really is legit, by doing a DNS/MX lookup on the domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsforum.com/viewtopic.php?id=1011" rel="nofollow"&gt;Rail Migrations for beginners&lt;/a&gt;
This tutorial is a little dated, but thankfully the examples all still work in Rails 2.x. What I particularly like, is that they actually cover how to add an index to a column which most don&amp;#8217;t cover and thus many don&amp;#8217;t bother to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/migrations.html" rel="nofollow"&gt;Rails Guide to Migrations&lt;/a&gt;
A very detailed guide on what you can and can&amp;#8217;t do in migrations. Even I learnt a few new tricks from reading through it.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/activerecord_validations_callbacks.html" rel="nofollow"&gt;ActiveRecord Validations and Callbacks&lt;/a&gt;
All the various validation options you have, and what method callbacks you can hook into when modifying an instance of a model.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/association_basics.html" rel="nofollow"&gt;ActiveRecord Associations&lt;/a&gt;
How to link up the associations between the models in your applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/finders.html" rel="nofollow"&gt;Finding records in your database&lt;/a&gt;
A tutorial on all the various ways you can find either a single record, or a collection of records, using ActiveRecord. The built in finders, and how to pass your own custom conditions in are all handled.&lt;/p&gt;

&lt;p&gt;&lt;a name="controllers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Controllers&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2007/11/27/simplifying-rails-controllers-with-make_resourceful/"&gt;Simplify Ruby on Rails controllers with make_resourceful&lt;/a&gt;
Take advantage of the DRY approach by quickly implementing common controller actions in just a few lines of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.devarticles.com/c/a/Ruby-on-Rails/Controlling-Information-Access-with-the-Rails-Action-Controller/" rel="nofollow"&gt;Controlling Information Access&lt;/a&gt;
A quick explanation of the why/when you should make methods in your controllers private or protected.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/07/11/useful-flash-messages-in-rails/"&gt;Displaying Useful Flash Messages&lt;/a&gt;
How to provide more useful feedback on errors or actions to your users within your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/07/16/sexy-forms-in-rails/"&gt;Consistent and sexy rails forms&lt;/a&gt;
How to both DRY up your code and ensure your users get a consistent experience by using a Rails Custom Form Builder.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/actioncontroller_basics.html" rel="nofollow"&gt;ActionController Basics&lt;/a&gt;
How to use filters, disabling the session, cookies, authentication, and protecting against forgery. It&amp;#8217;s called basics, but it covers quite a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2007/12/13/new-error-handling-in-rails-2-0/"&gt;Catching rails error messages&lt;/a&gt;
An easy example of how to use the 2.x approach to catching errors in your rails applications.&lt;/p&gt;

&lt;p&gt;&lt;a name="views"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Views&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/form_helpers.html" rel="nofollow"&gt;Introduction to form helpers&lt;/a&gt;
A quick tutorial on when you should use the object/model based form helpers in rails, and when you should use the standard ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/layouts_and_rendering.html" rel="nofollow"&gt;Rendering layouts and views&lt;/a&gt;
How to render a response to the web browser within your rails app. Also goes into providing only a HEAD response, nesting layouts, using partials, redirects, and using yield.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/01/03/unobtrusive-javascript-with-lowpro/"&gt;Implementing unobtrusive javascript in rails&lt;/a&gt;
How to stop using the built-in javascript helpers and instead use lowpro to keep your views and code clean.&lt;/p&gt;

&lt;p&gt;&lt;a name="routing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Routing&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://adam.blog.heroku.com/past/2007/12/20/nested_resources_in_rails_2/" rel="nofollow"&gt;Nested Resources in Rails 2.x&lt;/a&gt;
A guide to bring you up to speed on the changes between the way resources work in 1.x and the 2.x releases.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/routing_outside_in.html" rel="nofollow"&gt;Rails Routing from the Outside-In&lt;/a&gt;
A very comprehensive guide on how to configure and use the routing options in rails.&lt;/p&gt;

&lt;p&gt;&lt;a name="mail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Mail&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2007/11/16/trap-rails-from-sending-mail-via-smtp/"&gt;Stop Rails from sending email&lt;/a&gt;
A useful way to check that mail is getting sent, without actually sending it.&lt;/p&gt;

&lt;p&gt;&lt;a name="testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2007/12/10/testing-xml-output-in-rspec-and-rails/"&gt;Test Rails XML Output with rspec&lt;/a&gt;
How to easily test XML output using rspec.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/01/07/testing-web-services-with-rspec/"&gt;Testing webservices using rspec&lt;/a&gt;
A guide on testing the old style SOAP/XML webservices with rspec.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/03/31/using-rspec-have_tag/"&gt;Using rspec have_tag&lt;/a&gt;
How to test anything you need to in a view with rspec have_tag&lt;/p&gt;

&lt;p&gt;&lt;a name="performance-admin-debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Performance, Administration, and Debugging&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/02/06/improving-rails-app-and-mongrel-performance-with-thin/"&gt;Improve Rails Performance with Thin&lt;/a&gt;
A tutorial on replacing mongrel or webrick with the event driven thin web server.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/04/08/letting-nginx-automatically-detect-new-rails-apps/"&gt;Let nginx automatically become aware of your Rails apps&lt;/a&gt;
How to configure nginx to automatically become aware of any new apps you deploy and start serving them without any additional configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/04/07/rails-god-config/"&gt;Monitoring your Rails app with god&lt;/a&gt;
How to use the god monitoring tool to manage, start, stop, and restart your rails app.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://effectif.com/2008/4/8/monitoring-backgroundrb-with-god"&gt;Monitoring BackgroundRB with god&lt;/a&gt;
Another tutorial on using god, this one for monitoring BackgroundRB.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/06/18/bulk-insertion-of-data-with-activerecord/"&gt;Improving Bulk Data Insertion with ActiveRecord&lt;/a&gt;
Reduce the number of round-trips to the database by batch inserting records into ActiveRecord.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/07/17/the-complete-guide-to-setting-up-starling/"&gt;Background Processing with Starling&lt;/a&gt;
How to off-load long running tasks to a queue so that you don&amp;#8217;t tie up your webserver processes requests needlessly.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsenvy.com/2007/2/28/rails-caching-tutorial" rel="nofollow"&gt;Ruby on Rails Caching Tutorial&lt;/a&gt;
Another two-part tutorial. This one, by Gregg from RailsEnvy, runs through the various ruby on rails caching options and how to implement them to improve the performance of your site.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsenvy.com/2007/6/11/ruby-on-rails-rake-tutorial" rel="nofollow"&gt;Ruby on Rails Rake Tutorial&lt;/a&gt;
Gregg from RailsEnvy again running through how to make the most of rake. If you&amp;#8217;re not already writing your own custom tasks in rake you should definitely take a look because there is probably a handful of things your could (and should) be doing in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sitepoint.com/article/debug-rails-app-ruby-debug/" rel="nofollow"&gt;Debug your app with ruby-debug&lt;/a&gt;
I don&amp;#8217;t know how I ever diagnosed problems in development before I learnt how
to use ruby-debug. If you&amp;#8217;ve got applications even just staring to come together, you really need to get your head around this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.rubyinside.com/19-rails-tricks-most-rails-coders-dont-know-131.html" rel="nofollow"&gt;19 Rails Tricks Most Rails Coders Don&amp;#8217;t Know&lt;/a&gt;
Not a tutorial per se, but a good collection of handy tips on how to benchmark performance, test various aspects of your app, improve it&amp;#8217;s performance, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.railsforum.com/viewtopic.php?id=872" rel="nofollow"&gt;Reading a stack trace&lt;/a&gt;
You&amp;#8217;re inevitably going to see a few when your developing, you better learn how to make sense of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/security.html" rel="nofollow"&gt;Ruby on Rails Security Guide&lt;/a&gt;
Storing and protecting the session, user management, projecting from injection, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/debugging_rails_applications.html" rel="nofollow"&gt;Debugging Rails Applications&lt;/a&gt;
How to use views to help you debug your app, detecting memory leaks, and using the logger.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/benchmarking_and_profiling.html" rel="nofollow"&gt;Benchmarking and Profiling Rails&lt;/a&gt;
The why and how of benchmarking and profiling. Still a work in progress.&lt;/p&gt;

&lt;p&gt;&lt;a name="misc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Miscellaneous&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/12/08/custom-starting-templates-for-rails-apps/"&gt;Define your own base rails framework with templates&lt;/a&gt;
Stop manually importing and installing all the same plugins in all of your applications, define a template in just a few lines and let rails know what it should start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/06/26/make-your-own-im-bot-in-ruby-and-interface-it-with-your-rails-app/"&gt;Integrate an IM Bot into your Rails App &lt;/a&gt;
How to make an Instant Messaging BOT and use it in your rails application.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://guides.rails.info/creating_plugins.html" rel="nofollow"&gt;Creating Plugins&lt;/a&gt;
How to create a plugin for use in your rails app.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubypond.com/articles/2008/02/08/improved-timezones-in-rails-2-1/"&gt;Working with Rails Timezones&lt;/a&gt;
How to use the 2.x enhancements to easily switch between timezones or display dates/times in a users local zone.&lt;/p&gt;

&lt;p&gt;&lt;a name="special-mention"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Super extra special mention&lt;/h2&gt;

&lt;p&gt;Ryan Bates is simply tireless in providing useful screencasts showing various bits of functionality and tips within rails. If I was to list each of the ones I thought would be useful here, then the list would probably be 3 times longer than it already is. Instead, make sure you check out &lt;a href="http://railscasts.com/" rel="nofollow"&gt;Railscasts&lt;/a&gt; and scan through the archive.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=bqebez.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=bqebez.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=IbihHj.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=IbihHj.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=rU86GS.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=rU86GS.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=sbuxrU.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=sbuxrU.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Z5vCeE.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Z5vCeE.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=WaDaYG.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=WaDaYG.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=xNaP8t.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=xNaP8t.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=lNj9rg.P"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=lNj9rg.P" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Alxpx1.p"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Alxpx1.p" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/503002357" height="1" width="1"/&gt;</description>
          <pubDate>Mon, 05 Jan 2009 02:34:09 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2009/01/05/ruby-on-rails-tutorials/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/503002357/</link>
        <feedburner:origLink>http://rubypond.com/articles/2009/01/05/ruby-on-rails-tutorials/</feedburner:origLink></item>
    
        <item>
          <title>Web Spider Creation with scRUBYt! - Part II </title>
          <description>&lt;p&gt;Continuing on from the previous post, &lt;a href="/articles/2008/12/09/web-spidering-and-data-extraction-with-scrubyt/"&gt;Web Spidering and Data Extraction with scRUBYt!&lt;/a&gt;, this article will help you delve a little deeper with the &lt;a href="http://www.scrubyt.org"&gt;scRUBYt! scraping framework&lt;/a&gt; both in terms of your understanding of how to use it&amp;#8230; and actually delving deeper in your crawl to more pages.&lt;/p&gt;

&lt;h2&gt;A quick recap on the last web spider&lt;/h2&gt;

&lt;p&gt;So as far as we got last week was to go off to Google, put in a search for the word &amp;#8220;ruby&amp;#8221;, and then list the link text for each of the results. Here&amp;#8217;s the code we ended up with to get that far:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_title &amp;quot;//h3[@class='r']&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;How to scrape deeper pages&lt;/h2&gt;

&lt;p&gt;But this is a fairly contrived example, and it&amp;#8217;s not exactly going to save you a huge amount of time over a quick manual copy-and-paste job from the results page. But what if you didn&amp;#8217;t want to just have a list of the links, you wanted some kind of summary or additional detail on each of the links? Lets actually go to each website, and see what kind of content they&amp;#8217;ve got and grab something useful from it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_detail &amp;quot;//h3[@class='r']/a&amp;quot; do
    page_body &amp;quot;//body&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you offer up the XPath to a link element with a result name ending in _detail, and then pass in a block, scRUBYt! will follow the link before trying to process the block. That means we can use this technique for following each of the results Google gives us, and at each we return all of the text contain on the page between the &amp;lt;body&amp;gt; tags. &lt;/p&gt;

&lt;p&gt;Now you could take the hash returned, and do some post processing on it to get something meaningful from the text extracted. But for the sake of example, I&amp;#8217;ll make some big assumptions and assume that every page is going to have at least a &amp;lt;title&amp;gt; tag, and a &amp;lt;p&amp;gt; tag with more than just a few words in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_detail &amp;quot;//h3[@class='r']/a&amp;quot; do
    title &amp;quot;//title&amp;quot;
    summary &amp;quot;//p&amp;quot;, :script =&amp;gt; Proc.new{|result| result if result.match(%r{(\w+\W+){25}})}
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may have noticed, you can pass a proc in as a parameter to your result definition. The output of the XPath match will be passed in to the proc, and the result ultimately returned as the final result for that definition? Make sense? If not, what I&amp;#8217;ve done above is look for all &amp;lt;p&amp;gt; tags on the page and pass them in to my proc definition. The proc then runs a regexp against it to check that at least 25 words exist within the &amp;lt;p&amp;gt;, if there is then all the &amp;lt;p&amp;gt; content is returned otherwise nil is returned.&lt;/p&gt;

&lt;h2&gt;What if the results are paginated?&lt;/h2&gt;

&lt;p&gt;You could potentially create a highly recursive extractor to handle this, but it&amp;#8217;s such a common case that we&amp;#8217;ve included a method to do it for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_detail &amp;quot;//h3[@class='r']/a&amp;quot; do
    title &amp;quot;//title&amp;quot;
    summary &amp;quot;//p&amp;quot;, :script =&amp;gt; Proc.new{|result| result if result.match(%r{(\w+\W+){25}})}
  end
  next_page &amp;quot;//a[text()*='Next']&amp;quot;, :limit =&amp;gt; 2
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#8217;ve used the XPath text() function here to highlight its usefulness. I use it quite a lot as a shortcut to get things working and test, and it&amp;#8217;s been a lifesaver in many scenarios where the markup is inconsistent or you want to keep the scraper definition generic. And thankfully, it works for this scenario. However, be wary of using it as is in production as it may have some unexpected side effects. If one of the results that came back had the word &amp;#8220;Next&amp;#8221; in the title, then scRUBYt! would diligently follow that link and you&amp;#8217;d end up on the wrong page.&lt;/p&gt;

&lt;h2&gt;What&amp;#8217;s next?&lt;/h2&gt;

&lt;p&gt;In the next installment I&amp;#8217;ll briefly cover how to handle logging of the scrape to help you diagnose any problems, and how to handle more complex form completion.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=w31rO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=w31rO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=TahJo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=TahJo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=SM6tO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=SM6tO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=VIHcO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=VIHcO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=K1r4O"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=K1r4O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ScIfO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ScIfO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=mgMuo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=mgMuo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=d963O"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=d963O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=Of8fo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=Of8fo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/487474987" height="1" width="1"/&gt;</description>
          <pubDate>Wed, 17 Dec 2008 10:00:35 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2008/12/17/web-spider-creation-with-scrubyt---part-ii/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/487474987/</link>
        <feedburner:origLink>http://rubypond.com/articles/2008/12/17/web-spider-creation-with-scrubyt---part-ii/</feedburner:origLink></item>
    
        <item>
          <title>Web Spidering and Data Extraction with scRUBYt!</title>
          <description>&lt;p&gt;Some of you may be aware that I work on (time permitting) the &lt;a href="http://www.scrubyt.org" rel="nofollow"&gt;scRUBYt! project&lt;/a&gt; with &lt;a href="http://www.rubyrailways.com/" rel="nofollow"&gt;Peter Szinek&lt;/a&gt;. Hopefully some of you have actually found an excuse to use the tool, I know there are quite a few hundred other satisfied users out there. Well Peter has been furiously working away on polishing up the lastest release, we&amp;#8217;ve also gone back and refactored a lot of the internals and improved the test coverage of library. Given the gnarly levels of recursion in it, at times it was proving difficult to add in the new features we wanted. &lt;/p&gt;

&lt;p&gt;The &lt;a href="http://github.com/scrubber/scrubyt/tree/skimr" rel="nofollow"&gt;skimr&lt;/a&gt; branch is our first attempt at refactoring, but to do it we&amp;#8217;ve sacrificed quite a lot. A lot of functionality is currently missing, and the syntax has changed slightly. I wouldn&amp;#8217;t yet consider this to be a release candidate, but it has been getting used successfully for a few months now in production so I think it&amp;#8217;s worth a look.&lt;/p&gt;

&lt;h2&gt;Whats new?&lt;/h2&gt;

&lt;p&gt;Well apart from being a lot less code, it&amp;#8217;s significantly faster and requires much less RAM on larger web scrapes. This is in part due to the fact that you can now stream your results out to a file, rather than trying to hold your entire dataset in memory before dumping them. If you don&amp;#8217;t stream your results out to a file, the default is to return them as a Hash making it much easier to develop custom output handlers, or integrate the results into your existing ruby code.&lt;/p&gt;

&lt;h2&gt;Creating your own web crawler&lt;/h2&gt;

&lt;p&gt;To begin with, we will start with the tried and true google/ruby example that has served so well with previous scRUBYt! releases. So we start by defining a new Skimr extractor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll notice here we pass in an agent type. It&amp;#8217;s an optional parameter, and if you leave it out it will default to :standard which means a combination of mechanize/hpricot to parse your results. Others will become available in future releases to allow you to scrape AJAX heavy sites again. Next, to tell it what page we want to start at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we run over to Google (the &lt;em&gt;ncr&lt;/em&gt; bit tells Google not to redirect me to a country specific site), because we&amp;#8217;re about to start a search:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully the above is fairly obvious, we&amp;#8217;ve entered the term &amp;#8220;ruby&amp;#8221; into the field named &amp;#8220;q&amp;#8221;, and hit submit. Play along in &lt;a href="http://www.google.com/search?hl=en&amp;amp;q=ruby&amp;amp;btnG=Google+Search&amp;amp;aq=f&amp;amp;oq=" rel="nofollow"&gt;your browser&lt;/a&gt; so you can see what we are playing with.&lt;/p&gt;

&lt;h2&gt;Extracting data from the website&lt;/h2&gt;

&lt;p&gt;Okay, so we&amp;#8217;ve got the navigation part covered. Now we want to pull out a list of all the results, it&amp;#8217;s quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extractor = Skimr::Extractor.new(:agent =&amp;gt; :standard) do
  fetch &amp;quot;http://www.google.com/ncr&amp;quot;
  fill_textfield &amp;quot;q&amp;quot;, &amp;quot;ruby&amp;quot;
  submit
  page_title &amp;quot;//h3[@class='r']&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just provide an XPath to the element on the page that you want, and scRUBYt! will extract all elements that fit that definition. As the results are now available as a Hash object we could simply do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; @extractor.results.first
=&amp;gt; {:page_title=&amp;gt;&amp;quot;Ruby Programming Language&amp;quot;}
&amp;gt;&amp;gt; @extractor.results.last
=&amp;gt; {:page_title=&amp;gt;&amp;quot;Welcome! [Ruby-Doc.org: Documenting the Ruby  Language]&amp;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#8217;ll follow this up in a couple of days with some examples of scraping deeper pages, merging multiple result sets, some of the new features we&amp;#8217;ve included, and talk about some of the future enhancements that are coming soon.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=isFoO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=isFoO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=3Mvoo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=3Mvoo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=uatcO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=uatcO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=5X6YO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=5X6YO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=fTelO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=fTelO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=u2zEO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=u2zEO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=gmuzo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=gmuzo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=nrRHO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=nrRHO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=du20o"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=du20o" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/479405026" height="1" width="1"/&gt;</description>
          <pubDate>Tue, 09 Dec 2008 10:14:45 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2008/12/09/web-spidering-and-data-extraction-with-scrubyt/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/479405026/</link>
        <feedburner:origLink>http://rubypond.com/articles/2008/12/09/web-spidering-and-data-extraction-with-scrubyt/</feedburner:origLink></item>
    
        <item>
          <title>Custom Starting Templates for Rails Apps</title>
          <description>&lt;p&gt;Okay, so I&amp;#8217;ve been a little slow on the uptake on this one. But for anybody else that missed it, you can now define your own standard setup for a rails app. (And kudos to &lt;a href="http://www.rubyrailways.com/hot-in-edge-rails-generate-rails-apps-from-templates/" rel="nofollow"&gt;Peter Szinek&lt;/a&gt;, who I work with on the leading ruby &lt;a href="http://scrubyt.org/"&gt;web spider/data scraping&lt;/a&gt; library, for the heads up on this last week)&lt;/p&gt;

&lt;h2&gt;Reducing the time taken to start coding&lt;/h2&gt;

&lt;p&gt;That&amp;#8217;s essentially what this change does. Most of us probably have out preferred setup, especially if we&amp;#8217;ve deployed a few sites. Typically I create the rails directory structure, then pull in HAML, rspec, rspec on rails, my form helper, restful auth, etc. It&amp;#8217;s not terribly difficult, but it is laborious. Well someone else I once worked with, &lt;a href="http://www.jeremymcanally.com/" rel="nofollow"&gt;Jeremy McAnally&lt;/a&gt; (woo!, look at me name drop ;), created a great little tool called &lt;a href="http://github.com/jeremymcanally/rg/tree/master/" rel="nofollow"&gt;rg&lt;/a&gt; which would allow you to define your own templates for when you create a new application. Now just like engines has been pulled into the latest edge core to give rails the same ability as merb-slices, so too has rg now been pulled in to match the functionality offered by creating your own custom merb-stack.&lt;/p&gt;

&lt;h2&gt;How to create a custom rails template&lt;/h2&gt;

&lt;p&gt;So if like me you have your usual grab bag you want to setup when you start a new app, you can define your own &lt;em&gt;template.rb&lt;/em&gt; file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run &amp;quot;rm public/index.html&amp;quot;
git :init

plugin &amp;quot;rspec&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/dchelimsky/rspec.git&amp;quot;, :submodule =&amp;gt; true
plugin &amp;quot;rspec-rails&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/dchelimsky/rspec-rails.git&amp;quot;, :submodule =&amp;gt; true
plugin &amp;quot;exception-notifier&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/rails/exception_notification.git&amp;quot;, :submodule =&amp;gt; true
plugin &amp;quot;restful-authentication&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/technoweenie/restful-authentication.git&amp;quot;, :submodule =&amp;gt; true
plugin &amp;quot;semantic-form-builder&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/rubypond/semantic_form_builder.git&amp;quot;, :submodule =&amp;gt; true
plugin &amp;quot;paperclipped&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/kbingman/paperclipped.git&amp;quot;, :submodule =&amp;gt; tru

gem &amp;quot;will-paginate&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/mislav/will_paginage.git&amp;quot;
gem &amp;quot;haml&amp;quot;, :git =&amp;gt; &amp;quot;git://github.com/nex3/haml.git&amp;quot;
rake &amp;quot;gems:install&amp;quot;, :sudo =&amp;gt; true
run &amp;quot;haml --rails .&amp;quot;

route &amp;quot;map.login '/login', :controller =&amp;gt; 'sessions', :action =&amp;gt; 'new'&amp;quot;

rakefile(&amp;quot;cruise_controle.rake&amp;quot;) do
  &amp;lt;&amp;lt;-TASK
    desc &amp;quot;Run all the tests, including API and acceptance tests&amp;quot;
    task :cruise do
      Rake::Task['db:migrate'].invoke
      Rake::Task['spec'].invoke
      Rake::Task['spec:stories'].invoke
      Rake::Task['metrics:all'].invoke
      Rake::Task['flogger:record'].invoke
    end
  TASK
end

initializer 'form_builder.rb', &amp;lt;&amp;lt;-CODE
  ActionView::Base.default_form_builder = SemanticFormBuilder
CODE

generate(&amp;quot;authenticated&amp;quot;, &amp;quot;user session&amp;quot;)
generate(&amp;quot;rspec&amp;quot;)

rake(&amp;quot;db:migrate&amp;quot;)

git :add =&amp;gt; &amp;quot;.&amp;quot;
git :commit =&amp;gt; &amp;quot;-a -m 'Initial commit'&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is quite a lot going on there, I&amp;#8217;ll quickly run through what I&amp;#8217;ve done. Firstly, I&amp;#8217;ve deleted &lt;em&gt;index.html&lt;/em&gt; as I never use it. Next we initialise a local git repository and pull in all the plug-ins I want (as git submodules). Next we have a couple of gems I need, so we define them and install (using sudo) if they&amp;#8217;re not already on the system. I setup a route to the login page, create a rake task to run cruise, an initializer to change the default form builder to be my own. And then finally I create the user/session models for restful-authentication, migrate the database, and commit all the changes.&lt;/p&gt;

&lt;h2&gt;Running your custom template&lt;/h2&gt;

&lt;p&gt;Now to create a new rails app using this template do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails my_new_app -m ~/template.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or alternatively if you work across various machines you can post the template up to a server (git, your own box, etc) and specify a full HTTP to the remote file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails my_new_app -m http://gist.github.com/33443.txt&lt;/code&gt;&lt;/pre&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=iHzeO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=iHzeO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=KCELo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=KCELo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=FDdgO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=FDdgO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=azMZO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=azMZO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ue8mO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ue8mO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=fozGO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=fozGO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=mhu9o"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=mhu9o" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=bqcaO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=bqcaO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=mbX1o"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=mbX1o" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/478438007" height="1" width="1"/&gt;</description>
          <pubDate>Mon, 08 Dec 2008 12:33:23 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2008/12/08/custom-starting-templates-for-rails-apps/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/478438007/</link>
        <feedburner:origLink>http://rubypond.com/articles/2008/12/08/custom-starting-templates-for-rails-apps/</feedburner:origLink></item>
    
        <item>
          <title>Ruby on Rails Hosting Round-up</title>
          <description>&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; I&amp;#8217;ve extended this post based on the feedback in some of the comments. So I haven&amp;#8217;t used all of the rails hosts listed here, but I&amp;#8217;ll make it clear which those are.&lt;/p&gt;

&lt;p&gt;Working for various clients and along side various colleagues over the years, I&amp;#8217;ve been witness to a whole number of hosting providers in the ruby/rails space. Some are great, others acceptable, and a few were just down right terrible. So how do you go about choosing which host is the right one for you? Read on&amp;#8230;&lt;/p&gt;

&lt;p&gt;One of the early things I came to appreciate when working with rails was how it made me get more involved with the rest of the eco-system on the server. Previously I&amp;#8217;d just copy an ASP/.Net app across a share, maybe restart IIS. Or I&amp;#8217;d upload some PHP and maybe setup a virtual host entry for Apache and be done with it. Now it&amp;#8217;s not uncommon to have to create a deploy user, install some gems, maybe download a few dependencies (imagemagick?) and compile them on the server. Not to mention setting up monit or god to monitor various processes. With all that in mind, I&amp;#8217;ve given up on paying the extra money to get a &lt;em&gt;&amp;#8220;managed service&amp;#8221;&lt;/em&gt;. More often than not it all goes out the window because I&amp;#8217;m using a package I compiled myself rather than the dated version in the package management system, or they just don&amp;#8217;t have enough of a clue on the ruby/rails front to be useful. So to make this a somewhat level playing field, keep in mind that I&amp;#8217;m working under that basis that anything software related you need to be able to resolve yourself with these providers (if they give you access). We will leave hardware up to them.&lt;/p&gt;

&lt;h2&gt;Unmanaged Rails Hosting&lt;/h2&gt;

&lt;p&gt;So without further ado, here&amp;#8217;s my list of personal experiences if you&amp;#8217;re willing to go the unmanaged route.&lt;/p&gt;

&lt;h3&gt;&lt;a href=" http://www.serverbeach.com/catalog/cust_ref_landing_new.php?REF=58X87H9SEH" rel="nofollow"&gt;Serverbeach&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is the unmanaged brand of Peer1, and they&amp;#8217;re who I currently host all of my own production and development sites with. I really can&amp;#8217;t endorse them highly enough. You can have a low-end dedicated server for development purposes from as little as $75/month, and they&amp;#8217;ll often run specials so watch their page. I grabbed a quad-core dual xeon with 2GB of RAM, and a 2000GB transfer allowance for $179/month (they currently have RAID capable dual-core Xeons for $139). A choice of server locations if that is important to you, as well as hardware firewall, backup, and all the various offerings you come to expect. They also send a survey around each year and customers get to vote on what new offerings they should provide. Cloud computing was on the list this year, lets see if it turns out to be as competitive as EC2 and the like.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.rimuhosting.com/" rel="nofollow"&gt;Rimuhosting&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another excellent provider. I&amp;#8217;ve used these guys as my main provider for quite a while until our needs got a little too much for a fully worked VPS, and their dedicated plans just didn&amp;#8217;t quite match the value Serverbeach offered. That being said, unless you&amp;#8217;ve got particularly high transfer or memory requirements I doubt you&amp;#8217;ll have any problems at all with what they offer. I still have one of our sites running over there, and a number of client sites, and I have no intention of moving.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.railsmachine.com/" rel="nofollow"&gt;RailsMachine&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;ve worked on these quite a bit for various clients, and I feel a little ho hum. There&amp;#8217;s not as though there is anything exactly wrong with the product they offer, I just think for the price point ($250/month for a dedicated CPU) it&amp;#8217;s a little on the expensive side for what you get. It&amp;#8217;s almost a cross between an unmanaged and fully managed setup. You pay the price of the latter but set a lot of it up yourself by running a series of scripts and installing local gems (as detailed on their wiki).&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.a2hosting.com/" rel="nofollow"&gt;A2Hosting&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now I need to put a disclaimer on this one at the preface; I haven&amp;#8217;t used these guys in almost three years, and hopefully things have changed since then. However, at the time their rails support was dreadful. I only ever ran one site there which was a rather simple blog, and uploading images and resizing with rmagick (ala attachment_fu/paperclip) resulted in me bringing down what was obviously a seriously overloaded server. And from what I was informed it wasn&amp;#8217;t just my account which was affected, it would halt any VPS running on the same physical machine. After being unable to place any kind of CPU quota on my account to stop other from being affected, or having a box more suitable for running rails as advertised I had to take things elsewhere. Suffice to say, I&amp;#8217;ve not been back.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.slicehost.com/" rel="nofollow"&gt;Slicehost&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;ve not used them personally, but have worked closely with quite a few people who host their sites on them. For the money ($20/month), they&amp;#8217;re hard to beat. And if all you need is a VPS to run your blog, I&amp;#8217;d think you&amp;#8217;d be hard pressed beating them for value.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.linode.com/" rel="nofollow"&gt;Linode&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another one I&amp;#8217;ve not used personally, but it got a few mentions within the comments of the article when I first posted it so I thought it was worthy of pointing out. They have their own management panel and run your setup using Xen. Prices start from US$19.95/month and include 200GB data transfer.&lt;/p&gt;

&lt;h2&gt;Managed Services&lt;/h2&gt;

&lt;p&gt;At the other end of the spectrum is the fully managed services. Take all the worry out of actually building your box and only concern yourself with deployment. If that&amp;#8217;s the kind of dream you think you&amp;#8217;re willing to pay for, then your options are:&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.engineyard.com/" rel="nofollow"&gt;Engine Yard&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The big daddy in the ruby/rails hosting world, if you&amp;#8217;ve not heard of them you must obviously have been living under a rock. At $399+/month you&amp;#8217;re comparatively paying through the nose when measured against the unmangaged offers, but when the the employee lists consists of the likes of Ezra Zygumnowitcz, Yehuda Katz, Evan Phoenix, etc. then I don&amp;#8217;t think you&amp;#8217;re going to find a better crack squad of ruby experts to manage things for you.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.rackspace.com/" rel="nofollow"&gt;Rackspace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;They&amp;#8217;ve been in the game for years, long before rails was on the scene, and they are seriously excellent for most hosting needs. I&amp;#8217;ve only used them a few times, and only have good things to say. However, feedback in the comments seems to indicate that for rails based apps their support is lacking. They don&amp;#8217;t advertise their price on their site, but expect it to be somewhere above $400/month. At that price, it&amp;#8217;s hard for them to be a serious consideration against EngineYard.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.peer1.com/" rel="nofollow"&gt;Peer1&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;ServerBeach back again with their managed offering. I can&amp;#8217;t really say much more other than their hardware is exceptional and their support when I&amp;#8217;ve needed it likewise. You&amp;#8217;ll need to contact them for details on price.&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.railsmachine.com/" rel="nofollow"&gt;RailsMachine&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another one back again with a managed offering, this time for $349/month. On top of your hosting monthly hosting fees it puts them above most the others in terms of cost. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are a heap to choose from, and far too many for me to be able to give an experienced and qualified view on. Personally though, I&amp;#8217;m quite happy with my unmanaged dedicated servers and having a separate management contract for the ones that I need to maintain five 9 uptime with. It gives me the business continuity I want and the comfort of having a much closer personal relationship with a handful of people who actually know and understand my business, at a price that is significantly lower than most of the packaged deals.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to hear from others out there that have had experiences with other hosting providers though so please leave your thoughts, good or bad, in the comments section.&lt;/p&gt;

&lt;p&gt;Oh, and if you&amp;#8217;re after someone to help manage your server I use these guys &lt;a href="http://www.atalanta-systems.com/" rel="nofollow"&gt;Atalanta Systems&lt;/a&gt; and &lt;a href="http://www.facebook.com/pages/Bitfield-Consulting/6174254583" rel="nofollow"&gt;Bitfield Consulting&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=DnebO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=DnebO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=3KiSo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=3KiSo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=ho2mO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=ho2mO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=W8YOO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=W8YOO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=nai0O"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=nai0O" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=EjxqO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=EjxqO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=hqNvo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=hqNvo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=aPRtO"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=aPRtO" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~f/rubypond/JXRc?a=yXWWo"&gt;&lt;img src="http://feeds.feedburner.com/~f/rubypond/JXRc?i=yXWWo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/rubypond/JXRc/~4/475147768" height="1" width="1"/&gt;</description>
          <pubDate>Thu, 04 Dec 2008 23:18:27 GMT</pubDate>
          <guid isPermaLink="false">http://rubypond.com/articles/2008/12/04/ruby-on-rails-hosting-round-up/</guid>
          <link>http://feeds.feedburner.com/~r/rubypond/JXRc/~3/475147768/</link>
        <feedburner:origLink>http://rubypond.com/articles/2008/12/04/ruby-on-rails-hosting-round-up/</feedburner:origLink></item>
    
    
  </channel>
</rss>
