<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/rss2full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><!--Generated by Squarespace Site Server v5.0.0 (http://www.squarespace.com/) on Thu, 22 Jan 2009 13:35:43 GMT--><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Ruby on Rails Security Project</title><link>http://www.rorsecurity.info/journal/</link><description /><copyright /><language>en-US</language><generator>Squarespace Site Server v5.0.0 (http://www.squarespace.com/)</generator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" href="http://feeds.feedburner.com/RubyOnRailsSecurity" type="application/rss+xml" /><feedburner:emailServiceId xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">792732</feedburner:emailServiceId><feedburner:feedburnerHostname xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.feedburner.com</feedburner:feedburnerHostname><item><title>[WebappSec] Browser Security Handbook</title><dc:creator>Heiko</dc:creator><pubDate>Thu, 22 Jan 2009 13:28:16 +0000</pubDate><link>http://www.rorsecurity.info/journal/2009/1/22/webappsec-browser-security-handbook.html</link><guid isPermaLink="false">280802:2845483:2889694</guid><description>&lt;p&gt;The &lt;a href="http://code.google.com/p/browsersec/wiki/Main" target="_blank"&gt;Browser Security Handbook&lt;/a&gt; is a free and no-nonsense guide to the security concepts in today's main browsers. It covers all security features, explains why and in which browsers certain attack methods work and talks about experimental security mechanisms in browsers. It's a recommended read for everyone who creates web applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/browsersec/wiki/Main" target="_blank"&gt;Browser Security Handbook&lt;/a&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/519823331" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2889694.xml</wfw:commentRss></item><item><title>Circumvent Rails CSRF Protection</title><dc:creator>Heiko</dc:creator><pubDate>Wed, 19 Nov 2008 08:46:46 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/11/19/circumvent-rails-csrf-protection.html</link><guid isPermaLink="false">280802:2845483:2583091</guid><description>&lt;p&gt;There is a security-related bug in &lt;span style="text-decoration: underline;"&gt;Ruby on Rails 2.1.x and all 2.2. pre-releases&lt;/span&gt;. The CSRF protection given by&lt;br /&gt;the protect_from_forgery method may possibly be circumvented by a crafted request.&lt;/p&gt;
&lt;p&gt;The problem is that Rails by design will not check the &lt;a href="http://guides.rubyonrails.org/security.html#_csrf_countermeasures" target="_blank"&gt;authenticity token&lt;/a&gt; if the request has certain content types that are typically not generated by browsers. According to the &lt;a href="http://groups.google.com/group/rubyonrails-security/browse_thread/thread/d741ee286e36e301?hl=en" target="_blank"&gt;original security message&lt;/a&gt;, this list also includes "text/plain" which may be generated by browsers. This &lt;a href="http://pseudo-flaw.net/content/web-browsers/form-data-encoding-roundup/" target="_blank"&gt;form data encoding roundup&lt;/a&gt; gives an overview of what can be generated by today's browsers. See &lt;a href="http://github.com/rails/rails/commit/099a98e9b7108dae3e0f78b207e0a7dc5913bd1a" target="_blank"&gt;this changset&lt;/a&gt; for details of which content types will be checked.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Possible Exploit&lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;The content type can be set with the enctype attribute in HTML forms:&lt;/p&gt;
&lt;p&gt;&amp;lt;form method="post" enctype="text/plain" action="&amp;lt;%= some_post_action_path(@var) %&amp;gt;"&amp;gt;&amp;lt;%= submit_tag "Start" %&amp;gt;&amp;lt;/form&amp;gt;&lt;/p&gt;
&lt;p&gt;This was found in this &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/1145-bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request#ticket-1145-29" target="_blank"&gt;Lighthouse ticket&lt;/a&gt;. The &lt;a href="http://groups.google.com/group/rubyonrails-security/browse_thread/thread/d741ee286e36e301?hl=en" target="_blank"&gt;original security message&lt;/a&gt; states that Rails does not parse the parameters for these requests. However, I was able to craft requests where all parameters where correctly parsed and used.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Temporary Solution&lt;/h2&gt;
&lt;p&gt;Users of 2.1.x releases are advised to insert the following code into a file in config/initializers/&lt;/p&gt;
&lt;p&gt;Mime::Type.unverifiable_types.delete(:text)&lt;/p&gt;
&lt;p&gt;Or you apply &lt;a href="http://github.com/rails/rails/commit/099a98e9b7108dae3e0f78b207e0a7dc5913bd1a" target="_blank"&gt;this patch&lt;/a&gt; for the 2.1.x releases. Users of Edge Rails should upgrade to the latest version.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Fixes&lt;/h2&gt;
&lt;p&gt;Fixes will be in Rails version &lt;a href="http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/milestones" target="_blank"&gt;2.1.3 and 2.2.2&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/458403475" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2583091.xml</wfw:commentRss></item><item><title>Rails Security Guide and Book</title><dc:creator>Heiko</dc:creator><pubDate>Tue, 04 Nov 2008 11:10:38 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/11/4/rails-security-guide-and-book.html</link><guid isPermaLink="false">280802:2845483:2513672</guid><description>&lt;p&gt;That's it, the Ruby on Rails Security guide is ready. It is available as a Rails manual at &lt;a href="http://guides.rubyonrails.org/security.html"&gt;http://guides.rubyonrails.org/security.html&lt;/a&gt; and as a free e-book at &lt;a href="http://www.rorsecurity.info/the-book/"&gt;http://www.rorsecurity.info/the-book/&lt;/a&gt;. The first batch of &lt;a href="http://guides.rubyonrails.org/"&gt;the new Rails Guides&lt;/a&gt; also includes 14 other quality manuals ranging from "Getting started", routing, testing and debugging.&lt;/p&gt;
&lt;p&gt;So far, the online version of the guide is one long page, I hope it will be seperated soon. Meanwhile you can read the e-book version of it. For those of you looking for a quick overview of good practice and countermeasures, scan the document for the fragments &lt;span style="background-color: #fffcdb;"&gt;that are highlighted.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I will be officially announcing the Guide at the &lt;a href="http://www.owasp.org/index.php/OWASP_EU_Summit_2008"&gt;OWASP EU Summit&lt;/a&gt; in Portugal this week.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/442039189" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2513672.xml</wfw:commentRss></item><item><title>Header Injection And Response Splitting</title><dc:creator>Heiko</dc:creator><pubDate>Mon, 20 Oct 2008 13:16:00 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/10/20/header-injection-and-response-splitting.html</link><guid isPermaLink="false">280802:2845483:2447417</guid><description>&lt;p&gt;I thought about the redirect_to method when I saw &lt;a href="http://railscasts.com/episodes/131-going-back"&gt;Ryan's screencast&lt;/a&gt; of how to go back with redirect_to :back. That way the user will be redirected to the URL from the Referer header field, it's the same as redirect_to request.referer. The Referer is a user-supplied value which is set by the browser or another user-agent. It should not be possible to spoof the Referer in an Ajax request, but some browsers seem to allow it (Firefox does not).&lt;/p&gt;
&lt;p&gt;An attack on this is quite unlikely. However if the attacker manages to manipulate the Referer, the victim will be redirected to another site. This site may install malicious software on the victim's computer through browser security holes. Or it could be a phishing site that asks the victim to enter his username and password.&lt;/p&gt;
&lt;p&gt;Then I saw comment #11 which suggests to put the referer into a hidden field:&lt;/p&gt;
&lt;p&gt;&amp;lt;%= hidden_field_tag :referer, (params[:referer] || request.env['HTTP_REFERER']) %&amp;gt;&lt;/p&gt;
&lt;p&gt;The hidden_field_tag method automatically escapes the value, so it is not vulnerable to XSS. However, be aware of XSS if you use the params otherwise.&lt;/p&gt;
&lt;p&gt;More important is that you would use redirect_to params[:referer]. This is a very nice redirector for any URL you like. If the attacker sets the params[:referer] value by supplying the parameter to the site with the hidden_field_tag from above, the victim will be redirected to any desired page:&lt;/p&gt;
&lt;p&gt;http://www.yourapplication.com/controller/action?referer=http://www.malicious.tld&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Header Injection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then there is a another problem with user-supplied values in the HTTP headers: &lt;a href="http://en.wikipedia.org/wiki/HTTP_header_injection"&gt;Header Injection&lt;/a&gt;. &lt;a href="http://weblog.rubyonrails.com/2008/10/19/response-splitting-risk"&gt;It seems&lt;/a&gt; that Ruby/Rails does not sanitize the parameter passed to redirect_to. That means the user may set any header field he likes:&lt;/p&gt;
&lt;p&gt;http://www.yourapplication.com/controller/action?referer=http://www.malicious.tld%0a%0dX-Header:+Hi!&lt;/p&gt;
&lt;p&gt;Note that "%0d%0a" is URL-encoded for "\r\n" which is a carriage-return and line-feed in Ruby. So the resulting HTTP header will be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP/1.1 302 Moved Temporarily&lt;br /&gt;(...)&lt;br /&gt;Location: http://www.malicious.tld&lt;br /&gt;X-Header: Hi!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And even if you allow the user to supply only parts of the target URL, the attacker may still overwrite the Location header field (and thus redirect to any site he wants):&lt;/p&gt;
&lt;p&gt;http://www.yourapplication.com/controller/action?referer=path/at/your/app%0aLocation:+http://www.malicious.tld&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response Splitting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As Header Injection is possible, &lt;a href="http://en.wikipedia.org/wiki/HTTP_response_splitting"&gt;Response Splitting&lt;/a&gt; might be, too. In HTTP, the header block is followed by two carriage-return, line-feeds (CRLF) and the actual data (usually HTML). The idea of Response Splitting is to inject two CRLFs, followed by another response with malicious HTML. The response will be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP/1.1 302 Found [First standard 302 response]&lt;br /&gt;Date: Tue, 12 Apr 2005 22:09:07 GMT&lt;br /&gt;Location:&lt;br /&gt;Content-Type: text/html&lt;br /&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP/1.1 200 OK [Second New response created by attacker begins]&lt;br /&gt;Content-Type: text/html&lt;br /&gt;&lt;br /&gt;&amp;lt;html&amp;gt;&amp;lt;font color=red&amp;gt;hey&amp;lt;/font&amp;gt;&amp;lt;/html&amp;gt; [Arbitary input by user is shown as the redirected page]&lt;br /&gt;Keep-Alive: timeout=15, max=100&lt;br /&gt;Connection: Keep-Alive&lt;br /&gt;Transfer-Encoding: chunked&lt;br /&gt;Content-Type: text/html&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.securiteam.com/securityreviews/5WP0E2KFGK.html"&gt;Read the original article here&lt;/a&gt;. Under certain circumstances this would present the malicious HTML to the user. However, this seems to work with Keep-Alive connections, only (and many browsers are using one-time connections). But you can't rely on this. In any case this is a serious bug, and you should update your Rails to &lt;a href="http://weblog.rubyonrails.com/2008/10/19/rails-2-0-5-redirect_to-and-offset-limit-sanitizing"&gt;version 2.0.5 or the soon-to-be-released 2.1.2&lt;/a&gt;.&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/426486818" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2447417.xml</wfw:commentRss></item><item><title>New RedCloth security</title><dc:creator>Heiko</dc:creator><pubDate>Mon, 13 Oct 2008 16:07:29 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/10/13/new-redcloth-security.html</link><guid isPermaLink="false">280802:2845483:2420798</guid><description>&lt;blockquote&gt;&lt;a href="http://redcloth.org/"&gt;RedCloth&lt;/a&gt; is a module for using Textile in Ruby. Textile is a simple text format that can be converted to HTML, eliminating the need to use HTML directly to create documents, blogs, or web pages.&lt;/blockquote&gt;&lt;p&gt;The new version 4 promises to be faster and without the bugs from version 3. And indeed it feels more reliable and many of the earlier &lt;a href="http://www.rorsecurity.info/journal/2007/8/20/redcloth-security-thoughts.html"&gt;security concers&lt;/a&gt; have now been dealt with. For example:&lt;/p&gt;&lt;p&gt;RedCloth.new("&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;").to_html&lt;/p&gt;

&lt;span&gt;now returns&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&amp;amp;lt;script&amp;amp;gt;alert(1)&amp;amp;lt;/script&amp;amp;gt;&lt;br&gt;&lt;/p&gt;instead of &lt;br&gt;&lt;br&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;&lt;strongad&gt;&lt;/bad&gt;&lt;/span&gt;&lt;/p&gt;

in earlier versions. And it's good that it escapes the input instead of deleting malicious parts. I tried many examples from the XSS cheatsheet and hand-crafted ones. The result is that nearly no malicious parts get through. Yes nearly.&lt;br&gt;&lt;br&gt;&lt;p&gt; The &amp;lt;code&amp;gt; tag gets through:&lt;/p&gt;&lt;p&gt;RedCloth.new('&amp;lt;code onmouseover="bad_code_here"&amp;gt;asdf&amp;lt;/code&amp;gt;', [:filter_html]).to_html&lt;br /&gt;&amp;lt;code onmouseover="bad_code_here"&amp;gt;asdf&amp;lt;/code&amp;gt;&lt;/p&gt;I've created &lt;a href="http://jgarber.lighthouseapp.com/projects/13054/tickets/68-code-comes-through-unfiltered"&gt;a ticket&lt;/a&gt; for that.

&lt;p&gt;And &lt;a href="http://jgarber.lighthouseapp.com/projects/13054/tickets/69-comments-dont-get-sanitized"&gt;comments get through&lt;/a&gt;:&lt;br /&gt;

&lt;p&gt;RedCloth.new(&amp;quot;&amp;lt;!--[if gte IE 4]&amp;gt;&amp;lt;SCRIPT&amp;gt;alert(&amp;#x27;XSS&amp;#x27;);&amp;lt;/SCRIPT&amp;gt;&amp;lt;![endif]--&amp;gt;&amp;quot;, [:sanitize_html]).to_html&lt;/p&gt;

&lt;p&gt;renders&lt;/p&gt;

&lt;p&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;lt;!--[if gte IE 4]&amp;gt;alert(&amp;#x27;XSS&amp;#x27;);&amp;lt;![endif]--&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/p&gt;

which works in some browsers according to the &lt;a href="http://ha.ckers.org/xss.html"&gt;XSS Cheatsheet&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Also remember that CSS injection will work in textile, if you allow styles. See the &lt;a href="http://www.rorsecurity.info/journal/2007/8/20/redcloth-security-thoughts.html"&gt;earlier post&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;Nevertheless the new version is far better. And in combination with a whitelist (namely Rails' sanitize() method) it is even secure.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/420583423" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2420798.xml</wfw:commentRss></item><item><title>The updated Rails Security Guide</title><dc:creator>Heiko</dc:creator><pubDate>Fri, 10 Oct 2008 14:23:44 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/10/10/the-updated-rails-security-guide.html</link><guid isPermaLink="false">280802:2845483:2410809</guid><description>&lt;p&gt;I'm taking part in the &lt;a mce_href="http://hackfest.rubyonrails.org/guide" href="http://hackfest.rubyonrails.org/guide"&gt;Rails Guide Hackfest&lt;/a&gt; which is "an attempt to improve Rails documentation and make the barrier to entry as low as possible." &lt;/p&gt;&lt;p&gt;You can take a look at it here: &lt;a mce_href="http://guides.rails.info/securing_rails_applications/security.html" href="http://guides.rails.info/securing_rails_applications/security.html"&gt;http://guides.rails.info/securing_rails_applications/security.html&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;&lt;p&gt;If you find a typo or if you'd like to contribute, the Lighthouse ticket is here:&lt;br&gt;
&lt;a mce_href="http://rails.lighthouseapp.com/projects/16213/tickets/7" href="http://rails.lighthouseapp.com/projects/16213/tickets/7"&gt;http://rails.lighthouseapp.com/projects/16213/tickets/7&lt;/a&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/417003166" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2410809.xml</wfw:commentRss></item><item><title>SQL Injection issue in :limit and :offset parameter</title><dc:creator>Heiko</dc:creator><pubDate>Mon, 08 Sep 2008 16:02:16 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/9/8/sql-injection-issue-in-limit-and-offset-parameter.html</link><guid isPermaLink="false">280802:2845483:2390117</guid><description>&lt;p align="justify"&gt;An SQL Injection vulnerability &lt;a href="http://blog.innerewut.de/2008/6/16/why-you-should-upgrade-to-rails-2-1"&gt;has been found&lt;/a&gt; in Rails. The issue affects Rails &amp;lt; 2.1.1, namely the :limit and :offset parameters that are not correctly sanitized:&lt;/p&gt;&lt;p align="justify"&gt;&lt;/p&gt;&lt;blockquote&gt;Person.find(:all, :limit =&amp;gt; "10; DROP TABLE users;")&lt;/blockquote&gt;&lt;p align="justify"&gt;A possible attack will work only if you allow the user control these two values as in User.find(:all, :limit =&amp;gt; 10, :offset =&amp;gt; params[:offset]). Note that will_paginate is not affected, it escapes the values before.&lt;/p&gt;&lt;p align="justify"&gt;This seemed to affect only PostgreSQL and SQLite as MySQL by default disallows multiple SQL statements. So you cannot drop a table. However, it could be used for information disclosure. Consider the &lt;a href="http://dev.mysql.com/doc/refman/5.1/de/union.html"&gt;UNION&lt;/a&gt; SQL statement:&lt;/p&gt;&lt;blockquote&gt;User.find(:all, :limit =&amp;gt; params[:limit])&lt;/blockquote&gt;&lt;blockquote&gt;params[:limit] #= "1 UNION (select 1,2,password,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0 from users)"&lt;/blockquote&gt;&lt;br&gt;&lt;p align="justify"&gt;What does this mean? The result is the full users table, with one small modification: One field contains the user's password and the other fields are always a number between 0 and 9. Let's assume the third column is the user's first name and the application returns everything it found. This means an attacker may &lt;span style="background-color: #ffffcc;"&gt;read the user's password in the first name field&lt;/span&gt;. All he has to do is find out about the table names (take a look at the controller names), the column names (review the HTML source, guessing) and the number of columns in the table (try it). The UNION statement will work only if the second table has the same number of columns as the first one - hence the list of numbers.&lt;/p&gt;&lt;p align="justify"&gt;Of course there might not be a password column in clear text, but this could be used to read any data from the database, or even other databases. &lt;/p&gt;&lt;p align="justify"&gt;&lt;strong&gt;Countermeasures&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review your application whether you allow the user to control :limit or :offset&lt;br&gt;&lt;/li&gt;
&lt;li&gt;If you are on Rails 2.1.0, please apply &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/288"&gt;this patch&lt;/a&gt; or get Rails 2.1.1&lt;/li&gt;
&lt;li&gt;If you are on the Rails 2.0 or 1.2 branch, apply this &lt;a href="http://rails.lighthouseapp.com/projects/8994/tickets/964-fix-for-sql-injection-on-limit-and-offset-should-be-backported"&gt;backport patch&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/417003167" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2390117.xml</wfw:commentRss></item><item><title>DoS vulnerability in REXML</title><dc:creator>Heiko</dc:creator><pubDate>Wed, 27 Aug 2008 13:21:02 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/8/27/dos-vulnerability-in-rexml.html</link><guid isPermaLink="false">280802:2845483:2390116</guid><description>&lt;p&gt;Here is a security announcement for the REXML library (links by me) in the &lt;a href="http://www.ruby-lang.org/en/news/2008/08/23/dos-vulnerability-in-rexml/"&gt;Ruby news&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;There is a &lt;a href="http://en.wikipedia.org/wiki/DoS"&gt;DoS&lt;/a&gt; vulnerability in the REXML library used by Rails to parse incoming XML requests. A so-called "XML entity explosion" attack technique can be used for remotely bringing down (disabling) any application which parses user-provided XML. Most Rails applications will be vulnerable to this attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;An attacker can cause a denial of service by causing REXML to parse a document containing recursively nested entities such as:&lt;/p&gt;&lt;p&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br&gt;&amp;lt;!DOCTYPE member [&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY a "&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;&amp;amp;b;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY b "&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;&amp;amp;c;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY c "&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;&amp;amp;d;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY d "&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;&amp;amp;e;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY e "&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;&amp;amp;f;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY f "&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;&amp;amp;g;"&amp;gt;&lt;br&gt;&amp;nbsp;&amp;lt;!ENTITY g "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"&amp;gt;&lt;br&gt;]&amp;gt;&lt;br&gt;&amp;lt;member&amp;gt;&lt;br&gt;&amp;amp;a;&lt;br&gt;&amp;lt;/member&amp;gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;M. Koziarski provides a Rails-specific solution to the problem:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The announcement contains details describing a monkeypatch which can&lt;br&gt;be applied to prevent the risk.&amp;nbsp; These instructions are reproduced&lt;br&gt;below with more rails specific information:&lt;/p&gt;&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;** Versions 2.0.2 and earlier&lt;/span&gt;&lt;/p&gt;&lt;p&gt;# Copy the &lt;a href="http://www.ruby-lang.org/security/20080823rexml/rexml-expansion-fix.rb"&gt;fix file&lt;/a&gt; into RAILS_ROOT/lib&lt;br&gt;# Require the file from environment.rb&amp;nbsp;require 'rexml-expansion-fix'&lt;/p&gt;&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;** Versions 2.1.0 and edge&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Copy the &lt;a href="http://www.ruby-lang.org/security/20080823rexml/rexml-expansion-fix.rb"&gt;fix file&lt;/a&gt; into RAILS_ROOT/config/initializers, it will berequired automatically.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There is also a gem available which includes the fix file:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="background-color: #ffffcc;"&gt;gem install rexml-expansion-fix&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Once that command has completed add the following line to the bottom&lt;br&gt;of your environment.rb file:&lt;/p&gt;&lt;p&gt;&lt;span style="background-color: #ffffcc;"&gt;require 'rexml-expansion-fix'&lt;/span&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/417003168" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2390116.xml</wfw:commentRss></item><item><title>Ruby security vulnerabilities</title><dc:creator>Heiko</dc:creator><pubDate>Tue, 24 Jun 2008 20:03:49 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/6/24/ruby-security-vulnerabilities.html</link><guid isPermaLink="false">280802:2845483:2390115</guid><description>&lt;p&gt;Here is the news from the &lt;a href="http://weblog.rubyonrails.com/2008/6/21/multiple-ruby-security-vulnerabilities"&gt;Rails Log&lt;/a&gt;: &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Drew Yao at Apple uncovered a handful of nasty security vulnerabilities affecting all current versions of Ruby. The details are still under wraps because an attacker can DoS you or possibly execute arbitrary code&amp;mdash;holy crap! Better upgrade sooner than later.&lt;/p&gt;   According to the &lt;a href="http://www.ruby-lang.org/en/news/2008/06/20/arbitrary-code-execution-vulnerabilities/"&gt;official Ruby security advisory&lt;/a&gt;, the vulnerable Rubies are: 	&lt;ul&gt;&lt;li&gt;1.8.4 and earlier&lt;/li&gt;&lt;li&gt;1.8.5-p230 and earlier&lt;/li&gt;&lt;li&gt;1.8.6-p229 and earlier&lt;/li&gt;&lt;li&gt;1.8.7-p21 and earlier&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Those of us running Ruby 1.8.4 or earlier must upgrade to 1.8.5 or later for a fix. Those on 1.8.5-7 can grab the latest patchlevel release for a fix.&lt;/p&gt;&lt;p&gt;(Please note: Ruby 1.8.7 breaks backward compatibility and is only compatible with Rails 2.1 and later, so don&amp;rsquo;t go overboard!)&lt;/p&gt;&lt;/blockquote&gt;   	   	&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/417003169" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2390115.xml</wfw:commentRss></item><item><title>Automatic security</title><dc:creator>Heiko</dc:creator><pubDate>Tue, 17 Jun 2008 08:28:36 +0000</pubDate><link>http://www.rorsecurity.info/journal/2008/6/17/automatic-security.html</link><guid isPermaLink="false">280802:2845483:2390114</guid><description>&lt;br&gt;&lt;p align="justify"&gt;Security is not easy-to-use, not fancy and it is hard to remember all those nasty attack methods. So there are automatic security checks, firewalls, helpers and a lot more. They are built to make your application more secure. But automatic security tools can't help you to find logic faults. What if you have a Cross-Site Scripting scanner that checks each and every field in your web application, but with a little knowledge, an attacker could change one id in the URL and he sees his neighbor's confidential data. &lt;/p&gt;&lt;p align="justify"&gt;BUT, automatic tools can be of great help, if you won't solely rely on them. The SafeErb plugin reminds you to sanitize output, but it doesn't do it automatically. A mass-assignment scanner might find this kind of security holes in you application. Or a web application firewall may protect holes you are not aware of. And, of course, security is a process and should be incorporated into the entire project life cycle.&lt;/p&gt;&lt;p align="justify"&gt;That having said, I'd like to show you a nice web application firewall for your .htaccess, if you happen to use Apache. It comes from &lt;a href="http://www.0x000000.com/index.php?i=567&amp;amp;bin=1000110111"&gt;0x000000.com&lt;/a&gt;, a &lt;a href="http://en.wikipedia.org/wiki/Hacker_%28computer_security%29#White_hat"&gt;whitehat hacker&lt;/a&gt; site, and it's the result of seven years of server administration. It is not perfect, it is not especially for Rails applications or for your specific application, but it is definitely a good starting point. You can read &lt;a href="http://www.0x000000.com/index.php?i=567&amp;amp;bin=1000110111"&gt;the tutorial&lt;/a&gt; for explanation.&lt;/p&gt;&lt;p style="font-family: yui-tmp;"&gt;RewriteEngine On&lt;br&gt;Options +FollowSymLinks&lt;br&gt;ServerSignature Off&lt;br&gt;&lt;br&gt;RewriteCond %{REQUEST_METHOD}&amp;nbsp; ^(HEAD|TRACE|DELETE|TRACK) [NC,OR]&lt;br&gt;RewriteCond %{THE_REQUEST}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*(\\r|\\n|%0A|%0D).* [NC,OR]&lt;br&gt;&lt;br&gt;RewriteCond %{HTTP_REFERER}&amp;nbsp;&amp;nbsp;&amp;nbsp; ^(.*)(&amp;lt;|&amp;gt;|'|%0A|%0D|%27|%3C|%3E|%00).* [NC,OR]&lt;br&gt;RewriteCond %{HTTP_COOKIE}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*(&amp;lt;|&amp;gt;|'|%0A|%0D|%27|%3C|%3E|%00).* [NC,OR]&lt;br&gt;RewriteCond %{REQUEST_URI}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^/(,|;|:|&amp;lt;|&amp;gt;|"&amp;gt;|"&amp;lt;|/|\\\.\.\\).{0,9999}.* [NC,OR]&lt;br&gt;&lt;br&gt;RewriteCond %{HTTP_USER_AGENT} ^$ [OR]&lt;br&gt;RewriteCond %{HTTP_USER_AGENT} ^(java|curl|wget).* [NC,OR]&lt;br&gt;RewriteCond %{HTTP_USER_AGENT} ^.*(winhttp|HTTrack|clshttp|archiver|loader|email|harvest|extract|grab|miner).* [NC,OR]&lt;br&gt;RewriteCond %{HTTP_USER_AGENT} ^.*(libwww-perl|curl|wget|python|nikto|scan).* [NC,OR]&lt;br&gt;RewriteCond %{HTTP_USER_AGENT} ^.*(&amp;lt;|&amp;gt;|'|%0A|%0D|%27|%3C|%3E|%00).* [NC,OR]&lt;br&gt;&lt;br&gt;RewriteCond %{QUERY_STRING}&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*(;|&amp;lt;|&amp;gt;|'|"|\)|%0A|%0D|%22|%27|%3C|%3E|%00).*(/\*|union|select|insert|cast|set&lt;br&gt;|declare|drop|update|md5|benchmark).* [NC,OR]RewriteCond %{QUERY_STRING}&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*(localhost|loopback|127\.0\.0\.1).* [NC,OR]&lt;br&gt;RewriteCond %{QUERY_STRING}&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*\.[A-Za-z0-9].* [NC,OR]&lt;br&gt;RewriteCond %{QUERY_STRING}&amp;nbsp;&amp;nbsp;&amp;nbsp; ^.*(&amp;lt;|&amp;gt;|'|%0A|%0D|%27|%3C|%3E|%00).* [NC]&lt;br&gt;&lt;br&gt;RewriteRule ^(.*)$ access_log.php&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyOnRailsSecurity/~4/417003170" height="1" width="1"/&gt;</description><wfw:commentRss>http://www.rorsecurity.info/journal/rss-comments-entry-2390114.xml</wfw:commentRss></item></channel></rss>
