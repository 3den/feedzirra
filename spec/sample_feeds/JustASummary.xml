<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:www.bofh.org.uk:articles</id>
  <link type="text/html" rel="alternate" href="http://www.bofh.org.uk"/>
  <title>Just A Summary : </title>
  <subtitle type="html">Piers Cawley Practices Punditry</subtitle>
  <updated>2009-01-12T11:44:15-06:00</updated>
  <generator version="4.x" uri="http://www.typosphere.org">Typo</generator>
  <entry>
    <id>tag:www.bofh.org.uk:Article3306</id>
    <published>2009-01-12T11:44:15-06:00</published>
    <updated>2009-01-12T11:44:15-06:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2009/01/12/choosing-a-language-for-2009"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Choosing a language for 2009</title>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="perl" label="Perl" scheme="http://www.bofh.org.uk/articles/category/perl"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>The <a href="http://www.pragprog.com/">Prags</a> will tell you that you should learn a new language every year, and I think they have a point. This year though, I&#8217;m going to do things slightly differently. If you read the <a href="http://www.heise-online.co.uk/open/Healthcheck-Perl-The-Perl-Future--/features/112388">Healthcheck: Perl</a> article I wrote for Heise Online then you&#8217;ve probably worked out that my language for 2009 is Perl 5, version 10 (hopefully it&#8217;ll be version 10.1 real soon now). I&#8217;m still paid to write ruby for <a href="http://www.amazingtunes.com/">AmazingTunes</a> in my day job, but Perl&#8217;s the language I learned to program with and developments around <a href="http://www.iinteractive.com/moose/">Moose</a> and its extensions mean that Perl in 2009 is a different language from the one I pretty much stopped using a couple of years ago.</p>


	<p>Time to get reacquainted.</p>


	<p>I&#8217;m hedging my bets mind &#8211; I&#8217;m also working through <a href="http://www.realworldhaskell.org/">Real World Haskell</a> (which still sounds like an oxymoron &#8211; I probably haven&#8217;t read enough of it yet).</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>The <a href="http://www.pragprog.com/">Prags</a> will tell you that you should learn a new language every year, and I think they have a point. This year though, I&#8217;m going to do things slightly differently. If you read the <a href="http://www.heise-online.co.uk/open/Healthcheck-Perl-The-Perl-Future--/features/112388">Healthcheck: Perl</a> article I wrote for Heise Online then you&#8217;ve probably worked out that my language for 2009 is Perl 5, version 10 (hopefully it&#8217;ll be version 10.1 real soon now). I&#8217;m still paid to write ruby for <a href="http://www.amazingtunes.com/">AmazingTunes</a> in my day job, but Perl&#8217;s the language I learned to program with and developments around <a href="http://www.iinteractive.com/moose/">Moose</a> and its extensions mean that Perl in 2009 is a different language from the one I pretty much stopped using a couple of years ago.</p>


	<p>Time to get reacquainted.</p>


	<p>I&#8217;m hedging my bets mind &#8211; I&#8217;m also working through <a href="http://www.realworldhaskell.org/">Real World Haskell</a> (which still sounds like an oxymoron &#8211; I probably haven&#8217;t read enough of it yet).</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3305</id>
    <published>2009-01-04T15:08:06-06:00</published>
    <updated>2009-01-04T15:08:06-06:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2009/01/04/its-not-just-modern-music-giles"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">It's not just modern music Giles...</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Giles Bowkett&#8217;s just written up <a href="http://gilesbowkett.blogspot.com/2009/01/classic-song-travels-through-time.html">an example</a> of the way that <a href="http://gilesbowkett.blogspot.com/2008/09/copyright-violation-every-artists.html">sampling is an essential part of modern music</a> and he&#8217;s right. But he doesn&#8217;t go far enough really. Sampling has always been an essential part of all musics. What&#8217;s the twelve bar blues form after all? Different artists put their own spin and lyrics on top of it, but it&#8217;s always the same chord structure and it&#8217;s often the same words forming the backbone. I don&#8217;t know about you, but I can&#8217;t hear the words &#8220;I woke up this morning&#8221; without expecting a blues to follow.</p><p>Meanwhile, in folksong it&#8217;s long been suggested to collectors, the people who go and record songs from &#8220;the folk&#8221; that they might try asking if their informant &#8220;knows a song about a milk white steed?&#8221; I&#8217;ve certainly lost count of the songs containing a verse in which the hero or the villain tells someone to &#8220;Saddle me my milk white steed&#8221;, or someone rides by on a milk white steed. When the heroes of folk song aren&#8217;t riding white horses, they&#8217;re leaning their backs against oaks or swearing that something will not happen until apples grow on cherry trees.</p><p>Sampling, remixing, borrowing, copying, adapting, influencing &#8211; call it what you will, it&#8217;s at the root of so much art and craft. Now, I could come over all <a href="http://craphound.com/">Cory Doctorow</a> and bang on about the vital importance of remix culture, but Cory does Cory better than I ever could, so I&#8217;ll just try and leave you with the idea that this is not <em>new</em>. Michelangelo and many of the great artists of the renaissance started their careers by copying works from classical antiquity after all. My favourite example has to be the story of how Mozart heard Allegri&#8217;s Miserere sung in the Sistine Chapel when he was fourteen and, that evening, wrote out the parts from memory, apparently returning again the next Friday to make minor corrections. So Mozart, considered one of the most prolifically creative musicians ever, seems to have been one of the most gifted pirates too. Go Wolfie.</p><p>So&#8230; go. Steal. But make it <em>yours</em></p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Giles Bowkett&#8217;s just written up <a href="http://gilesbowkett.blogspot.com/2009/01/classic-song-travels-through-time.html">an example</a> of the way that <a href="http://gilesbowkett.blogspot.com/2008/09/copyright-violation-every-artists.html">sampling is an essential part of modern music</a> and he&#8217;s right. But he doesn&#8217;t go far enough really. Sampling has always been an essential part of all musics. What&#8217;s the twelve bar blues form after all? Different artists put their own spin and lyrics on top of it, but it&#8217;s always the same chord structure and it&#8217;s often the same words forming the backbone. I don&#8217;t know about you, but I can&#8217;t hear the words &#8220;I woke up this morning&#8221; without expecting a blues to follow.</p><p>Meanwhile, in folksong it&#8217;s long been suggested to collectors, the people who go and record songs from &#8220;the folk&#8221; that they might try asking if their informant &#8220;knows a song about a milk white steed?&#8221; I&#8217;ve certainly lost count of the songs containing a verse in which the hero or the villain tells someone to &#8220;Saddle me my milk white steed&#8221;, or someone rides by on a milk white steed. When the heroes of folk song aren&#8217;t riding white horses, they&#8217;re leaning their backs against oaks or swearing that something will not happen until apples grow on cherry trees.</p><p>Sampling, remixing, borrowing, copying, adapting, influencing &#8211; call it what you will, it&#8217;s at the root of so much art and craft. Now, I could come over all <a href="http://craphound.com/">Cory Doctorow</a> and bang on about the vital importance of remix culture, but Cory does Cory better than I ever could, so I&#8217;ll just try and leave you with the idea that this is not <em>new</em>. Michelangelo and many of the great artists of the renaissance started their careers by copying works from classical antiquity after all. My favourite example has to be the story of how Mozart heard Allegri&#8217;s Miserere sung in the Sistine Chapel when he was fourteen and, that evening, wrote out the parts from memory, apparently returning again the next Friday to make minor corrections. So Mozart, considered one of the most prolifically creative musicians ever, seems to have been one of the most gifted pirates too. Go Wolfie.</p><p>So&#8230; go. Steal. But make it <em>yours</em></p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3304</id>
    <published>2008-12-18T10:12:09-06:00</published>
    <updated>2008-12-18T10:12:09-06:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/12/18/warnings-are-the-new-test-failures"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Warnings are the new test failures</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="perl" label="Perl" scheme="http://www.bofh.org.uk/articles/category/perl"/>
    <category term="ruby" label="Ruby" scheme="http://www.bofh.org.uk/articles/category/ruby"/>
    <category term="ruby" scheme="http://www.bofh.org.uk/articles/tag/ruby"/>
    <category term="perl" scheme="http://www.bofh.org.uk/articles/tag/perl"/>
    <category term="warnings" scheme="http://www.bofh.org.uk/articles/tag/warnings"/>
    <category term="redflags" scheme="http://www.bofh.org.uk/articles/tag/redflags"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Have you ever tried to run Rails, Rspec, Rake or, for that matter almost any Ruby library or application that you&#8217;ve ever heard of with the -w flag? How about running Rails with taint checking on?</p> 

<p>They aren&#8217;t exactly pleasant experiences.</p>

<p>Meanwhile, over in Perl land, it&#8217;s a very rare module indeed that isn&#8217;t at least clean under -w and, where appropriate, taint friendly. It would be a very irresponsible Perl Monger indeed who wrote a web framework that didn&#8217;t assume it was going to be running under the -T flag. Warnings and taint checking are annoyances, and sometimes they&#8217;re flat out wrong, but more of the time they&#8217;re useful. Which is why, in Perl, you&#8217;ll sometimes see blocks of code like:</p>

<pre><code>{
  no warnings;
  # Code that does stuff which would trigger a warning
}
</code></pre>

<p>If the author is being particularly careful, she will specify which warnings to suppress &#8211; after all, there&#8217;s no need to turn off all the warnings if all you&#8217;re intending to do is redefine a method. So the prudent Perl programmer would write:</p>

<pre><code>{
  no warnings 'redefine';
  # Code that redefines an existing method
}</code></pre>

<p>However, there are often ways of achieving your aim even with all the warnings on. </p>

<p>If modules that don&#8217;t have <code>use warnings</code> are rare on <span class="caps">CPAN</span>, modules that don&#8217;t have <code>use strict</code> will get the unwary programmer laughed at in the street. There are modules that simply won&#8217;t work under <code>use strict</code>, but they tend to have <code>no strict</code>, either wrapped around the narrowest scope that won&#8217;t work under strict, or proudly displayed up front. The presence of a <code>no strict</code> implies to the interested reader that the programmer knows (or thinks he knows) what he&#8217;s doing. Writing code that does even the most implausible metaprogramming things without raising errors from strict or spamming <span class="caps">STDERR</span> with warnings is a matter of professional pride. Writing straightforward code that stays silent is the absolute baseline for Perl programming professionalism in my book.</p>

<p>Meanwhile, here in Rubyworld, there&#8217;s no equivalent of <code>strict</code> and it&#8217;s actively hard to start coding with warnings turned on because important frameworks like rspec and rails aren&#8217;t <code>-w</code> clean. In Perl, this isn&#8217;t a problem, <code>use warnings</code> turns warnings on lexically. Your code might well call all sorts of noisy code elsewhere but, unless you&#8217;re running with <code>-w</code> as well, you&#8217;ll only see the warnings for <em>your</em> code. If you set <code>$VERBOSE</code>, you&#8217;ll get all the warnings. Warnings in the log file should be like red Fs in your test output &#8211; a sign that all is not as good as it could be in your code. Sure you <em>could</em> just ignore the ones you know are harmless, then you&#8217;re in danger of losing the <em>real</em> problems in the noise.</p>

<p>As a gesture of goodwill, here&#8217;s <code>alias_method_chain</code> written so it should raise no warnings except when the &#8216;without&#8217; method already exists.</p>

<pre><code>
def alias_method_chain(target, feature)
  aliased_target, punctuation = target.to_s.sub(/([?!=])$/, ''), $1
  yield(aliased_target, punctuation) if block_given?

  with_method, without_method = "#{aliased_target}_with_#{feature}#{punctuation", "#{aliased_target}_without_#{feature}#{punctuation}" 

  alias_method without_method, target
  remove_method target # Warning begone!
  alias_method target, with_method

  case
  when public_method_defined?(without_method)
    public target
  when protected_method_defined?(without_method)
    protected target
  when private_method_defined?(without_method)
    private_target
  end
end
</code></pre>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Have you ever tried to run Rails, Rspec, Rake or, for that matter almost any Ruby library or application that you&#8217;ve ever heard of with the -w flag? How about running Rails with taint checking on?</p> 

<p>They aren&#8217;t exactly pleasant experiences.</p>

<p>Meanwhile, over in Perl land, it&#8217;s a very rare module indeed that isn&#8217;t at least clean under -w and, where appropriate, taint friendly. It would be a very irresponsible Perl Monger indeed who wrote a web framework that didn&#8217;t assume it was going to be running under the -T flag. Warnings and taint checking are annoyances, and sometimes they&#8217;re flat out wrong, but more of the time they&#8217;re useful. Which is why, in Perl, you&#8217;ll sometimes see blocks of code like:</p>

<pre><code>{
  no warnings;
  # Code that does stuff which would trigger a warning
}
</code></pre>

<p>If the author is being particularly careful, she will specify which warnings to suppress &#8211; after all, there&#8217;s no need to turn off all the warnings if all you&#8217;re intending to do is redefine a method. So the prudent Perl programmer would write:</p>

<pre><code>{
  no warnings 'redefine';
  # Code that redefines an existing method
}</code></pre>

<p>However, there are often ways of achieving your aim even with all the warnings on. </p>

<p>If modules that don&#8217;t have <code>use warnings</code> are rare on <span class="caps">CPAN</span>, modules that don&#8217;t have <code>use strict</code> will get the unwary programmer laughed at in the street. There are modules that simply won&#8217;t work under <code>use strict</code>, but they tend to have <code>no strict</code>, either wrapped around the narrowest scope that won&#8217;t work under strict, or proudly displayed up front. The presence of a <code>no strict</code> implies to the interested reader that the programmer knows (or thinks he knows) what he&#8217;s doing. Writing code that does even the most implausible metaprogramming things without raising errors from strict or spamming <span class="caps">STDERR</span> with warnings is a matter of professional pride. Writing straightforward code that stays silent is the absolute baseline for Perl programming professionalism in my book.</p>

<p>Meanwhile, here in Rubyworld, there&#8217;s no equivalent of <code>strict</code> and it&#8217;s actively hard to start coding with warnings turned on because important frameworks like rspec and rails aren&#8217;t <code>-w</code> clean. In Perl, this isn&#8217;t a problem, <code>use warnings</code> turns warnings on lexically. Your code might well call all sorts of noisy code elsewhere but, unless you&#8217;re running with <code>-w</code> as well, you&#8217;ll only see the warnings for <em>your</em> code. If you set <code>$VERBOSE</code>, you&#8217;ll get all the warnings. Warnings in the log file should be like red Fs in your test output &#8211; a sign that all is not as good as it could be in your code. Sure you <em>could</em> just ignore the ones you know are harmless, then you&#8217;re in danger of losing the <em>real</em> problems in the noise.</p>

<p>As a gesture of goodwill, here&#8217;s <code>alias_method_chain</code> written so it should raise no warnings except when the &#8216;without&#8217; method already exists.</p>

<pre><code>
def alias_method_chain(target, feature)
  aliased_target, punctuation = target.to_s.sub(/([?!=])$/, ''), $1
  yield(aliased_target, punctuation) if block_given?

  with_method, without_method = "#{aliased_target}_with_#{feature}#{punctuation", "#{aliased_target}_without_#{feature}#{punctuation}" 

  alias_method without_method, target
  remove_method target # Warning begone!
  alias_method target, with_method

  case
  when public_method_defined?(without_method)
    public target
  when protected_method_defined?(without_method)
    protected target
  when private_method_defined?(without_method)
    private_target
  end
end
</code></pre>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3303</id>
    <published>2008-12-11T06:42:50-06:00</published>
    <updated>2008-12-11T06:42:50-06:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/12/11/maybe-time-to-look-at-shoulda"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Maybe time to look at shoulda</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>So, because I&#8217;m sure that there&#8217;s a better way of drying up my rails apps, I&#8217;ve been porting <a href="http://www.lukas-renggli.ch/smalltalk/magritte">Magritte</a> to Ruby (given a good metadescription of your models and judicious application of the visitor and interpreter patterns, it&#8217;s amazing what you can do). Now, Magritte comes with a pretty decent test suite in its Smalltalk box. However, that test suite makes serious use of inheritance. Several tests of the leaf classes in the Magritte description hierarchy define maybe three helper methods which parametrise the tests they inherit from their parent test suites.</p>

<p>It&#8217;s all very clever (but in a good way), but it&#8217;s a bugger to implement in Rspec. I&#8217;ve been reduced to writing a shared behaviours file with lots of blocks that look like:</p>

<pre><code>shared_examples_for "MetaDesc::Base" do
  ...
end

shared_examples_for "MetaDesc::Description" do
  ...
  it_should_behave_like "MetaDesc::Base" 
end

shared_examples_for "MetaDesc::ElementDescription" do
  ...
  it_should_behave_like "MetaDesc::Description
end</code></pre>

<p>Essentially, I&#8217;m stitching together an inheritance hierarchy by hand.</p>

<p>Maybe it&#8217;s time to go back to <code>Test::Unit</code> and maybe to try <code>shoulda</code></p>

<p>I&#8217;ll keep you posted on how the Magritte port&#8217;s going. Next step after the basic port is to write a visitor to generate an ActiveRecord schema I think, but I might end up writing some kind of Pidgin for describing objects first &#8211; depends how much of pain it is to roll the descriptions objects by hand.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>So, because I&#8217;m sure that there&#8217;s a better way of drying up my rails apps, I&#8217;ve been porting <a href="http://www.lukas-renggli.ch/smalltalk/magritte">Magritte</a> to Ruby (given a good metadescription of your models and judicious application of the visitor and interpreter patterns, it&#8217;s amazing what you can do). Now, Magritte comes with a pretty decent test suite in its Smalltalk box. However, that test suite makes serious use of inheritance. Several tests of the leaf classes in the Magritte description hierarchy define maybe three helper methods which parametrise the tests they inherit from their parent test suites.</p>

<p>It&#8217;s all very clever (but in a good way), but it&#8217;s a bugger to implement in Rspec. I&#8217;ve been reduced to writing a shared behaviours file with lots of blocks that look like:</p>

<pre><code>shared_examples_for "MetaDesc::Base" do
  ...
end

shared_examples_for "MetaDesc::Description" do
  ...
  it_should_behave_like "MetaDesc::Base" 
end

shared_examples_for "MetaDesc::ElementDescription" do
  ...
  it_should_behave_like "MetaDesc::Description
end</code></pre>

<p>Essentially, I&#8217;m stitching together an inheritance hierarchy by hand.</p>

<p>Maybe it&#8217;s time to go back to <code>Test::Unit</code> and maybe to try <code>shoulda</code></p>

<p>I&#8217;ll keep you posted on how the Magritte port&#8217;s going. Next step after the basic port is to write a visitor to generate an ActiveRecord schema I think, but I might end up writing some kind of Pidgin for describing objects first &#8211; depends how much of pain it is to roll the descriptions objects by hand.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3302</id>
    <published>2008-10-29T10:38:13-05:00</published>
    <updated>2008-10-30T07:16:17-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/10/29/javascript-heresy"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Javascript heresy</title>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="ruby" scheme="http://www.bofh.org.uk/articles/tag/ruby"/>
    <category term="javascript" scheme="http://www.bofh.org.uk/articles/tag/javascript"/>
    <category term="semicolons" scheme="http://www.bofh.org.uk/articles/tag/semicolons"/>
    <category term="heresy" scheme="http://www.bofh.org.uk/articles/tag/heresy"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>So, remind me, what&#8217;s the rationale for always using the optional <code>;</code> when you&#8217;re writing Javascript? The only reasons I can think of, off the top of my head are, &#8220;Because you&#8217;ll break minifiers without it&#8221; and &#8220;Because Douglas Crockford doesn&#8217;t like it&#8221;. Well, broken minifiers that can&#8217;t parse the language correctly can kiss my fat hairy arse and argument from authority cuts little ice here.</p>

<p><a href="http://morethanseven.net/">Gareth Rushgrove</a> pointed me at <a href="http://icanhaz.com/semicoloninsertion">an article</a>, which suggested that it&#8217;s because Javascript will insert a semicolon after the <code>return</code> in:

<pre><code>return
{ key: "value" }
</code></pre></p>

<p>But that&#8217;s not exactly surprising, and falls squarely into the &#8220;Don&#8217;t do that then&#8221; category of bugs, or putting it another way, the <a href="http://blog.plover.com">Dominus</a> Doctrine (&#8220;You can&#8217;t just make shit up and expect the computer to know what you mean, retardo!&#8221;) applies.</p>

<p>Ruby also has an optional semicolon, but good style is avoid using them  and we seem to survive. In fact, the Ruby parser is rather less capable than Javascript&#8217;s:

<pre><code>jQuery('.class')
  .addClass('whatever')
  .html('New inner HTML')
</code></pre>

	<p>is legal Javascript, but, in Ruby you have to write:</p>


<pre><code>jQuery('.class') \
  .addClass('whatever') \
  .html('New inner HTML')
</code></pre>

	<p>because if you don&#8217;t the compiler throws its toys out of the pram and, for bonus points, the resulting parse error implies that the parser knows what you meant but decided to throw the error anyway. Ho hum.<p></p>


<p>Is there something I&#8217;ve missed? Or should I make a preemptive stand against incompetent minifiers and start writing my Javascript without semicolons?</p>

<h3>Updates</h3>

<p>In the comments, &#8220;James&#8221; offers a succinct piece of code using Prototype that demonstrates the problem rather neatly. In the absence of semicolons, code like:

<pre><code>var foo = 3
, bar = 2 + foo

[foo, bar].each(function (i) { console.log(i) })
</code></pre>

	<p>gets parsed as</p>


<pre><code>var foo = 3
, bar = 2 + foo[foo, bar].each(...)
</code></pre>

	<p>Which isn&#8217;t exactly what you want. If I were feeling churlish, I might argue that such problems are one reason why the jQueryish way:</p>


<pre><code>var foo = 3
, bar = 2 + foo
$.each([foo, bar], function () {...})
</code></pre>

	<p>is a better way of iterating over things, but I&#8217;m not entirely sure that it is.</p></p>


<p>Looks like I&#8217;ll keep taking the semicolons.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>So, remind me, what&#8217;s the rationale for always using the optional <code>;</code> when you&#8217;re writing Javascript? The only reasons I can think of, off the top of my head are, &#8220;Because you&#8217;ll break minifiers without it&#8221; and &#8220;Because Douglas Crockford doesn&#8217;t like it&#8221;. Well, broken minifiers that can&#8217;t parse the language correctly can kiss my fat hairy arse and argument from authority cuts little ice here.</p>

<p><a href="http://morethanseven.net/">Gareth Rushgrove</a> pointed me at <a href="http://icanhaz.com/semicoloninsertion">an article</a>, which suggested that it&#8217;s because Javascript will insert a semicolon after the <code>return</code> in:

<pre><code>return
{ key: "value" }
</code></pre></p>

<p>But that&#8217;s not exactly surprising, and falls squarely into the &#8220;Don&#8217;t do that then&#8221; category of bugs, or putting it another way, the <a href="http://blog.plover.com">Dominus</a> Doctrine (&#8220;You can&#8217;t just make shit up and expect the computer to know what you mean, retardo!&#8221;) applies.</p>

<p>Ruby also has an optional semicolon, but good style is avoid using them  and we seem to survive. In fact, the Ruby parser is rather less capable than Javascript&#8217;s:

<pre><code>jQuery('.class')
  .addClass('whatever')
  .html('New inner HTML')
</code></pre>

	<p>is legal Javascript, but, in Ruby you have to write:</p>


<pre><code>jQuery('.class') \
  .addClass('whatever') \
  .html('New inner HTML')
</code></pre>

	<p>because if you don&#8217;t the compiler throws its toys out of the pram and, for bonus points, the resulting parse error implies that the parser knows what you meant but decided to throw the error anyway. Ho hum.<p></p>


<p>Is there something I&#8217;ve missed? Or should I make a preemptive stand against incompetent minifiers and start writing my Javascript without semicolons?</p>

<h3>Updates</h3>

<p>In the comments, &#8220;James&#8221; offers a succinct piece of code using Prototype that demonstrates the problem rather neatly. In the absence of semicolons, code like:

<pre><code>var foo = 3
, bar = 2 + foo

[foo, bar].each(function (i) { console.log(i) })
</code></pre>

	<p>gets parsed as</p>


<pre><code>var foo = 3
, bar = 2 + foo[foo, bar].each(...)
</code></pre>

	<p>Which isn&#8217;t exactly what you want. If I were feeling churlish, I might argue that such problems are one reason why the jQueryish way:</p>


<pre><code>var foo = 3
, bar = 2 + foo
$.each([foo, bar], function () {...})
</code></pre>

	<p>is a better way of iterating over things, but I&#8217;m not entirely sure that it is.</p></p>


<p>Looks like I&#8217;ll keep taking the semicolons.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3301</id>
    <published>2008-09-29T01:59:00-05:00</published>
    <updated>2008-09-29T02:25:36-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/29/i-think-im-in-love-with-an-axe"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">I think I'm in love with an Axe</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="spooncarving" scheme="http://www.bofh.org.uk/articles/tag/spooncarving"/>
    <category term="axes" scheme="http://www.bofh.org.uk/articles/tag/axes"/>
    <category term="gransforsbruks" scheme="http://www.bofh.org.uk/articles/tag/gransforsbruks"/>
    <category term="carving" scheme="http://www.bofh.org.uk/articles/tag/carving"/>
    <category term="making" scheme="http://www.bofh.org.uk/articles/tag/making"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/Lx-NTPBoLmU&#38;hl=en&#38;fs=1"></param><param name="allowFullScreen" value="true"></param><embed src="http://www.youtube.com/v/Lx-NTPBoLmU&#38;hl=en&#38;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></embed></object>

	<p>We&#8217;ve just spent the weekend on one of <a href="http://www.robin-wood.co.uk/">Robin Wood&#8217;s</a> spoon carving workshops, which was my 41st birthday present from Gill. It was great fun, if a little tiring. There is something primally satisfying about turning a piece of wood into woodchips. Getting a spoon or spatula at the end of the process is a huge bonus. We came away with a bag full of more or less decent <a href="http://en.wikipedia.org/wiki/Treen_(wooden)">treen</a>, a couple of woodcarving knives and a burning desire to own one of Robin&#8217;s small drinking vessels.</p>


	<p>Oh. And I fell in love with an Axe. The Gr&auml;nsfors Bruks <a href="http://www.gransfors.com/htm_eng/produkter/new_prod/p_slojdbila.html">Swedish Carving Axe</a> to be precise. This is the tool you use for turning a log into a spoon blank, and for much of the rough shaping of that blank. During the course of the weekend, I tried both the Gr&auml;nsfors axe and an English &#8216;Kent pattern&#8217; axe of the sort that can be picked up at car boot sales for pennies and sharpened and rehandled easily (quite what you use to rough out the new handle is left as an exercise to the interested reader). The English axe was very nice, but the Swedish one was just lovely. In particular, there&#8217;s a move which involves gripping the handle right by the head and flicking your wrist. This takes the top half of the blade through the wood in a precise sweeping motion that slices off wood in a way that&#8217;s almost erotically satisfying.</p>


	<p>Yup. I don&#8217;t get out much. Why do you ask?</p>


	<p>My choice lies before me: an English blade for maybe a fiver from a car boot sale or a sultry Swedish beauty for seventy quid from <a href="http://www.gransfors.co.uk/gransfors%20tools.html">gransfors.co.uk</a>? It&#8217;s not even a choice. The Swedish beauty had me at &#8216;car boot sale&#8217; &#8211; I&#8217;m not sure which circle of hell car boot sales belong in, but I&#8217;m certain I don&#8217;t want want to go there. Besides, I&#8217;m a photographer and a computer programmer. Most of the <a href="http://www.dpreview.com/previews/nikond700/">bits</a> <a href="http://www.ebonycamera.com/">and</a> <a href="http://www.apple.com/macbookair/">pieces</a> cost hundreds or thousands of pounds.</p>


	<p>Now, where did I put my credit card?</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/Lx-NTPBoLmU&#38;hl=en&#38;fs=1"></param><param name="allowFullScreen" value="true"></param><embed src="http://www.youtube.com/v/Lx-NTPBoLmU&#38;hl=en&#38;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></embed></object>

	<p>We&#8217;ve just spent the weekend on one of <a href="http://www.robin-wood.co.uk/">Robin Wood&#8217;s</a> spoon carving workshops, which was my 41st birthday present from Gill. It was great fun, if a little tiring. There is something primally satisfying about turning a piece of wood into woodchips. Getting a spoon or spatula at the end of the process is a huge bonus. We came away with a bag full of more or less decent <a href="http://en.wikipedia.org/wiki/Treen_(wooden)">treen</a>, a couple of woodcarving knives and a burning desire to own one of Robin&#8217;s small drinking vessels.</p>


	<p>Oh. And I fell in love with an Axe. The Gr&auml;nsfors Bruks <a href="http://www.gransfors.com/htm_eng/produkter/new_prod/p_slojdbila.html">Swedish Carving Axe</a> to be precise. This is the tool you use for turning a log into a spoon blank, and for much of the rough shaping of that blank. During the course of the weekend, I tried both the Gr&auml;nsfors axe and an English &#8216;Kent pattern&#8217; axe of the sort that can be picked up at car boot sales for pennies and sharpened and rehandled easily (quite what you use to rough out the new handle is left as an exercise to the interested reader). The English axe was very nice, but the Swedish one was just lovely. In particular, there&#8217;s a move which involves gripping the handle right by the head and flicking your wrist. This takes the top half of the blade through the wood in a precise sweeping motion that slices off wood in a way that&#8217;s almost erotically satisfying.</p>


	<p>Yup. I don&#8217;t get out much. Why do you ask?</p>


	<p>My choice lies before me: an English blade for maybe a fiver from a car boot sale or a sultry Swedish beauty for seventy quid from <a href="http://www.gransfors.co.uk/gransfors%20tools.html">gransfors.co.uk</a>? It&#8217;s not even a choice. The Swedish beauty had me at &#8216;car boot sale&#8217; &#8211; I&#8217;m not sure which circle of hell car boot sales belong in, but I&#8217;m certain I don&#8217;t want want to go there. Besides, I&#8217;m a photographer and a computer programmer. Most of the <a href="http://www.dpreview.com/previews/nikond700/">bits</a> <a href="http://www.ebonycamera.com/">and</a> <a href="http://www.apple.com/macbookair/">pieces</a> cost hundreds or thousands of pounds.</p>


	<p>Now, where did I put my credit card?</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3300</id>
    <published>2008-09-25T23:50:04-05:00</published>
    <updated>2008-09-25T23:52:33-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/25/just-a-thought"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Just a thought</title>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="practiceofprogramming" scheme="http://www.bofh.org.uk/articles/tag/practiceofprogramming"/>
    <category term="smalltalk" scheme="http://www.bofh.org.uk/articles/tag/smalltalk"/>
    <category term="refactoring" scheme="http://www.bofh.org.uk/articles/tag/refactoring"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>There&#8217;s a refactoring principle that states that, when you start doing the same thing for the third time, you should refactor to remove the duplication.</p>


	<p>I&#8217;m starting to wonder if there&#8217;s a Smalltalk principle which states that, when you start doing the same thing the second time, you should search the image for the obviously named method (or use the method finder to find some candidate by feeding it some inputs and an expected answer), because the odds are good that it&#8217;s only the second time for you &#8211; it might be the millionth time for the image you&#8217;re working in.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>There&#8217;s a refactoring principle that states that, when you start doing the same thing for the third time, you should refactor to remove the duplication.</p>


	<p>I&#8217;m starting to wonder if there&#8217;s a Smalltalk principle which states that, when you start doing the same thing the second time, you should search the image for the obviously named method (or use the method finder to find some candidate by feeding it some inputs and an expected answer), because the odds are good that it&#8217;s only the second time for you &#8211; it might be the millionth time for the image you&#8217;re working in.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3299</id>
    <published>2008-09-20T04:52:23-05:00</published>
    <updated>2008-09-21T01:31:44-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/20/and-if-there-were-what-then"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">And if there were, what then?</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="rants" scheme="http://www.bofh.org.uk/articles/tag/rants"/>
    <category term="religion" scheme="http://www.bofh.org.uk/articles/tag/religion"/>
    <category term="questions" scheme="http://www.bofh.org.uk/articles/tag/questions"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>The <a href="http://uk.alpha.org/">Alpha Course</a> people have been running a bunch of poster ads built around the slogan &#8220;If God did exist, what would you ask?&#8221;. The posters are filled with anodyne questions like &#8220;What&#8217;s the point?&#8221; or &#8220;Is this it?&#8221;.</p>


	<p>They also tend to have large amounts of white space on them &#8211; I&#8217;m sure there are enterprising graffiti artists out there who look upon that as a  fine opportunity.</p>


	<p>So, here&#8217;s a few questions I&#8217;d ask god, if it existed:</p>


	<h3>What about that malaria parasite?</h3>


	<p>Because nothing says boundless Love like cooking up a disease that kills millions upon millions of people in the service of a parasitic lifecycle. Malaria&#8217;s been around so long that at some point during the long war between the parasite and humans, evolution cooked up a kink in the genome to try and keep the disease at bay. It works too. Sort of. Admittedly, if you get two copies of the gene, you get sickle cell anaemia, but malaria&#8217;s that awful that that bet seems worth making.</p>


	<h3>What&#8217;s the opportunity cost of religion?</h3>


	<p>Think about it. What proportion of humanity&#8217;s store of creativity, effort and money has been pissed up the wall in the service of religion over the years? Okay, so, the Sistine Chapel is a bit special, Bach&#8217;s Cantatas prod some serious buttock and it&#8217;s hugely good fun to sing from <cite>The Sacred Harp</cite>. But genius doesn&#8217;t go away if religion isn&#8217;t there. What would those artists have done, unshackled? And what might our scientists have done? The church has suppressed any number of scientific advances over the centuries and is still trying it on today. Look at the ongoing furore about stem cell research, cloning and all that other potentially good stuff.</p>


	<p>Go to almost any place of worship and try to count the cost of it. It won&#8217;t be long &#8216;til you&#8217;re up to $lots. The money to pay for that comes off the backs of working people. For centuries, the tradition of tithing &#8211; giving 10% of your income to the church &#8211; wasn&#8217;t just a tradition, it was The Law. 10% of everything you earned, grew, made. For what? What might free people have achieved given that money and time to use as they saw fit?</p>


	<h3>Hitler, Pol Pot, Stalin, The Spanish Inquisition, Conquistadors&#8230; why?</h3>


	<p>Religious apologists would have you believe that the first three of those are proof of the awfulness of atheism. But they built their power and performed their atrocities by harnessing up the same religious impulses that gave us the Spanish Inquisition and the conquistadors. The religious impulse says &#8220;We are the Right People, they are savages&#8221;. Once you&#8217;ve got people convinced that they&#8217;re on the right side of the fence, it&#8217;s amazing what they&#8217;ll do to others in the name of a loving god.</p>


	<p>If god exists, why were these people even born? You can tell me that god works in mysterious ways its wonders to perform, but I don&#8217;t really see how you can call genocide a &#8216;wonder&#8217;. If god&#8217;s going to claim to be the source of morality, then surely it should be held to those same standards. If god exists, then it has the power to stop atrocities. The fact that they happen leads me to infer that either there is no god, or any existing god is malevolent.</p>


	<h3>What&#8217;s wrong with women?</h3>


	<p>Look at almost any holy book you care to name, and women usually end up holding the smelly end of the stick. It may well be that sexism is endemic in human nature (I don&#8217;t think it is mind), but when you have religious authority for treating women as chattels, keeping them barefoot and pregnant and generally treating them as second class citizens&#8230; Well, it doesn&#8217;t help does it? Most of the holy books seems to have a pretty low opinion of men&#8217;s ability to keep it in their pants too. Otherwise why all the idiotic strictures about women keeping themselves covered up lest they inflame the uncontrollable desires of men. Come on! Blaming the victim&#8217;s so medieval.</p>


	<h3>Why should I worship you?</h3>


	<p>So, god made me. Big fucking deal. In the words of every teenager ever: I didn&#8217;t ask to be born. I owe god nothing. If I <em>did</em> want to worship my creator then I&#8217;d be far more inclined to worship my mother; I know she exists, and she went to a great deal more trouble to bring me into the world than anyone or any thing else that I can think of.</p>


	<h3>How do we get rid of you?</h3>


	<p>Seriously. God&#8217;s nothing but trouble. The suffering in the world&#8217;s dreadful when you stop to think about it. If we can lay the blame at the door of the cold, implacable machine that is Darwinian evolution, then there&#8217;s comfort in knowing that it&#8217;s nothing <em>personal</em>. It&#8217;s just the way the chips have fallen. There&#8217;s comfort too in knowing that there&#8217;s nothing to stop us as individuals and as a wider community doing everything in our power to make the world a better place for us, our children and the 8 billion other folks we&#8217;re sharing the place with. Because this is it. This is our only go on the merry go round. There&#8217;s no heaven, no hell, there&#8217;s just the world we make for ourselves and pass on to the next lot. It&#8217;s in our own best interests to look after it.</p>


	<p>But if you have to lay the blame for the bad stuff at the door of some god, some conscious being who deliberately did this&#8230; It&#8217;s intolerable, frankly. That some being could <em>choose</em> to unleash malaria, TB, bubonic plague, syphilis, <span class="caps">AIDS</span> and the common cold on the world that it created is just&#8230; When we catch kids pulling the wings off flies, we tell &#8216;em off. When we catch god doing worse things, we (or a depressingly large fraction of us) <em>worship</em> the bloody thing. And because we buy the promise of a better world to come, we do a crappy job of making the world we&#8217;re in a better place. Great.</p>


	<h3>Does god exist?</h3>


	<p>I&#8217;m an atheist. I doubt anyone could prove, absolutely, the nonexistence of god. However, I fervently hope that there is no god because the alternative is so awful.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>The <a href="http://uk.alpha.org/">Alpha Course</a> people have been running a bunch of poster ads built around the slogan &#8220;If God did exist, what would you ask?&#8221;. The posters are filled with anodyne questions like &#8220;What&#8217;s the point?&#8221; or &#8220;Is this it?&#8221;.</p>


	<p>They also tend to have large amounts of white space on them &#8211; I&#8217;m sure there are enterprising graffiti artists out there who look upon that as a  fine opportunity.</p>


	<p>So, here&#8217;s a few questions I&#8217;d ask god, if it existed:</p>


	<h3>What about that malaria parasite?</h3>


	<p>Because nothing says boundless Love like cooking up a disease that kills millions upon millions of people in the service of a parasitic lifecycle. Malaria&#8217;s been around so long that at some point during the long war between the parasite and humans, evolution cooked up a kink in the genome to try and keep the disease at bay. It works too. Sort of. Admittedly, if you get two copies of the gene, you get sickle cell anaemia, but malaria&#8217;s that awful that that bet seems worth making.</p>


	<h3>What&#8217;s the opportunity cost of religion?</h3>


	<p>Think about it. What proportion of humanity&#8217;s store of creativity, effort and money has been pissed up the wall in the service of religion over the years? Okay, so, the Sistine Chapel is a bit special, Bach&#8217;s Cantatas prod some serious buttock and it&#8217;s hugely good fun to sing from <cite>The Sacred Harp</cite>. But genius doesn&#8217;t go away if religion isn&#8217;t there. What would those artists have done, unshackled? And what might our scientists have done? The church has suppressed any number of scientific advances over the centuries and is still trying it on today. Look at the ongoing furore about stem cell research, cloning and all that other potentially good stuff.</p>


	<p>Go to almost any place of worship and try to count the cost of it. It won&#8217;t be long &#8216;til you&#8217;re up to $lots. The money to pay for that comes off the backs of working people. For centuries, the tradition of tithing &#8211; giving 10% of your income to the church &#8211; wasn&#8217;t just a tradition, it was The Law. 10% of everything you earned, grew, made. For what? What might free people have achieved given that money and time to use as they saw fit?</p>


	<h3>Hitler, Pol Pot, Stalin, The Spanish Inquisition, Conquistadors&#8230; why?</h3>


	<p>Religious apologists would have you believe that the first three of those are proof of the awfulness of atheism. But they built their power and performed their atrocities by harnessing up the same religious impulses that gave us the Spanish Inquisition and the conquistadors. The religious impulse says &#8220;We are the Right People, they are savages&#8221;. Once you&#8217;ve got people convinced that they&#8217;re on the right side of the fence, it&#8217;s amazing what they&#8217;ll do to others in the name of a loving god.</p>


	<p>If god exists, why were these people even born? You can tell me that god works in mysterious ways its wonders to perform, but I don&#8217;t really see how you can call genocide a &#8216;wonder&#8217;. If god&#8217;s going to claim to be the source of morality, then surely it should be held to those same standards. If god exists, then it has the power to stop atrocities. The fact that they happen leads me to infer that either there is no god, or any existing god is malevolent.</p>


	<h3>What&#8217;s wrong with women?</h3>


	<p>Look at almost any holy book you care to name, and women usually end up holding the smelly end of the stick. It may well be that sexism is endemic in human nature (I don&#8217;t think it is mind), but when you have religious authority for treating women as chattels, keeping them barefoot and pregnant and generally treating them as second class citizens&#8230; Well, it doesn&#8217;t help does it? Most of the holy books seems to have a pretty low opinion of men&#8217;s ability to keep it in their pants too. Otherwise why all the idiotic strictures about women keeping themselves covered up lest they inflame the uncontrollable desires of men. Come on! Blaming the victim&#8217;s so medieval.</p>


	<h3>Why should I worship you?</h3>


	<p>So, god made me. Big fucking deal. In the words of every teenager ever: I didn&#8217;t ask to be born. I owe god nothing. If I <em>did</em> want to worship my creator then I&#8217;d be far more inclined to worship my mother; I know she exists, and she went to a great deal more trouble to bring me into the world than anyone or any thing else that I can think of.</p>


	<h3>How do we get rid of you?</h3>


	<p>Seriously. God&#8217;s nothing but trouble. The suffering in the world&#8217;s dreadful when you stop to think about it. If we can lay the blame at the door of the cold, implacable machine that is Darwinian evolution, then there&#8217;s comfort in knowing that it&#8217;s nothing <em>personal</em>. It&#8217;s just the way the chips have fallen. There&#8217;s comfort too in knowing that there&#8217;s nothing to stop us as individuals and as a wider community doing everything in our power to make the world a better place for us, our children and the 8 billion other folks we&#8217;re sharing the place with. Because this is it. This is our only go on the merry go round. There&#8217;s no heaven, no hell, there&#8217;s just the world we make for ourselves and pass on to the next lot. It&#8217;s in our own best interests to look after it.</p>


	<p>But if you have to lay the blame for the bad stuff at the door of some god, some conscious being who deliberately did this&#8230; It&#8217;s intolerable, frankly. That some being could <em>choose</em> to unleash malaria, TB, bubonic plague, syphilis, <span class="caps">AIDS</span> and the common cold on the world that it created is just&#8230; When we catch kids pulling the wings off flies, we tell &#8216;em off. When we catch god doing worse things, we (or a depressingly large fraction of us) <em>worship</em> the bloody thing. And because we buy the promise of a better world to come, we do a crappy job of making the world we&#8217;re in a better place. Great.</p>


	<h3>Does god exist?</h3>


	<p>I&#8217;m an atheist. I doubt anyone could prove, absolutely, the nonexistence of god. However, I fervently hope that there is no god because the alternative is so awful.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3298</id>
    <published>2008-09-15T04:20:27-05:00</published>
    <updated>2008-09-15T04:21:25-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/15/arguments-you-wouldnt-make-in-alabama"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Arguments you wouldn't make in Alabama</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="music" label="Music" scheme="http://www.bofh.org.uk/articles/category/music"/>
    <category term="singing" scheme="http://www.bofh.org.uk/articles/tag/singing"/>
    <category term="sacredharp" scheme="http://www.bofh.org.uk/articles/tag/sacredharp"/>
    <category term="darwinianevolution" scheme="http://www.bofh.org.uk/articles/tag/darwinianevolution"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I spent the weekend at the UK Sacred Harp Convention, singing blood curdling hymns to the glory of god, very loudly with a hundred or so others. Great fun so it was. There&#8217;s something joyous about hollering out a hymn that opens with the line &#8220;And am I born to die?&#8221; and ends with the stanza</p>


	<blockquote>
		<p>Waked by the trumpet&#8217;s sound<br/>
I from my grave shall rise<br/>
And see the Judge in glory crowned<br/>
And see the flaming skies</p>
	</blockquote>


	<p>Especially if you&#8217;re stood in the middle of a hollow square with the altos behind you hitting a high note that lifts every hair on the back of you neck.</p>


	<p>Anyhow, at one point during the Saturday evening social I found myself arguing that, although we singers today may feel grateful to those congregations of singers down the years who have sung these songs and handed the practice down to succeeding generations, there&#8217;s no <em>requirement</em> to be grateful, or even to go hunting for &#8216;authenticity&#8217;. Every generation that&#8217;s sung these songs and many others haven&#8217;t sung them to preserve them or to pass them on. They&#8217;ve sung them because the act of singing them has helped them to get through their lives. The songs we have, we know because successive generations have found them to be worth singing or recording. And we sing them for similar reasons. Future generations can go hang, I sing this stuff because it makes me feel good, not because I have some kind of duty.</p>


	<p>&#8220;It&#8217;s a Darwinian argument,&#8221; I said, &#8220;Though obviously, I wouldn&#8217;t put it like that in Alabama&#8230;&#8221;</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I spent the weekend at the UK Sacred Harp Convention, singing blood curdling hymns to the glory of god, very loudly with a hundred or so others. Great fun so it was. There&#8217;s something joyous about hollering out a hymn that opens with the line &#8220;And am I born to die?&#8221; and ends with the stanza</p>


	<blockquote>
		<p>Waked by the trumpet&#8217;s sound<br/>
I from my grave shall rise<br/>
And see the Judge in glory crowned<br/>
And see the flaming skies</p>
	</blockquote>


	<p>Especially if you&#8217;re stood in the middle of a hollow square with the altos behind you hitting a high note that lifts every hair on the back of you neck.</p>


	<p>Anyhow, at one point during the Saturday evening social I found myself arguing that, although we singers today may feel grateful to those congregations of singers down the years who have sung these songs and handed the practice down to succeeding generations, there&#8217;s no <em>requirement</em> to be grateful, or even to go hunting for &#8216;authenticity&#8217;. Every generation that&#8217;s sung these songs and many others haven&#8217;t sung them to preserve them or to pass them on. They&#8217;ve sung them because the act of singing them has helped them to get through their lives. The songs we have, we know because successive generations have found them to be worth singing or recording. And we sing them for similar reasons. Future generations can go hang, I sing this stuff because it makes me feel good, not because I have some kind of duty.</p>


	<p>&#8220;It&#8217;s a Darwinian argument,&#8221; I said, &#8220;Though obviously, I wouldn&#8217;t put it like that in Alabama&#8230;&#8221;</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3297</id>
    <published>2008-09-08T01:50:55-05:00</published>
    <updated>2008-09-10T01:21:09-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/08/if-youre-going-to-add-a-hook-make-it-a-big-one"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">If you're going to add a hook, make it a big one</title>
    <category term="ruby" label="Ruby" scheme="http://www.bofh.org.uk/articles/category/ruby"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Jay Fields <a href="http://blog.jayfields.com/2008/09/domain-specific-languages-dont-follow.html">responds to</a> on Ola Bini&#8217;s <a href="http://olabini.com/blog/2008/09/evil-hook-methods/">Evil Hook Methods?</a> about the common ruby idiom that lets us write:</p>


<pre><code>class Fruit
  include DataMapper::Resource
  property :id, Integer, :serial =&gt; true
  property :name, String
  property :notes, Text, :lazy =&gt; false
end</code></pre>

	<p>What Ola and Jay don&#8217;t like about that is the way that a single <code>include DataMapper::Resource</code> actually adds class methods to Fruit because the implementation of <code>DataMapper::Resource.included</code> looks like:</p>


<pre><code>module DataMapper::Resource
  def included(module)
    module.send :include, InstanceMethods
    module.send :extend, ClassMethods
  end
end</code></pre>

	<p>Which is a perfectly common idiom nowadays, but which breaks <code>include</code>&#8217;s contract in annoying ways. Jay proposes fixing this by adding a <code>become</code> method to Object which would wrap the <code>include</code> and <code>extend</code> in such away that they&#8217;d be called by the including class. Huzzah. And it makes sense&#8230; sort of. But it really doesn&#8217;t go far enough.</p>


	<p>Let&#8217;s take another look at the original code snippet shall we? The thing that I notice is the wide scope of that &#8216;property&#8217; method. It really isn&#8217;t needed anywhere except for defining how a <code>Fruit</code> is mapped onto the database. What happens if we take a leaf out of Perl&#8217;s book:</p>


<pre><code>class Fruit
  use DataMapper::Resource {
    property :id, Integer, :serial =&gt; true
    property :name, String
    property :notes, Text, :lazy =&gt; false
  }
  property :foo # =&gt; raises an exception
end</code></pre>

	<p>The block gives our extending module somewhere to play, it can introduce a full on domain specific pidgin for the duration of the block with no fear of polluting the including class with anything but the methods its contracted to provide. So, how do we implement <code>use</code>. Something like the following should serve the purpose:</p>


<pre><code>class Module
  def self.use(mod, *args, &#38;block)
    mod.used_by(self, *args, &#38;block)
  end

  def self.used_by(mod, *args, &#38;block)
    if instance_behaviours || class_behaviours
      mod.become(self)
    else
      mod.send(:include, self)
    end
  end

  def self.become(mod)
    include mod.instance_behaviours) if mod.instance_behaviours
    extend mod.class_behaviours if mod.class_behaviours
  end

  def self.instance_behaviours
    nil
  end

  def self.class_behaviours
    nil
  end
end</code></pre>

	<p>The key idea here is that, in the default case, <code>use</code> will ignore all its arguments beyond the first and just include that module (a more robust implementation would probably ensure that an exception was raised if any extra arguments got passed). If the module author had written her module to comply with Jay&#8217;s proposed <code>become</code>, then we simply call <code>become</code>.</p>


	<p>The interesting stuff happens when a module wants to do something a little more trick. So a version of DataMapper might do something like:</p>


<pre><code>class DataMapper::Resource
  def self.used_by(mod, &#38;block)
    mod.become build_behaviours(mod, &#38;block)
  end
end</code></pre>

	<p>And <code>build_behaviours</code> would <code>instance_eval</code> the block with an object that would capture the properties and use them to build a set of class and instance methods appropriate to the description.</p>


	<p>Another module might simply take a hash to describe how things should be parameterized. It all depends on the needs of the module being used. The aim being to avoid polluting the caller&#8217;s namespace any more than necessary. If I use a DataMapper type package, then all I want to end up with in my client classes are appropriate instance accessor methods, I don&#8217;t need spare class methods like <code>property</code> or <code>storage_names</code> that are only of any use when I&#8217;m describing my class.</p>


	<h3>Updates</h3>


	<p>I edited one of the code snippets to remove a particularly heinous piece of brace matching. Thanks to Giles Bowkett for the catch. Also edited another snippet to make it into real ruby rather than some bastard combination of Ruby and Perl. Thanks to Yossef for that catch.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Jay Fields <a href="http://blog.jayfields.com/2008/09/domain-specific-languages-dont-follow.html">responds to</a> on Ola Bini&#8217;s <a href="http://olabini.com/blog/2008/09/evil-hook-methods/">Evil Hook Methods?</a> about the common ruby idiom that lets us write:</p>


<pre><code>class Fruit
  include DataMapper::Resource
  property :id, Integer, :serial =&gt; true
  property :name, String
  property :notes, Text, :lazy =&gt; false
end</code></pre>

	<p>What Ola and Jay don&#8217;t like about that is the way that a single <code>include DataMapper::Resource</code> actually adds class methods to Fruit because the implementation of <code>DataMapper::Resource.included</code> looks like:</p>


<pre><code>module DataMapper::Resource
  def included(module)
    module.send :include, InstanceMethods
    module.send :extend, ClassMethods
  end
end</code></pre>

	<p>Which is a perfectly common idiom nowadays, but which breaks <code>include</code>&#8217;s contract in annoying ways. Jay proposes fixing this by adding a <code>become</code> method to Object which would wrap the <code>include</code> and <code>extend</code> in such away that they&#8217;d be called by the including class. Huzzah. And it makes sense&#8230; sort of. But it really doesn&#8217;t go far enough.</p>


	<p>Let&#8217;s take another look at the original code snippet shall we? The thing that I notice is the wide scope of that &#8216;property&#8217; method. It really isn&#8217;t needed anywhere except for defining how a <code>Fruit</code> is mapped onto the database. What happens if we take a leaf out of Perl&#8217;s book:</p>


<pre><code>class Fruit
  use DataMapper::Resource {
    property :id, Integer, :serial =&gt; true
    property :name, String
    property :notes, Text, :lazy =&gt; false
  }
  property :foo # =&gt; raises an exception
end</code></pre>

	<p>The block gives our extending module somewhere to play, it can introduce a full on domain specific pidgin for the duration of the block with no fear of polluting the including class with anything but the methods its contracted to provide. So, how do we implement <code>use</code>. Something like the following should serve the purpose:</p>


<pre><code>class Module
  def self.use(mod, *args, &#38;block)
    mod.used_by(self, *args, &#38;block)
  end

  def self.used_by(mod, *args, &#38;block)
    if instance_behaviours || class_behaviours
      mod.become(self)
    else
      mod.send(:include, self)
    end
  end

  def self.become(mod)
    include mod.instance_behaviours) if mod.instance_behaviours
    extend mod.class_behaviours if mod.class_behaviours
  end

  def self.instance_behaviours
    nil
  end

  def self.class_behaviours
    nil
  end
end</code></pre>

	<p>The key idea here is that, in the default case, <code>use</code> will ignore all its arguments beyond the first and just include that module (a more robust implementation would probably ensure that an exception was raised if any extra arguments got passed). If the module author had written her module to comply with Jay&#8217;s proposed <code>become</code>, then we simply call <code>become</code>.</p>


	<p>The interesting stuff happens when a module wants to do something a little more trick. So a version of DataMapper might do something like:</p>


<pre><code>class DataMapper::Resource
  def self.used_by(mod, &#38;block)
    mod.become build_behaviours(mod, &#38;block)
  end
end</code></pre>

	<p>And <code>build_behaviours</code> would <code>instance_eval</code> the block with an object that would capture the properties and use them to build a set of class and instance methods appropriate to the description.</p>


	<p>Another module might simply take a hash to describe how things should be parameterized. It all depends on the needs of the module being used. The aim being to avoid polluting the caller&#8217;s namespace any more than necessary. If I use a DataMapper type package, then all I want to end up with in my client classes are appropriate instance accessor methods, I don&#8217;t need spare class methods like <code>property</code> or <code>storage_names</code> that are only of any use when I&#8217;m describing my class.</p>


	<h3>Updates</h3>


	<p>I edited one of the code snippets to remove a particularly heinous piece of brace matching. Thanks to Giles Bowkett for the catch. Also edited another snippet to make it into real ruby rather than some bastard combination of Ruby and Perl. Thanks to Yossef for that catch.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3296</id>
    <published>2008-09-01T03:56:14-05:00</published>
    <updated>2008-09-01T03:56:14-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/09/01/oh-bugger"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Oh. Bugger</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If you asked me to name my favourite radio and TV comedy, the odds are very good that Geoffrey Perkins had a hand in most of them. When I found his <a href="http://www.guardian.co.uk/media/2008/sep/01/television2">obituary</a> in this morning&#8217;s Guardian I felt almost physically winded. I never met him, I don&#8217;t know anyone who did, but he was someone who helped to make the world a pleasanter place to be in. My thoughts are with his family and friends, who are no doubt even more gutted than I am.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If you asked me to name my favourite radio and TV comedy, the odds are very good that Geoffrey Perkins had a hand in most of them. When I found his <a href="http://www.guardian.co.uk/media/2008/sep/01/television2">obituary</a> in this morning&#8217;s Guardian I felt almost physically winded. I never met him, I don&#8217;t know anyone who did, but he was someone who helped to make the world a pleasanter place to be in. My thoughts are with his family and friends, who are no doubt even more gutted than I am.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3295</id>
    <published>2008-08-20T11:28:26-05:00</published>
    <updated>2008-08-20T13:57:09-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/08/20/get-sophisticated"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Get sophisticated</title>
    <category term="ruby" label="Ruby" scheme="http://www.bofh.org.uk/articles/category/ruby"/>
    <category term="ruby" scheme="http://www.bofh.org.uk/articles/tag/ruby"/>
    <category term="practiceofprogramming" scheme="http://www.bofh.org.uk/articles/tag/practiceofprogramming"/>
    <category term="patterns" scheme="http://www.bofh.org.uk/articles/tag/patterns"/>
    <category term="railscamp08" scheme="http://www.bofh.org.uk/articles/tag/railscamp08"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Ruby&#8217;s primitives (Strings, Hashes, Arrays, Numbers &#8211; anything that has a literal syntax) are fine things. But that doesn&#8217;t mean you should use them everywhere. You&#8217;re often much better off wrapping them up in your own Value Objects.</p>


	<p>Something I was working on at Railscamp this weekend threw up a great example of why it makes sense to replace primitives with more specific objects as soon as possible. <a href="http://tommorris.org/">Tom Morris</a> asked me to take a look at <a href="http://github.com/tommorris/rena">Rena</a>, an <span class="caps">RDF</span>/Semantic Web thingy.</p>


	<p>The <span class="caps">RDF</span> spec describes two types of literals: a plain literal, which is a string with an optional language attribute and a typed literal, which is a string and an encoding (so the string might represent an integer, float, or anything else that your schema feels like expressing).</p>


	<p>These literals can be output in one of (at least) two formats. We&#8217;ll start by looking at <code>Literal#to_trix</code> and see where that takes us:</p>


<pre name="code" class="ruby"><code>
def to_trix
  if @lang != nil &#38;&#38; @lang != "" 
    out = "&lt;plainLiteral xml:lang=\"" + @lang + "\"&gt;" 
  else
    out = "&lt;plainLiteral&gt;" 
  end
  out += @contents
  out += "&lt;/plainLiteral&gt;" 
  return out
end
</code></pre>

	<p>If we look over at <code>TypedLiteral#to_trix</code> we see a much more straightforward implementation:</p>


<pre name="code" class="ruby"><code>
def to_trix
  "&lt;typedLiteral datatype=\"#{@encoding}\"&gt;#{@contents}&lt;/typedLiteral&gt;" 
end
</code></pre>

	<p>How do we eliminate that ugly conditional at the beginning of <code>Literal#to_trix</code>, and analogous conditionals in <code>Literal#to_n3</code> and <code>TypedLiteral#to_n3</code>?</p>


	<p>My first thought was that I wanted to be able to write something like:</p>


<pre name="code" class="ruby"><code>
def to_trix
  "&lt;plainLiteral#{@lang.to_trix}&gt;#{@contents}&lt;/plainLiteral&gt;" 
end
</code></pre>

	<p>But I didn&#8217;t want every string in the world suddenly acquiring a <code>to_trix</code> method. So, the solution was to intoduce a <code>Literal::Language</code> class and coerce our language into it, so <code>Literal#initialize</code> became:</p>


<pre name="code" class="ruby"><code>
def initialize(contents, lang = nil)
  @contents = contents
  @lang = Language.coerce(lang)
end  
</code></pre>

	<p>And Language would look something like:</p>


<pre name="code" class="ruby"><code>
def self.coerce(lang)
  if lang.is_a?(self)
    return lang
  end

  new(lang.to_s.downcase)
end

def initialize(lang)
  @value = lang
end

def to_trix
  if @value == ''
    ''
  else
    " xml:lang=\"#{@value}\"" 
  end
end    
</code></pre>

	<p>That ugly conditional&#8217;s still there though, so we introduced the Null Object pattern, and things started to look a good deal cleaner:</p>


<pre name="code" class="ruby"><code>
class Language
  class Null
    include Singleton

    def to_trix
      ''
    end
  end

  def self.coerce(lang)
    case lang
    when self
      return lang
    when nil, ''
      return Null.instance
    else
      return new(lang.to_s.downcase)
    end
  end

  ...

  def to_trix
    " xml:lang=\"#{@value}\"" 
  end
end
</code></pre>

	<p>At this point, we&#8217;re still just pushing code around. If anything, we&#8217;ve got more lines of code now than when we started, but we&#8217;re starting to move behaviour nearer to the data it relates to, and our objects are starting to look like objects rather than data structures. So, we press on and make a <code>TypedLiteral::Encoding</code> class and, at this point things start to look interesting. TypedLiteral is starting to look almost exactly the same as Literal, but with an Encoding rather than a language.</p>


	<p>That strange leading space in <code>Language#to_trix</code> is starting bug me. Let&#8217;s rewrite like so:</p>


<pre name="code" class="ruby"><code>
class Literal 
  class Language
    def format_as_trix(literal)
      "&lt;plainLiteral xml:lang=\"#{@value}\"&gt;#{literal}&lt;/plainLiteral&gt;" 
    end

    class Null
      def format_as_trix(literal)
        "&lt;plainLiteral&gt;#{literal}&lt;/plainLiteral&gt;" 
      end
    end
  end

  def to_trix
    @lang.format_as_trix(@contents)
  end
end
</code></pre>

	<p>If we make analogous change to <code>TypedLiteral</code> and <code>TypedLiteral::Encoding</code> it&#8217;s obvious that TypedLiteral and Literal were essentially the same class. Renaming <code>@lang</code> and <code>@encoding</code> to <code>@language_or_encoding</code> makes this blindingly obvious, so we&#8217;ll remove all of TypedLiteral&#8217;s methods except initialize. All that remains is to introduce <code>Literal.untyped</code> and <code>Literal.typed</code> factory methods to Literal, and make <code>Literal.new</code> into a private method and we can remove TypedLiteral in its entireity. So we change the specs to reflect the new <span class="caps">API</span> (wrong way round I know). Now we have a chunk of shorter, clearer code that will hopefully be easier to extend to cope with outputting literals in other formats.</p>


	<h3>Retrospective</h3>


	<p>I realise that patterns aren&#8217;t the goal of development, but by the end of the process we have a Strategy (Language/Encoding), a couple of Factory Methods (<code>Literal.typed</code>, <code>Literal.untyped</code>) and a couple of factoryish methods (<code>Language.coerce</code>, <code>Encoding.coerce</code>).</p>


	<p>The most important aspect of the change was the introduction of the two new value object classes. Once they were introduced, they became the obvious places in which to put the varying behaviour and eliminate the repeatition of conditional code from the <code>to_*</code> methods. If there were to be a third output style, I would look at introducing classes like <code>N3Stream</code>, <code>TrixStream</code> and <code>WhateverStream</code> and have a scheme like:</p>


<pre name="code" class="ruby"><code>
def to_n3
  print_on( N3Stream.new )
end

def print_on(stream)
  language_or_encoding.print_on(stream, value)
end
</code></pre>

	<p>but that&#8217;s almost certainly over complicating things right now.</p>


	<p>The other thing I like about this kind of refactoring is that it drives the code towards methods and classes which obey the single responsibility principle and, at the end of the process, not only do we have fewer lines of code in total, but the individual methods involved are <em>all</em> substantially shorter and closer to the left hand margin.</p>


	<p>I really should start doing this kind of thing more in my Rails practice &#8211; I keep being put off by the fact that the <code>composed_of</code> helper is so annoyingly not quite right and, rather than submitting a patch or making a plugin I go &#8220;Ah well&#8230; I can live with a string for a bit longer&#8230;&#8221; and I <em>know</em>. From hard won experience at that, that it&#8217;s going to come and bite me. It&#8217;s already bitten Rails recently when Ruby got a new <code>String#to_chars</code> which doesn&#8217;t work like the ActiveSupport version.</p>


	<h3>Notes</h3>


	<p>If you want to see the gory details of how the change got made, Tom has merged this weekends changes into the github repository. It didn&#8217;t happen in quite the order I&#8217;ve described it in this post, but neither is this post a complete fabrication.</p>


	<h3>Changes</h3>


	<p>Corrected a stupid typo in the first block of code. Ugly condition is actually <code>if @lang != nil &#38;&#38; @lang != ''</code></p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Ruby&#8217;s primitives (Strings, Hashes, Arrays, Numbers &#8211; anything that has a literal syntax) are fine things. But that doesn&#8217;t mean you should use them everywhere. You&#8217;re often much better off wrapping them up in your own Value Objects.</p>


	<p>Something I was working on at Railscamp this weekend threw up a great example of why it makes sense to replace primitives with more specific objects as soon as possible. <a href="http://tommorris.org/">Tom Morris</a> asked me to take a look at <a href="http://github.com/tommorris/rena">Rena</a>, an <span class="caps">RDF</span>/Semantic Web thingy.</p>


	<p>The <span class="caps">RDF</span> spec describes two types of literals: a plain literal, which is a string with an optional language attribute and a typed literal, which is a string and an encoding (so the string might represent an integer, float, or anything else that your schema feels like expressing).</p>


	<p>These literals can be output in one of (at least) two formats. We&#8217;ll start by looking at <code>Literal#to_trix</code> and see where that takes us:</p>


<pre name="code" class="ruby"><code>
def to_trix
  if @lang != nil &#38;&#38; @lang != "" 
    out = "&lt;plainLiteral xml:lang=\"" + @lang + "\"&gt;" 
  else
    out = "&lt;plainLiteral&gt;" 
  end
  out += @contents
  out += "&lt;/plainLiteral&gt;" 
  return out
end
</code></pre>

	<p>If we look over at <code>TypedLiteral#to_trix</code> we see a much more straightforward implementation:</p>


<pre name="code" class="ruby"><code>
def to_trix
  "&lt;typedLiteral datatype=\"#{@encoding}\"&gt;#{@contents}&lt;/typedLiteral&gt;" 
end
</code></pre>

	<p>How do we eliminate that ugly conditional at the beginning of <code>Literal#to_trix</code>, and analogous conditionals in <code>Literal#to_n3</code> and <code>TypedLiteral#to_n3</code>?</p>


	<p>My first thought was that I wanted to be able to write something like:</p>


<pre name="code" class="ruby"><code>
def to_trix
  "&lt;plainLiteral#{@lang.to_trix}&gt;#{@contents}&lt;/plainLiteral&gt;" 
end
</code></pre>

	<p>But I didn&#8217;t want every string in the world suddenly acquiring a <code>to_trix</code> method. So, the solution was to intoduce a <code>Literal::Language</code> class and coerce our language into it, so <code>Literal#initialize</code> became:</p>


<pre name="code" class="ruby"><code>
def initialize(contents, lang = nil)
  @contents = contents
  @lang = Language.coerce(lang)
end  
</code></pre>

	<p>And Language would look something like:</p>


<pre name="code" class="ruby"><code>
def self.coerce(lang)
  if lang.is_a?(self)
    return lang
  end

  new(lang.to_s.downcase)
end

def initialize(lang)
  @value = lang
end

def to_trix
  if @value == ''
    ''
  else
    " xml:lang=\"#{@value}\"" 
  end
end    
</code></pre>

	<p>That ugly conditional&#8217;s still there though, so we introduced the Null Object pattern, and things started to look a good deal cleaner:</p>


<pre name="code" class="ruby"><code>
class Language
  class Null
    include Singleton

    def to_trix
      ''
    end
  end

  def self.coerce(lang)
    case lang
    when self
      return lang
    when nil, ''
      return Null.instance
    else
      return new(lang.to_s.downcase)
    end
  end

  ...

  def to_trix
    " xml:lang=\"#{@value}\"" 
  end
end
</code></pre>

	<p>At this point, we&#8217;re still just pushing code around. If anything, we&#8217;ve got more lines of code now than when we started, but we&#8217;re starting to move behaviour nearer to the data it relates to, and our objects are starting to look like objects rather than data structures. So, we press on and make a <code>TypedLiteral::Encoding</code> class and, at this point things start to look interesting. TypedLiteral is starting to look almost exactly the same as Literal, but with an Encoding rather than a language.</p>


	<p>That strange leading space in <code>Language#to_trix</code> is starting bug me. Let&#8217;s rewrite like so:</p>


<pre name="code" class="ruby"><code>
class Literal 
  class Language
    def format_as_trix(literal)
      "&lt;plainLiteral xml:lang=\"#{@value}\"&gt;#{literal}&lt;/plainLiteral&gt;" 
    end

    class Null
      def format_as_trix(literal)
        "&lt;plainLiteral&gt;#{literal}&lt;/plainLiteral&gt;" 
      end
    end
  end

  def to_trix
    @lang.format_as_trix(@contents)
  end
end
</code></pre>

	<p>If we make analogous change to <code>TypedLiteral</code> and <code>TypedLiteral::Encoding</code> it&#8217;s obvious that TypedLiteral and Literal were essentially the same class. Renaming <code>@lang</code> and <code>@encoding</code> to <code>@language_or_encoding</code> makes this blindingly obvious, so we&#8217;ll remove all of TypedLiteral&#8217;s methods except initialize. All that remains is to introduce <code>Literal.untyped</code> and <code>Literal.typed</code> factory methods to Literal, and make <code>Literal.new</code> into a private method and we can remove TypedLiteral in its entireity. So we change the specs to reflect the new <span class="caps">API</span> (wrong way round I know). Now we have a chunk of shorter, clearer code that will hopefully be easier to extend to cope with outputting literals in other formats.</p>


	<h3>Retrospective</h3>


	<p>I realise that patterns aren&#8217;t the goal of development, but by the end of the process we have a Strategy (Language/Encoding), a couple of Factory Methods (<code>Literal.typed</code>, <code>Literal.untyped</code>) and a couple of factoryish methods (<code>Language.coerce</code>, <code>Encoding.coerce</code>).</p>


	<p>The most important aspect of the change was the introduction of the two new value object classes. Once they were introduced, they became the obvious places in which to put the varying behaviour and eliminate the repeatition of conditional code from the <code>to_*</code> methods. If there were to be a third output style, I would look at introducing classes like <code>N3Stream</code>, <code>TrixStream</code> and <code>WhateverStream</code> and have a scheme like:</p>


<pre name="code" class="ruby"><code>
def to_n3
  print_on( N3Stream.new )
end

def print_on(stream)
  language_or_encoding.print_on(stream, value)
end
</code></pre>

	<p>but that&#8217;s almost certainly over complicating things right now.</p>


	<p>The other thing I like about this kind of refactoring is that it drives the code towards methods and classes which obey the single responsibility principle and, at the end of the process, not only do we have fewer lines of code in total, but the individual methods involved are <em>all</em> substantially shorter and closer to the left hand margin.</p>


	<p>I really should start doing this kind of thing more in my Rails practice &#8211; I keep being put off by the fact that the <code>composed_of</code> helper is so annoyingly not quite right and, rather than submitting a patch or making a plugin I go &#8220;Ah well&#8230; I can live with a string for a bit longer&#8230;&#8221; and I <em>know</em>. From hard won experience at that, that it&#8217;s going to come and bite me. It&#8217;s already bitten Rails recently when Ruby got a new <code>String#to_chars</code> which doesn&#8217;t work like the ActiveSupport version.</p>


	<h3>Notes</h3>


	<p>If you want to see the gory details of how the change got made, Tom has merged this weekends changes into the github repository. It didn&#8217;t happen in quite the order I&#8217;ve described it in this post, but neither is this post a complete fabrication.</p>


	<h3>Changes</h3>


	<p>Corrected a stupid typo in the first block of code. Ugly condition is actually <code>if @lang != nil &#38;&#38; @lang != ''</code></p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3294</id>
    <published>2008-07-03T06:00:55-05:00</published>
    <updated>2008-07-03T06:01:29-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/07/03/work-with-us"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Work with us</title>
    <category term="jobs" scheme="http://www.bofh.org.uk/articles/tag/jobs"/>
    <category term="amazingtunes" scheme="http://www.bofh.org.uk/articles/tag/amazingtunes"/>
    <category term="ruby" scheme="http://www.bofh.org.uk/articles/tag/ruby"/>
    <category term="javascript" scheme="http://www.bofh.org.uk/articles/tag/javascript"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If the last post about our Javascript issues didn&#8217;t put you off, then you might be interested to know that we&#8217;re <a href="http://www.amazingtunes.com/jobs">hiring</a>. If you&#8217;re an experienced, test infected Ruby on Rails programmer with some Javascript and a real world consumer website or two under your belt, and you&#8217;re happy to work in Newcastle upon Tyne, then we definitely want to hear from you. I&#8217;d probably be interested in at least hearing from you if you&#8217;re an experienced dynamic language programmer who has only recently made (or is considering making) the switch to Ruby and Rails. It&#8217;s only syntax after all.</p>


	<p>The money&#8217;s decent, the work is interesting, the people (well, apart from me, obviously) are great, and Newcastle&#8217;s a fantastic city. Drop me a line, ping me on <span class="caps">AIM</span>/gTalk/Twitter or just send your CV to the <a href="mailto:jobs@amazing-media.com">jobs@amazing-media.com</a>.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If the last post about our Javascript issues didn&#8217;t put you off, then you might be interested to know that we&#8217;re <a href="http://www.amazingtunes.com/jobs">hiring</a>. If you&#8217;re an experienced, test infected Ruby on Rails programmer with some Javascript and a real world consumer website or two under your belt, and you&#8217;re happy to work in Newcastle upon Tyne, then we definitely want to hear from you. I&#8217;d probably be interested in at least hearing from you if you&#8217;re an experienced dynamic language programmer who has only recently made (or is considering making) the switch to Ruby and Rails. It&#8217;s only syntax after all.</p>


	<p>The money&#8217;s decent, the work is interesting, the people (well, apart from me, obviously) are great, and Newcastle&#8217;s a fantastic city. Drop me a line, ping me on <span class="caps">AIM</span>/gTalk/Twitter or just send your CV to the <a href="mailto:jobs@amazing-media.com">jobs@amazing-media.com</a>.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3293</id>
    <published>2008-07-03T04:56:22-05:00</published>
    <updated>2008-07-03T04:56:22-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/07/03/usability-testing-throws-rocks"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Usability testing (throws) rocks</title>
    <category term="amazingtunes" scheme="http://www.bofh.org.uk/articles/tag/amazingtunes"/>
    <category term="practiceofprogramming" scheme="http://www.bofh.org.uk/articles/tag/practiceofprogramming"/>
    <category term="usabilitytesting" scheme="http://www.bofh.org.uk/articles/tag/usabilitytesting"/>
    <category term="javascript" scheme="http://www.bofh.org.uk/articles/tag/javascript"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Usability testing is wonderful. But wow, its humiliating.</p>


	<p>I&#8217;ve spent the last few weeks working on the <a href="http://www.amazingtunes.com">Amazingtunes</a> in page player. Amazingtunes is a music site, so we need to play music. However, we don&#8217;t like the way that most music sites work; either the music stops as you go from one page to another, or the player is a huge Flash app running in its own window. There has to be a better way. There needs to be a popup window if you want to eliminate stop/start behaviour, but there&#8217;s surely no reason not to keep the controls on the main page.</p>


	<p>So, we set about writing somthing that did just that. We settled on using Jeroen Wijering&#8217;s excellent <a href="http://www.jeroenwijering.com/?item=JW_FLV_Player">flvPlayer</a>, which handles the media formats we need and has good Javascript control and communications. This sits in the child window and we use Javascript cross-window communication to have a player controller in the main window that looks something like:</p>


<div class="thumbnail"><a href="http://skitch.com/pdcawley/xy5m/piers-cawley-on-amazingtunes.com"><img src="http://img.skitch.com/20080703-58ianuwrptmeysscfkse3bm9i.preview.jpg" alt="Piers Cawley on amazingtunes.com" /></a><br /><span style="font-family: Lucida Grande, Trebuchet, sans-serif, Helvetica, Arial; font-size: 10px; color: #808080">Uploaded with <a href="http://plasq.com/">plasq</a>&#8217;s <a href="http://skitch.com">Skitch</a>!</span></div>

	<p>This is all done in <span class="caps">HTML</span> and and Javascript, the progress bar does the Safari trick of running behind the tune data links, the buttons do their <span class="caps">AJAX</span> magic and the whole thing is rather slick, though I say so myself.</p>


	<p>At least, we thought it was slick until we pointed the <a href="http://www.usertesting.com/">usertesting.com</a> legions at it. Without exception, they ignore the in page player, foreground the popup and use the teeny weeny controls on the flash player. Originally, the popup window didn&#8217;t even display any transport controls, it just had a picture of some speakers and some text asking the user not to close it because it was playing the tunes. We added transport controls as a stopgap while we made the in page player work properly.</p>


	<p>I sound like I&#8217;m whinging don&#8217;t I? It&#8217;s certainly a blow to the ego to see something we spent so much time and attention on being ignored by our sample users. On at least one occasion, while watching the screencasts I found myself boggling at the things the users did, and if I didn&#8217;t shout &#8220;Just play some bloody music!&#8221; at the screen, then I came worryingly close.</p>


	<p>It would be easy to retreat into a state of denial: &#8220;They&#8217;re not our target users! They&#8217;re stupid! They&#8217;re American! If they would only magically intuit the way we think they should use the site!&#8221;. And maybe it would be comforting to do so, for a while. The right thing to do is to suck it up &#8211; take away from those videos the sure and certain knowledge that bits of the site don&#8217;t work and do something about it.</p>


	<p>We may dislike the &#8216;popup window for transport controls&#8217; model of controlling music playback, but users are cool with it. And it&#8217;s not as if the work we did on making the in page player work is going to be wasted &#8211; widget is straightforwardly event driven so it&#8217;ll work just as well in the popup window, and the communication protocol will be much simpler. Having the player in its own window means we&#8217;ll be able to extend its interface in ways that would be hard when the player had to share window space with the rest of the page. In the end, it&#8217;s all good.</p>


	<p>But&#8230; damn that in page player was sweet. I learned Javascript as I wrote it (mostly by pretending it was Perl with odd syntas) and I&#8217;m bloody proud of it. I&#8217;ll happily replace it with the next iteration (which I&#8217;m already working on), but it&#8217;ll be with a pang of remorse all the same.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Usability testing is wonderful. But wow, its humiliating.</p>


	<p>I&#8217;ve spent the last few weeks working on the <a href="http://www.amazingtunes.com">Amazingtunes</a> in page player. Amazingtunes is a music site, so we need to play music. However, we don&#8217;t like the way that most music sites work; either the music stops as you go from one page to another, or the player is a huge Flash app running in its own window. There has to be a better way. There needs to be a popup window if you want to eliminate stop/start behaviour, but there&#8217;s surely no reason not to keep the controls on the main page.</p>


	<p>So, we set about writing somthing that did just that. We settled on using Jeroen Wijering&#8217;s excellent <a href="http://www.jeroenwijering.com/?item=JW_FLV_Player">flvPlayer</a>, which handles the media formats we need and has good Javascript control and communications. This sits in the child window and we use Javascript cross-window communication to have a player controller in the main window that looks something like:</p>


<div class="thumbnail"><a href="http://skitch.com/pdcawley/xy5m/piers-cawley-on-amazingtunes.com"><img src="http://img.skitch.com/20080703-58ianuwrptmeysscfkse3bm9i.preview.jpg" alt="Piers Cawley on amazingtunes.com" /></a><br /><span style="font-family: Lucida Grande, Trebuchet, sans-serif, Helvetica, Arial; font-size: 10px; color: #808080">Uploaded with <a href="http://plasq.com/">plasq</a>&#8217;s <a href="http://skitch.com">Skitch</a>!</span></div>

	<p>This is all done in <span class="caps">HTML</span> and and Javascript, the progress bar does the Safari trick of running behind the tune data links, the buttons do their <span class="caps">AJAX</span> magic and the whole thing is rather slick, though I say so myself.</p>


	<p>At least, we thought it was slick until we pointed the <a href="http://www.usertesting.com/">usertesting.com</a> legions at it. Without exception, they ignore the in page player, foreground the popup and use the teeny weeny controls on the flash player. Originally, the popup window didn&#8217;t even display any transport controls, it just had a picture of some speakers and some text asking the user not to close it because it was playing the tunes. We added transport controls as a stopgap while we made the in page player work properly.</p>


	<p>I sound like I&#8217;m whinging don&#8217;t I? It&#8217;s certainly a blow to the ego to see something we spent so much time and attention on being ignored by our sample users. On at least one occasion, while watching the screencasts I found myself boggling at the things the users did, and if I didn&#8217;t shout &#8220;Just play some bloody music!&#8221; at the screen, then I came worryingly close.</p>


	<p>It would be easy to retreat into a state of denial: &#8220;They&#8217;re not our target users! They&#8217;re stupid! They&#8217;re American! If they would only magically intuit the way we think they should use the site!&#8221;. And maybe it would be comforting to do so, for a while. The right thing to do is to suck it up &#8211; take away from those videos the sure and certain knowledge that bits of the site don&#8217;t work and do something about it.</p>


	<p>We may dislike the &#8216;popup window for transport controls&#8217; model of controlling music playback, but users are cool with it. And it&#8217;s not as if the work we did on making the in page player work is going to be wasted &#8211; widget is straightforwardly event driven so it&#8217;ll work just as well in the popup window, and the communication protocol will be much simpler. Having the player in its own window means we&#8217;ll be able to extend its interface in ways that would be hard when the player had to share window space with the rest of the page. In the end, it&#8217;s all good.</p>


	<p>But&#8230; damn that in page player was sweet. I learned Javascript as I wrote it (mostly by pretending it was Perl with odd syntas) and I&#8217;m bloody proud of it. I&#8217;ll happily replace it with the next iteration (which I&#8217;m already working on), but it&#8217;ll be with a pang of remorse all the same.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3292</id>
    <published>2008-06-29T04:53:43-05:00</published>
    <updated>2008-07-02T01:41:32-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/06/29/announcing-announcements-for-ruby"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Announcing Announcements for Ruby</title>
    <category term="announcementsproject" scheme="http://www.bofh.org.uk/articles/tag/announcementsproject"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I&#8217;ve just pushed a just about usable (but horribly untested) port of Vassili Bykov&#8217;s very lovely Smalltalk <a href="http://www.cincomsmalltalk.com/userblogs/vbykov/blogView?showComments=true&#38;entry=3310034894">Announcements framework</a> onto github. It&#8217;s a very raw port at the moment (the interface isn&#8217;t what you&#8217;d call idiomatic ruby yet), but I shall be working on that soon. Documentation (beyond a synopsis in the readme file) is nonexistent, but I reckon that there&#8217;s the core of something useful there (I&#8217;ve got plans for using it in Typo as the basis of a Wordpressesque plugin architecture and I need it for my Sooper Sekrit Project too&#8230;).</p>


	<p>Expect some more details on the whats and whys in this blog soon, but if you want to have a play, you&#8217;ll find it at <a href="http://github.com/pdcawley/announcements">http://github.com/pdcawley/announcements</a>. Enjoy.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I&#8217;ve just pushed a just about usable (but horribly untested) port of Vassili Bykov&#8217;s very lovely Smalltalk <a href="http://www.cincomsmalltalk.com/userblogs/vbykov/blogView?showComments=true&#38;entry=3310034894">Announcements framework</a> onto github. It&#8217;s a very raw port at the moment (the interface isn&#8217;t what you&#8217;d call idiomatic ruby yet), but I shall be working on that soon. Documentation (beyond a synopsis in the readme file) is nonexistent, but I reckon that there&#8217;s the core of something useful there (I&#8217;ve got plans for using it in Typo as the basis of a Wordpressesque plugin architecture and I need it for my Sooper Sekrit Project too&#8230;).</p>


	<p>Expect some more details on the whats and whys in this blog soon, but if you want to have a play, you&#8217;ll find it at <a href="http://github.com/pdcawley/announcements">http://github.com/pdcawley/announcements</a>. Enjoy.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3291</id>
    <published>2008-05-15T02:08:05-05:00</published>
    <updated>2008-05-15T02:08:05-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/05/15/git-is-the-monads"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">git is the monads</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>When, in the course of learning about Haskell, I reached the point where I thought I understood what Monads were for, I <a href="http://www.bofh.org.uk/articles/2007/08/07/monads">wrote about it</a>. In the comments, <a href="http://dynamic.ropine.com/yesh/">Seth Gordon</a> observed that:</p>


	<blockquote>
		<p>There are two kinds of people who try to learn Haskell: the people who give up because they can’t figure out monads, and the people who go on to write tutorials on how to understand monads.</p>
	</blockquote>


	<p>I remembered this today as yet another <a href="http://git.or.cz/">git</a> tutorial rolled by in my newsreader. Maybe git is the monads of version control.</p>


	<p>What other &#8216;monads&#8217; are there out there? RESTful routing in Rails seems an obvious candidate, but I&#8217;m sure there&#8217;s more.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>When, in the course of learning about Haskell, I reached the point where I thought I understood what Monads were for, I <a href="http://www.bofh.org.uk/articles/2007/08/07/monads">wrote about it</a>. In the comments, <a href="http://dynamic.ropine.com/yesh/">Seth Gordon</a> observed that:</p>


	<blockquote>
		<p>There are two kinds of people who try to learn Haskell: the people who give up because they can’t figure out monads, and the people who go on to write tutorials on how to understand monads.</p>
	</blockquote>


	<p>I remembered this today as yet another <a href="http://git.or.cz/">git</a> tutorial rolled by in my newsreader. Maybe git is the monads of version control.</p>


	<p>What other &#8216;monads&#8217; are there out there? RESTful routing in Rails seems an obvious candidate, but I&#8217;m sure there&#8217;s more.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3290</id>
    <published>2008-05-07T10:19:08-05:00</published>
    <updated>2008-05-07T10:19:08-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/05/07/rails-tip-dealing-with-out-of-sync-migrations"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Rails tip: Dealing with out of sync migrations</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Sometimes, for one embarrassing reason or another (usually involving chaotic branch merges&#8230;) a database migration can get leapfrogged. When this happens, it&#8217;s tempting to renumber the leapfrogged migration, but that breaks any servers where the migration <em>didn&#8217;t</em> get renumbered. Here&#8217;s how I dealt with it recently:</p>


<div class="typocode"><pre><code class="typocode_default ">class MaybeOldMigration &lt; ActiveRecord::Migration
  def self.up
    unless old_migration_applied?
      OldMigration.up
    end
  end

  def old_migration_applied?
    # Checks that the schema looks as it should
    # if the old migration got applied
  end
end</code></pre></div>

	<p>Yeah, it&#8217;s a hack, but it&#8217;s a fairly robust hack.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Sometimes, for one embarrassing reason or another (usually involving chaotic branch merges&#8230;) a database migration can get leapfrogged. When this happens, it&#8217;s tempting to renumber the leapfrogged migration, but that breaks any servers where the migration <em>didn&#8217;t</em> get renumbered. Here&#8217;s how I dealt with it recently:</p>


<div class="typocode"><pre><code class="typocode_default ">class MaybeOldMigration &lt; ActiveRecord::Migration
  def self.up
    unless old_migration_applied?
      OldMigration.up
    end
  end

  def old_migration_applied?
    # Checks that the schema looks as it should
    # if the old migration got applied
  end
end</code></pre></div>

	<p>Yeah, it&#8217;s a hack, but it&#8217;s a fairly robust hack.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3289</id>
    <published>2008-04-16T04:15:45-05:00</published>
    <updated>2008-04-29T01:21:52-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/04/16/a-quick-javascript-formatting-tip"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">A quick Javascript formatting tip</title>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="javascript" scheme="http://www.bofh.org.uk/articles/tag/javascript"/>
    <category term="formatting" scheme="http://www.bofh.org.uk/articles/tag/formatting"/>
    <category term="tips" scheme="http://www.bofh.org.uk/articles/tag/tips"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>IE&#8217;s a pain. The particular pain I want to write about is its pickiness about Javascript object literals. Consider the following Javascript object:</p>


<div class="typocode"><pre><code class="typocode_default ">{ success: function () {...},
  failure: function () {...},
}</code></pre></div>

	<p>If you&#8217;re used to programming in Perl or Ruby, that trailing comma&#8217;s perfectly fine, in fact leaving it there is sometimes considered good practice because it makes it easy to extend the hash, just add a new row and leave another trailing comma.</p>


	<p>The trouble is, it&#8217;s not strictly legal to do that in Javascript. Pretty much every implementation out there will allow it though.</p>


	<p>Except IE.</p>


	<p>So, I&#8217;ve taken a leaf out of Damian Conways <cite>Perl Best Practices</cite> and writing my object literals as:</p>


<div class="typocode"><pre><code class="typocode_default ">{ success: function () {...}
, failure: function () {...} 
}</code></pre></div>

	<p>By sticking the comma at the beginning of the line, I&#8217;m never going to make an object that breaks IE, and adding a new line to the hash is straightforward too. Just stick the cursor in front of the <code>}</code>, type my leading comma, space, attribute name, and hit return when I&#8217;m finished.</p>


	<p>I&#8217;ve also started using the same practice pretty much everywhere else that I&#8217;ve got a comma separated list of things:</p>


<div class="typocode"><pre><code class="typocode_default ">var foo
  , bar
  , baz
  ;
$.each( anArray
      , function () { ... }
      );</code></pre></div>

	<p>It looks weird at first, but trust me, it grows on you.</p>


	<h3>Update</h3>


	<p>In the comments, I make reference to tweaking Steve Yegge&#8217;s excellent <a href="http://code.google.com/p/js2-mode/">js2-mode</a> to handle leading comma style a little more gracefully. Since then, I&#8217;ve made it work and attached a diff to <a href="http://code.google.com/p/js2-mode/issues/detail?id=64">this issue</a> on the project&#8217;s issue tracker.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>IE&#8217;s a pain. The particular pain I want to write about is its pickiness about Javascript object literals. Consider the following Javascript object:</p>


<div class="typocode"><pre><code class="typocode_default ">{ success: function () {...},
  failure: function () {...},
}</code></pre></div>

	<p>If you&#8217;re used to programming in Perl or Ruby, that trailing comma&#8217;s perfectly fine, in fact leaving it there is sometimes considered good practice because it makes it easy to extend the hash, just add a new row and leave another trailing comma.</p>


	<p>The trouble is, it&#8217;s not strictly legal to do that in Javascript. Pretty much every implementation out there will allow it though.</p>


	<p>Except IE.</p>


	<p>So, I&#8217;ve taken a leaf out of Damian Conways <cite>Perl Best Practices</cite> and writing my object literals as:</p>


<div class="typocode"><pre><code class="typocode_default ">{ success: function () {...}
, failure: function () {...} 
}</code></pre></div>

	<p>By sticking the comma at the beginning of the line, I&#8217;m never going to make an object that breaks IE, and adding a new line to the hash is straightforward too. Just stick the cursor in front of the <code>}</code>, type my leading comma, space, attribute name, and hit return when I&#8217;m finished.</p>


	<p>I&#8217;ve also started using the same practice pretty much everywhere else that I&#8217;ve got a comma separated list of things:</p>


<div class="typocode"><pre><code class="typocode_default ">var foo
  , bar
  , baz
  ;
$.each( anArray
      , function () { ... }
      );</code></pre></div>

	<p>It looks weird at first, but trust me, it grows on you.</p>


	<h3>Update</h3>


	<p>In the comments, I make reference to tweaking Steve Yegge&#8217;s excellent <a href="http://code.google.com/p/js2-mode/">js2-mode</a> to handle leading comma style a little more gracefully. Since then, I&#8217;ve made it work and attached a diff to <a href="http://code.google.com/p/js2-mode/issues/detail?id=64">this issue</a> on the project&#8217;s issue tracker.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3288</id>
    <published>2008-04-15T01:57:45-05:00</published>
    <updated>2008-04-15T01:57:45-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/04/15/ads-are-gone"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Ads are gone</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Back when I was writing the occasional &#8220;How do you find me?&#8221; article, I would get some weird ads showing up. On one occasion, I commented that the searcher had obviously just typed a homework question into google and expected an answer. All the ads on that page ended up being for sites that would write your essays for you.</p>


	<p>&#8220;Hmm&#8230;&#8221; I thought, &#8220;That&#8217;s not good.&#8221;, and set about adding those advertisers to the block list.</p>


	<p>Then, in another article, I ranted about those, ah, bastions of democracy (thank you, Tom Lehrer) who indulge in comment spamming and found myself advertising them.</p>


	<p><a href="http://www.bofh.org.uk/articles/2006/10/16/rolling-back-the-enlightenment">Rolling back the enlightenment</a> which discussed, amongst other things, my Uncles&#8217; marriage after 36 years together (yay!) attracted some pretty dodgy ads too.</p>


	<p>To my shame, none of these made me rethink the advertising, I just extended the filter and shook my head at the unpleasantness of it all.</p>


	<p>The straw that broke the camel&#8217;s back was the advertising around <a href="http://www.bofh.org.uk/articles/2008/04/12/fat-is-an-economic-issue">Fat is an economic issue</a> ran utterly counter to the spirit of the of the article, and they were like &#8220;whack a mole&#8221;. Every time I extended the filter, another ad for another bloody health insurance leech or some other snake oil peddler popped up.</p>


	<p>So, screw that, the Google ads are gone &#8211; it&#8217;s not as if they were making me a huge amount anyway. I&#8217;ll continue with the left margin Amazon links though &#8211; nobody ever buys anything I recommend, but I like the pictures.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Back when I was writing the occasional &#8220;How do you find me?&#8221; article, I would get some weird ads showing up. On one occasion, I commented that the searcher had obviously just typed a homework question into google and expected an answer. All the ads on that page ended up being for sites that would write your essays for you.</p>


	<p>&#8220;Hmm&#8230;&#8221; I thought, &#8220;That&#8217;s not good.&#8221;, and set about adding those advertisers to the block list.</p>


	<p>Then, in another article, I ranted about those, ah, bastions of democracy (thank you, Tom Lehrer) who indulge in comment spamming and found myself advertising them.</p>


	<p><a href="http://www.bofh.org.uk/articles/2006/10/16/rolling-back-the-enlightenment">Rolling back the enlightenment</a> which discussed, amongst other things, my Uncles&#8217; marriage after 36 years together (yay!) attracted some pretty dodgy ads too.</p>


	<p>To my shame, none of these made me rethink the advertising, I just extended the filter and shook my head at the unpleasantness of it all.</p>


	<p>The straw that broke the camel&#8217;s back was the advertising around <a href="http://www.bofh.org.uk/articles/2008/04/12/fat-is-an-economic-issue">Fat is an economic issue</a> ran utterly counter to the spirit of the of the article, and they were like &#8220;whack a mole&#8221;. Every time I extended the filter, another ad for another bloody health insurance leech or some other snake oil peddler popped up.</p>


	<p>So, screw that, the Google ads are gone &#8211; it&#8217;s not as if they were making me a huge amount anyway. I&#8217;ll continue with the left margin Amazon links though &#8211; nobody ever buys anything I recommend, but I like the pictures.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3286</id>
    <published>2008-04-12T02:47:40-05:00</published>
    <updated>2008-04-12T05:11:38-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/04/12/fat-is-an-economic-issue"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Fat is an economic issue</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="obesity" scheme="http://www.bofh.org.uk/articles/tag/obesity"/>
    <category term="economics" scheme="http://www.bofh.org.uk/articles/tag/economics"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Terry Pratchett once observed that a character of his was anorexic because every time they looked in a mirror, they saw a fat person. By that measure, I&#8217;m anorexic, though I tend to avoid mirrors. By more objective measures, I&#8217;m morbidly obese &#8211; 6&#8217; tall, 346 pounds; the Body Mass Index calculation is never going to give a good number.</p>


	<p>To listen to some sections of the press, I might as well be public enemy number one. A drain on the public purse, a morally bankrupt insult to the eye of the right thinking, <cite>Daily Mail</cite> reading healthy public. Apparently, I have the self control of an incontinent puppy and spend my time sat on my arse in front of the TV or looking at child porn on the internet, constantly stuffing my face with lard and chocolate.</p>


	<p>Mmm&#8230; lard and chocolate&#8230;</p>


	<p>Now, everyone&#8217;s entitled to their opinions of the morality of others. Catch me on another day, and I can rant for ages about the ugliness of the way diet and beauty industries stoke insecurities to sell product. Today I want to talk about the cost issue.</p>


	<p>Fat people aren&#8217;t cheap to keep &#8211; we tend to die younger, and in the process of our dying we cost a lot of money. But dying can be an expensive business and however we go, we all do sooner or later. Fat people&#8217;s healthcare costs may well be higher than those of healthy people of the same age, but those healthy people could end up waiting &#8216;til they are 80 before dying of something horribly expensive like cancer, or Alzheimer&#8217;s.</p>


	<p>When you add up the net lifetime healthcare costs of the average healthy person, and those of the average obese person, the healthy person costs more.</p>


	<p>This is analogous to the &#8220;Long Tail&#8221; idea &#8211; the idea that the long tail of low sales of &#8216;specialist&#8217; books/records/services adds up to being of greater value than the total sales of the top 100 or whatever. Obvious when you think about it, but running counter to traditional thinking in this area.</p>


	<p>We&#8217;re really good at spotting the big things, but rather less good at spotting the slow accretion of small things. Each drop of water that falls from a stalactite to a stalagmite doesn&#8217;t appear to contribute anything. Nevertheless, the stalactite and stalagmite got there somehow.</p>


	<p>I find this knowledge rather heartening. Okay, so as a fat git with diabetes, I&#8217;m likely to die young, but that&#8217;s <em>my</em> business. The pernicious idea that the broader population of tax payers is somehow suffering because of me and that because of that I should be denied access to health care isn&#8217;t just morally repugnant, it&#8217;s economically illiterate.</p>


	<h3>References</h3>


	<p><a href="http://medicine.plosjournals.org/perlserv/?request=get-document&#38;doi=10.1371%2Fjournal.pmed.0050029">Lifetime Medical Costs of Obesity: Prevention No Cure for Increasing Health Expenditure</a> from PLoS medicine. The paper describes a mathematical model rather than something which does the arithmetic on a real population, so it&#8217;s only as good as the assumptions, but it does seem compelling that the driver for high total healthcare costs over a lifetime is the length of that life. But, as I fat git, I might be expected to say that. Ho hum.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Terry Pratchett once observed that a character of his was anorexic because every time they looked in a mirror, they saw a fat person. By that measure, I&#8217;m anorexic, though I tend to avoid mirrors. By more objective measures, I&#8217;m morbidly obese &#8211; 6&#8217; tall, 346 pounds; the Body Mass Index calculation is never going to give a good number.</p>


	<p>To listen to some sections of the press, I might as well be public enemy number one. A drain on the public purse, a morally bankrupt insult to the eye of the right thinking, <cite>Daily Mail</cite> reading healthy public. Apparently, I have the self control of an incontinent puppy and spend my time sat on my arse in front of the TV or looking at child porn on the internet, constantly stuffing my face with lard and chocolate.</p>


	<p>Mmm&#8230; lard and chocolate&#8230;</p>


	<p>Now, everyone&#8217;s entitled to their opinions of the morality of others. Catch me on another day, and I can rant for ages about the ugliness of the way diet and beauty industries stoke insecurities to sell product. Today I want to talk about the cost issue.</p>


	<p>Fat people aren&#8217;t cheap to keep &#8211; we tend to die younger, and in the process of our dying we cost a lot of money. But dying can be an expensive business and however we go, we all do sooner or later. Fat people&#8217;s healthcare costs may well be higher than those of healthy people of the same age, but those healthy people could end up waiting &#8216;til they are 80 before dying of something horribly expensive like cancer, or Alzheimer&#8217;s.</p>


	<p>When you add up the net lifetime healthcare costs of the average healthy person, and those of the average obese person, the healthy person costs more.</p>


	<p>This is analogous to the &#8220;Long Tail&#8221; idea &#8211; the idea that the long tail of low sales of &#8216;specialist&#8217; books/records/services adds up to being of greater value than the total sales of the top 100 or whatever. Obvious when you think about it, but running counter to traditional thinking in this area.</p>


	<p>We&#8217;re really good at spotting the big things, but rather less good at spotting the slow accretion of small things. Each drop of water that falls from a stalactite to a stalagmite doesn&#8217;t appear to contribute anything. Nevertheless, the stalactite and stalagmite got there somehow.</p>


	<p>I find this knowledge rather heartening. Okay, so as a fat git with diabetes, I&#8217;m likely to die young, but that&#8217;s <em>my</em> business. The pernicious idea that the broader population of tax payers is somehow suffering because of me and that because of that I should be denied access to health care isn&#8217;t just morally repugnant, it&#8217;s economically illiterate.</p>


	<h3>References</h3>


	<p><a href="http://medicine.plosjournals.org/perlserv/?request=get-document&#38;doi=10.1371%2Fjournal.pmed.0050029">Lifetime Medical Costs of Obesity: Prevention No Cure for Increasing Health Expenditure</a> from PLoS medicine. The paper describes a mathematical model rather than something which does the arithmetic on a real population, so it&#8217;s only as good as the assumptions, but it does seem compelling that the driver for high total healthcare costs over a lifetime is the length of that life. But, as I fat git, I might be expected to say that. Ho hum.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3285</id>
    <published>2008-04-07T06:09:17-05:00</published>
    <updated>2008-04-07T06:09:17-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/04/07/reinventing-the-wheel-for-fun-and-profit"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Reinventing the wheel for fun and profit</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>When they tell you to stop because you&#8217;re reinventing the wheel, ignore them and carry on building a better mousetrap.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>When they tell you to stop because you&#8217;re reinventing the wheel, ignore them and carry on building a better mousetrap.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3284</id>
    <published>2008-04-07T01:40:41-05:00</published>
    <updated>2008-04-07T01:42:01-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/04/07/code-is-data-and-it-always-has-been"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Code is data, and it always has been</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="scotlandonrails" scheme="http://www.bofh.org.uk/articles/tag/scotlandonrails"/>
    <category term="turing" scheme="http://www.bofh.org.uk/articles/tag/turing"/>
    <category term="compsci" scheme="http://www.bofh.org.uk/articles/tag/compsci"/>
    <category term="codeisdata" scheme="http://www.bofh.org.uk/articles/tag/codeisdata"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I&#8217;m just back from the first <a href="http://www.scotlandonrails.com">Scotland on Rails</a> conference, and a jolly fine conference it was too. Much kudos is due to <a href="http://www.alancfrancis.com">Alan</a>, <a href="http://woss.name">Graeme</a>, Abdel and <a href="http://merecomplexities.com/">Paul</a>. It was hard to believe that this was the first conference these guys have run and I think all my fellow delegates hope it won&#8217;t be the last. As I said in the Pub on Saturday night, I&#8217;d had a talk proposal knocked back and, in that situation, it&#8217;s terribly easy to find yourself sitting in a session thinking &#8220;Bloody hell, my talk would have been better than this!&#8221;, but not at this conference.</p>


	<p>A phrase that cropped up a couple of times was the old saw that &#8220;Data == Code&#8221; &#8211; it&#8217;s very hard to avoid the idea once you start talking about code generation or Domain Specific Pidgins, parsing&#8230; I first came across the idea in <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0262510871/justasummary-21">The Structure And Interpretation of Computer Programs</a>  where it&#8217;s elegantly phrased as &#8220;Data is just dumb code, and code is just smart data&#8221;. Traditionally, the idea seems to be attributed to <a href="http://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29">John McCarthy</a>, the inventor of Lisp. But it&#8217;s older than that. Way older than that. The idea is actually older than Computer Science. It lies at the core of <a href="http://en.wikipedia.org/wiki/Alan_Turing">Turing&#8217;s</a> original paper <a href="http://www.thocp.net/biographies/papers/turing_oncomputablenumbers_1936.pdf"><cite>On Computable Numbers, with an Application to the Entscheidungsproblem</cite></a> in which invents computer science on the way to proving that it&#8217;s impossible to decide algorithmically whether a given statement of arithmetic is true or false.</p>


	<p>In the course of the paper, Turing posits what has become known as the Halting Problem:</p>


	<blockquote>
		<p>Given a description of a program and a finite input, decide whether the program finishes running or will run forever, given that input.</p>
	</blockquote>


	<p>Turing&#8217;s proof runs something like this:</p>


	<p>Suppose we have a subroutine <code>halts?(code,data)</code> which solves the halting problem. Let&#8217;s use that to write something like:</p>


<div class="typocode"><pre><code class="typocode_default ">def counter_example(code)
  if halts? code, code
    for (;;)
    end
  else
    return
  end
end

counter_example(File.read(STDIN))</code></pre></div>

	<p>and ask the question &#8220;What happens when we run <code>counter_example.rb &lt; counter_example.rb</code>&#8221;? If <code>halts?</code> reckons that <code>counter_example</code> would halt, given itself as input, then counter example will enter an infinite loop, but if <code>halts?</code> reckon that it would enter an infinite loop, then it would halt. Which is a contradiction. Which means that there can be no subroutine <code>halts?</code>, which means that maths is hard enough to be interesting and occasionally undecidable.</p>


	<p>Look at how the proof works &#8211; it&#8217;s built around the idea that code can be treated as data. In fact, you could say that the Turing Machine looks like it does because Turing was working backwards from this core idea to describe a sufficiently powerful machine that could obviously treat it&#8217;s own description as data. Certainly when you compare the clarity of his proof that the halting problem is undecidable (given the idea of the universal Turing machine) with the contortions required to make mathematics swallow its own tail in similar fashion so that Gödel could prove his Incompleteness Theorem.</p>


	<p>So, if you want to know who the idea that code is data is due to, the answer (as is so often the case in our field) is Turing.</p>


	<h3>Postscript</h3>


	<p>Incidentally, Turing is also responsible for the first ever bug &#8211; his original implementation of a Universal Turing Machine has a couple, one of which is probably a dumb typo (which even I could spot when I read the paper). Another is more subtle, but still fixable. Somewhat delightfully, a young grad student, (<a href="http://en.wikipedia.org/wiki/Donald_Davies">Donald W Davies</a>, who invented packet switching) spotted these bugs and told Turing:</p>


	<blockquote>
		<p>I &#8230; found a number of quite bad programming errors, in effect, in the specification of the machine that he had written down, and I had worked out how to overcome these. I went along to tell him and I was rather cock-a-hoop &#8230; I thought he would say &#8216;Oh fine, I&#8217;ll send along an addendum. But in fact he was very annoyed, and pointed out furiously that really it didn&#8217;t matter, the thing was right in principle, and altogether I found him extremely touchy on this subject.</p>
	</blockquote>


	<p>Nearly fifty years later Davies wrote and published a debugged version of the code, which you can find in <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0198250797/justasummary-21">The Essential Turing</a>. One lesson to draw from the above is that getting annoyed at people pointing out trivial bugs in example code is also at least as old as computer science. Rather splendidly, there&#8217;s also a story of the chap who wrote the first ever assembler getting a serious telling off from Turing because the computer&#8217;s time was too valuable to waste it on converting symbols into machine code when humans were perfectly capable of doing it themselves. Who knows, maybe Turing&#8217;s contention was actually true back in the days of the Manchester Baby&#8230;</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I&#8217;m just back from the first <a href="http://www.scotlandonrails.com">Scotland on Rails</a> conference, and a jolly fine conference it was too. Much kudos is due to <a href="http://www.alancfrancis.com">Alan</a>, <a href="http://woss.name">Graeme</a>, Abdel and <a href="http://merecomplexities.com/">Paul</a>. It was hard to believe that this was the first conference these guys have run and I think all my fellow delegates hope it won&#8217;t be the last. As I said in the Pub on Saturday night, I&#8217;d had a talk proposal knocked back and, in that situation, it&#8217;s terribly easy to find yourself sitting in a session thinking &#8220;Bloody hell, my talk would have been better than this!&#8221;, but not at this conference.</p>


	<p>A phrase that cropped up a couple of times was the old saw that &#8220;Data == Code&#8221; &#8211; it&#8217;s very hard to avoid the idea once you start talking about code generation or Domain Specific Pidgins, parsing&#8230; I first came across the idea in <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0262510871/justasummary-21">The Structure And Interpretation of Computer Programs</a>  where it&#8217;s elegantly phrased as &#8220;Data is just dumb code, and code is just smart data&#8221;. Traditionally, the idea seems to be attributed to <a href="http://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29">John McCarthy</a>, the inventor of Lisp. But it&#8217;s older than that. Way older than that. The idea is actually older than Computer Science. It lies at the core of <a href="http://en.wikipedia.org/wiki/Alan_Turing">Turing&#8217;s</a> original paper <a href="http://www.thocp.net/biographies/papers/turing_oncomputablenumbers_1936.pdf"><cite>On Computable Numbers, with an Application to the Entscheidungsproblem</cite></a> in which invents computer science on the way to proving that it&#8217;s impossible to decide algorithmically whether a given statement of arithmetic is true or false.</p>


	<p>In the course of the paper, Turing posits what has become known as the Halting Problem:</p>


	<blockquote>
		<p>Given a description of a program and a finite input, decide whether the program finishes running or will run forever, given that input.</p>
	</blockquote>


	<p>Turing&#8217;s proof runs something like this:</p>


	<p>Suppose we have a subroutine <code>halts?(code,data)</code> which solves the halting problem. Let&#8217;s use that to write something like:</p>


<div class="typocode"><pre><code class="typocode_default ">def counter_example(code)
  if halts? code, code
    for (;;)
    end
  else
    return
  end
end

counter_example(File.read(STDIN))</code></pre></div>

	<p>and ask the question &#8220;What happens when we run <code>counter_example.rb &lt; counter_example.rb</code>&#8221;? If <code>halts?</code> reckons that <code>counter_example</code> would halt, given itself as input, then counter example will enter an infinite loop, but if <code>halts?</code> reckon that it would enter an infinite loop, then it would halt. Which is a contradiction. Which means that there can be no subroutine <code>halts?</code>, which means that maths is hard enough to be interesting and occasionally undecidable.</p>


	<p>Look at how the proof works &#8211; it&#8217;s built around the idea that code can be treated as data. In fact, you could say that the Turing Machine looks like it does because Turing was working backwards from this core idea to describe a sufficiently powerful machine that could obviously treat it&#8217;s own description as data. Certainly when you compare the clarity of his proof that the halting problem is undecidable (given the idea of the universal Turing machine) with the contortions required to make mathematics swallow its own tail in similar fashion so that Gödel could prove his Incompleteness Theorem.</p>


	<p>So, if you want to know who the idea that code is data is due to, the answer (as is so often the case in our field) is Turing.</p>


	<h3>Postscript</h3>


	<p>Incidentally, Turing is also responsible for the first ever bug &#8211; his original implementation of a Universal Turing Machine has a couple, one of which is probably a dumb typo (which even I could spot when I read the paper). Another is more subtle, but still fixable. Somewhat delightfully, a young grad student, (<a href="http://en.wikipedia.org/wiki/Donald_Davies">Donald W Davies</a>, who invented packet switching) spotted these bugs and told Turing:</p>


	<blockquote>
		<p>I &#8230; found a number of quite bad programming errors, in effect, in the specification of the machine that he had written down, and I had worked out how to overcome these. I went along to tell him and I was rather cock-a-hoop &#8230; I thought he would say &#8216;Oh fine, I&#8217;ll send along an addendum. But in fact he was very annoyed, and pointed out furiously that really it didn&#8217;t matter, the thing was right in principle, and altogether I found him extremely touchy on this subject.</p>
	</blockquote>


	<p>Nearly fifty years later Davies wrote and published a debugged version of the code, which you can find in <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0198250797/justasummary-21">The Essential Turing</a>. One lesson to draw from the above is that getting annoyed at people pointing out trivial bugs in example code is also at least as old as computer science. Rather splendidly, there&#8217;s also a story of the chap who wrote the first ever assembler getting a serious telling off from Turing because the computer&#8217;s time was too valuable to waste it on converting symbols into machine code when humans were perfectly capable of doing it themselves. Who knows, maybe Turing&#8217;s contention was actually true back in the days of the Manchester Baby&#8230;</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3283</id>
    <published>2008-03-24T06:49:15-05:00</published>
    <updated>2008-03-24T06:51:49-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/03/24/tragedy"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Tragedy</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="thewire" scheme="http://www.bofh.org.uk/articles/tag/thewire"/>
    <category term="review" scheme="http://www.bofh.org.uk/articles/tag/review"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>There&#8217;s always a moment, in a perfect tragedy, where you dare to hope that maybe the heroes are going to break the surface tension of the plot and escape. That perfect moment in <cite>Romeo and Juliet</cite> where, no matter how often you&#8217;ve seen it, you hope that <em>this</em> time, Juliet&#8217;s message will reach Romeo. Or, when watching <cite>Cruel Intentions</cite>, you find yourself hoping that the writers have managed to wangle a happy ending.</p>


	<p>It never happens of course, and we&#8217;d be disappointed if it did. We are taken to the critical point, when everything seems possible, when the characters are pushed to their utmost&#8230; and fail. Give me the life and death struggles of two teenagers for whom love is everything and life isn&#8217;t worth living without it over the pat solutions of the <cite>Dream</cite>, or give me &#8220;Fortinbras, knee deep in Danes&#8221; over the cross dressing, weddings and cruel taunts of <cite>Twelfth Night</cite>. (Not that I don&#8217;t enjoy the comedies).</p>


	<h3>What brought this one?</h3>


	<p>Why am I musing on tragedy instead of code?</p>


	<p>The explanation is simple: I just watched the last ever episode of <cite>The Wire</cite>.</p>


	<p>If you follow the show yourself, nothing more is needed. If you don&#8217;t, why not? Okay, so if you&#8217;re in the UK you&#8217;re reduced to paying the Murdoch tax, buying the DVDs or watching through Bittorrent (and only Bittorrent is up to date), but you should. All five seasons of <cite>The Wire</cite> add up to being the best thing I&#8217;ve ever seen on television. It&#8217;s impossible to describe how good it is without misrepresenting the whole. It&#8217;s the kind of campaigning documentary fiction which would make Dickens or Mrs Gaskell proud. It&#8217;s a sprawling epic with a huge cast of fascinating and flawed characters. It&#8217;s the story of how a cop destroys his career, a junky kicks his habit, a school system fails its pupils, politicians fail their constituents, a newspaper fails its readers and how a policy of prohibition fails a country.</p>


	<p>Prohibition and its consequences are shot through the fabric of <cite>The Wire</cite>. It&#8217;s easy to see how drugs destroy addicts. Easy (for liberal old me at least) to see how the money spent in the War on Drugs could be spent more effectively. What&#8217;s not so easy, and what <cite>The Wire</cite> does so well, is to show how &#8220;the game&#8221; destroys generation after generation of the best and brightest of the urban poor too. Why bother working to get to college, or getting a regular job when selling drugs is so easy and so profitable? If you&#8217;re going to jail for selling the stuff in the first place, why scruple to put a bullet in the head of a business rival, witness, or some mope who calls you a coward? How many &#8220;mute, inglorious Miltons&#8221; end up dead and decaying in a walled up vacant, or stuck behind the barbed wire of the state pen serving out their natural lives with no hope of parole?</p>


	<p>And what does putting them away achieve? For every small victory, we&#8217;re shown a corresponding fall. New characters slot into the rôles they have vacated and the cycle begins again. It&#8217;s a perfect tragedy &#8211; the game is still rigged and only the players change. The gods are unmoved by the struggles of poor mortals, the lawyers get richer, incompetence is rewarded and money is siphoned away from the streets into the pockets of rich white men who already have plenty.</p>


	<p>Welcome to Baltimore. Have a nice day.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>There&#8217;s always a moment, in a perfect tragedy, where you dare to hope that maybe the heroes are going to break the surface tension of the plot and escape. That perfect moment in <cite>Romeo and Juliet</cite> where, no matter how often you&#8217;ve seen it, you hope that <em>this</em> time, Juliet&#8217;s message will reach Romeo. Or, when watching <cite>Cruel Intentions</cite>, you find yourself hoping that the writers have managed to wangle a happy ending.</p>


	<p>It never happens of course, and we&#8217;d be disappointed if it did. We are taken to the critical point, when everything seems possible, when the characters are pushed to their utmost&#8230; and fail. Give me the life and death struggles of two teenagers for whom love is everything and life isn&#8217;t worth living without it over the pat solutions of the <cite>Dream</cite>, or give me &#8220;Fortinbras, knee deep in Danes&#8221; over the cross dressing, weddings and cruel taunts of <cite>Twelfth Night</cite>. (Not that I don&#8217;t enjoy the comedies).</p>


	<h3>What brought this one?</h3>


	<p>Why am I musing on tragedy instead of code?</p>


	<p>The explanation is simple: I just watched the last ever episode of <cite>The Wire</cite>.</p>


	<p>If you follow the show yourself, nothing more is needed. If you don&#8217;t, why not? Okay, so if you&#8217;re in the UK you&#8217;re reduced to paying the Murdoch tax, buying the DVDs or watching through Bittorrent (and only Bittorrent is up to date), but you should. All five seasons of <cite>The Wire</cite> add up to being the best thing I&#8217;ve ever seen on television. It&#8217;s impossible to describe how good it is without misrepresenting the whole. It&#8217;s the kind of campaigning documentary fiction which would make Dickens or Mrs Gaskell proud. It&#8217;s a sprawling epic with a huge cast of fascinating and flawed characters. It&#8217;s the story of how a cop destroys his career, a junky kicks his habit, a school system fails its pupils, politicians fail their constituents, a newspaper fails its readers and how a policy of prohibition fails a country.</p>


	<p>Prohibition and its consequences are shot through the fabric of <cite>The Wire</cite>. It&#8217;s easy to see how drugs destroy addicts. Easy (for liberal old me at least) to see how the money spent in the War on Drugs could be spent more effectively. What&#8217;s not so easy, and what <cite>The Wire</cite> does so well, is to show how &#8220;the game&#8221; destroys generation after generation of the best and brightest of the urban poor too. Why bother working to get to college, or getting a regular job when selling drugs is so easy and so profitable? If you&#8217;re going to jail for selling the stuff in the first place, why scruple to put a bullet in the head of a business rival, witness, or some mope who calls you a coward? How many &#8220;mute, inglorious Miltons&#8221; end up dead and decaying in a walled up vacant, or stuck behind the barbed wire of the state pen serving out their natural lives with no hope of parole?</p>


	<p>And what does putting them away achieve? For every small victory, we&#8217;re shown a corresponding fall. New characters slot into the rôles they have vacated and the cycle begins again. It&#8217;s a perfect tragedy &#8211; the game is still rigged and only the players change. The gods are unmoved by the struggles of poor mortals, the lawyers get richer, incompetence is rewarded and money is siphoned away from the streets into the pockets of rich white men who already have plenty.</p>


	<p>Welcome to Baltimore. Have a nice day.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3282</id>
    <published>2008-03-20T12:06:20-05:00</published>
    <updated>2008-03-20T12:06:20-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/03/20/javascript-scoping-makes-my-head-hurt"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Javascript scoping makes my head hurt</title>
    <category term="musings" label="Musings" scheme="http://www.bofh.org.uk/articles/category/musings"/>
    <category term="the-practice-of-programming" label="The Practice of Programming" scheme="http://www.bofh.org.uk/articles/category/the-practice-of-programming"/>
    <category term="javascript" scheme="http://www.bofh.org.uk/articles/tag/javascript"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Who came up with the javascript scoping rules? What were they smoking. Here&#8217;s some Noddy Perl that demonstrates what I&#8217;m on about:</p>


<div class="typocode"><pre><code class="typocode_default ">my @subs; 
for my $i (0..4) {
  push @subs, sub { $i }
}

print $subs[0]-&gt;(); # =&gt; 0;</code></pre></div>

	<p>Here&#8217;s the equivalent (or what I thought should be the equivalent) in Javscript:</p>


<div class="typocode"><pre><code class="typocode_default ">var subs = [];
for (var i in [0,1,2,3,4]) {
  subs[i] = function () {
    return i;
  }
}
alert subs[0]() // =&gt; 4</code></pre></div>

	<p>What&#8217;s going on? In Perl, <code>$i</code> is scoped to the <code>for</code> block. Essentially, each time through the loop, a new variable is created, so the generated closures all refer to different <code>$i</code>s. In Javascript, <code>i</code> is scoped to the <code>for</code> loop&#8217;s containing function. Each of the generated closures refer to the same <code>i</code>. Which means that, to get the same effect as the perl code, you must write:</p>


<div class="typocode"><pre><code class="typocode_default ">var subs = [];
for (var shared_i in [0,1,2,3,4]) {
  (function (i) {
    subs[i] = function () {
      return i;
    };
  })(shared_i);
}
subs[0]() // =&gt; 0</code></pre></div>

	<h3>Dodgy Ruby scoping</h3>


	<p>I had initially planned to write the example &#8220;How it should work&#8221; code in Ruby, but it turns out that Ruby&#8217;s <code>for</code> has the same problem:</p>


<div class="typocode"><pre><code class="typocode_default ">subs = [];
for i in 0..4
  subs &lt;&lt; lambda { i }
end
subs[0].call # =&gt; 4</code></pre></div>

	<p>Which is one reason why sensible Ruby programmers don&#8217;t use <code>for</code>. If I were writing the snippet in &#8216;real&#8217; Ruby, I&#8217;d write:</p>


<div class="typocode"><pre><code class="typocode_default ">subs = (0..4).collect { |i|
  lambda { i }
}
subs[0].call # =&gt; 0</code></pre></div>

	<h3>My conclusion</h3>


	<p>Javascript is weird. Okay, so you already know this. In so many ways it&#8217;s a lovely language, but it does have some annoyingly odd corners.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Who came up with the javascript scoping rules? What were they smoking. Here&#8217;s some Noddy Perl that demonstrates what I&#8217;m on about:</p>


<div class="typocode"><pre><code class="typocode_default ">my @subs; 
for my $i (0..4) {
  push @subs, sub { $i }
}

print $subs[0]-&gt;(); # =&gt; 0;</code></pre></div>

	<p>Here&#8217;s the equivalent (or what I thought should be the equivalent) in Javscript:</p>


<div class="typocode"><pre><code class="typocode_default ">var subs = [];
for (var i in [0,1,2,3,4]) {
  subs[i] = function () {
    return i;
  }
}
alert subs[0]() // =&gt; 4</code></pre></div>

	<p>What&#8217;s going on? In Perl, <code>$i</code> is scoped to the <code>for</code> block. Essentially, each time through the loop, a new variable is created, so the generated closures all refer to different <code>$i</code>s. In Javascript, <code>i</code> is scoped to the <code>for</code> loop&#8217;s containing function. Each of the generated closures refer to the same <code>i</code>. Which means that, to get the same effect as the perl code, you must write:</p>


<div class="typocode"><pre><code class="typocode_default ">var subs = [];
for (var shared_i in [0,1,2,3,4]) {
  (function (i) {
    subs[i] = function () {
      return i;
    };
  })(shared_i);
}
subs[0]() // =&gt; 0</code></pre></div>

	<h3>Dodgy Ruby scoping</h3>


	<p>I had initially planned to write the example &#8220;How it should work&#8221; code in Ruby, but it turns out that Ruby&#8217;s <code>for</code> has the same problem:</p>


<div class="typocode"><pre><code class="typocode_default ">subs = [];
for i in 0..4
  subs &lt;&lt; lambda { i }
end
subs[0].call # =&gt; 4</code></pre></div>

	<p>Which is one reason why sensible Ruby programmers don&#8217;t use <code>for</code>. If I were writing the snippet in &#8216;real&#8217; Ruby, I&#8217;d write:</p>


<div class="typocode"><pre><code class="typocode_default ">subs = (0..4).collect { |i|
  lambda { i }
}
subs[0].call # =&gt; 0</code></pre></div>

	<h3>My conclusion</h3>


	<p>Javascript is weird. Okay, so you already know this. In so many ways it&#8217;s a lovely language, but it does have some annoyingly odd corners.</p>      </div>
    </content>
  </entry>
  <entry>
    <id>tag:www.bofh.org.uk:Article3281</id>
    <published>2008-03-14T15:47:52-05:00</published>
    <updated>2008-03-14T15:51:31-05:00</updated>
    <link type="text/html" rel="alternate" href="http://www.bofh.org.uk/articles/2008/03/14/babys-first-screencast"/>
    <author>
      <name>Piers Cawley</name>
    </author>
    <title type="html">Baby's first screencast</title>
    <category term="ruby" label="Ruby" scheme="http://www.bofh.org.uk/articles/category/ruby"/>
    <category term="screencast" scheme="http://www.bofh.org.uk/articles/tag/screencast"/>
    <category term="maybe" scheme="http://www.bofh.org.uk/articles/tag/maybe"/>
    <category term="rspec" scheme="http://www.bofh.org.uk/articles/tag/rspec"/>
    <category term="TDD" scheme="http://www.bofh.org.uk/articles/tag/tdd"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If you follow the Ruby blogs, you will probably have seen a bunch of programmers attempting to do something akin to Haskell&#8217;s <code>maybe</code>, or the ObjectiveC style, message eating null.</p>


	<p>Generally, by about the 3rd time you&#8217;ve written</p>


<div class="typocode"><pre><code class="typocode_default ">if foo.nil? ? nil : foo.bar 
  ...
end</code></pre></div>

	<p>you&#8217;re getting pretty tired of it. Especially when <code>foo</code> is a variable you&#8217;ve had to introduce solely to hold a value while you check that it&#8217;s not nil. The pain really kicks in when you really want to call <code>foo.bar.baz</code>. You can end up writing monstrosities like <code>(tmp = foo.nil? ? nil : foo.bar).nil? ? nil : tmp.baz</code> (actually, if you were to write that in production code, you probably have bigger problems). One option is to just define <code>NilClass#method_missing</code> to behave like its Objective C equivalent, but I&#8217;ve never quite had the nerve to find out how that might work. I wanted to write</p>


<div class="typocode"><pre><code class="typocode_default ">if maybe { foo.bar.baz }
  ...
end</code></pre></div>

	<p>and have nil behave like an Objective C nil for the duration of the block, but no longer. So I wrote it. Then I thought about how to present it. I wrote the thing test first using rspec and the whole thing just flowed, but writing up a test first development process for a blog entry is painful, so I&#8217;ve made a very rough (but blessedly short) screencast of the process instead.</p>


	<p><a href="http://www.archive.org/download/RubyMaybeRoughcut/Monad2.mov"><img src="http://www.bofh.org.uk/images/monadcast.jpg" alt="" /></a></p>


	<p>That&#8217;s a slightly reduced thumbnail, the movie is substantially more readable. The bottom pane of the window is the output of autotest rerunning the spec every time either the spec or the implementation changes. The top pane alternates between the specs and the implementation. Generally, every time I edit the specs, a test starts failing and every time I edit the implementation it starts passing again. In the (any) real coding run, there were of course false starts, but generally the specs kept me pretty straight.</p>


	<p>A word or two of warning: This is a completely unedited, silent, screen cast, there are typos, backtrackings and other embarrassments. I stopped recording once I&#8217;d got 4 tests passing, but this is far from release quality (it&#8217;s perfectly usable if you know its limitations, but it&#8217;s not entirely robust).</p>


	<p>Please let me know what you think of this. I&#8217;m aiming to make a more polished version, complete with voice over and it would be good to know which bits are confusing and need addressing in more detail in the voice over.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>If you follow the Ruby blogs, you will probably have seen a bunch of programmers attempting to do something akin to Haskell&#8217;s <code>maybe</code>, or the ObjectiveC style, message eating null.</p>


	<p>Generally, by about the 3rd time you&#8217;ve written</p>


<div class="typocode"><pre><code class="typocode_default ">if foo.nil? ? nil : foo.bar 
  ...
end</code></pre></div>

	<p>you&#8217;re getting pretty tired of it. Especially when <code>foo</code> is a variable you&#8217;ve had to introduce solely to hold a value while you check that it&#8217;s not nil. The pain really kicks in when you really want to call <code>foo.bar.baz</code>. You can end up writing monstrosities like <code>(tmp = foo.nil? ? nil : foo.bar).nil? ? nil : tmp.baz</code> (actually, if you were to write that in production code, you probably have bigger problems). One option is to just define <code>NilClass#method_missing</code> to behave like its Objective C equivalent, but I&#8217;ve never quite had the nerve to find out how that might work. I wanted to write</p>


<div class="typocode"><pre><code class="typocode_default ">if maybe { foo.bar.baz }
  ...
end</code></pre></div>

	<p>and have nil behave like an Objective C nil for the duration of the block, but no longer. So I wrote it. Then I thought about how to present it. I wrote the thing test first using rspec and the whole thing just flowed, but writing up a test first development process for a blog entry is painful, so I&#8217;ve made a very rough (but blessedly short) screencast of the process instead.</p>


	<p><a href="http://www.archive.org/download/RubyMaybeRoughcut/Monad2.mov"><img src="http://www.bofh.org.uk/images/monadcast.jpg" alt="" /></a></p>


	<p>That&#8217;s a slightly reduced thumbnail, the movie is substantially more readable. The bottom pane of the window is the output of autotest rerunning the spec every time either the spec or the implementation changes. The top pane alternates between the specs and the implementation. Generally, every time I edit the specs, a test starts failing and every time I edit the implementation it starts passing again. In the (any) real coding run, there were of course false starts, but generally the specs kept me pretty straight.</p>


	<p>A word or two of warning: This is a completely unedited, silent, screen cast, there are typos, backtrackings and other embarrassments. I stopped recording once I&#8217;d got 4 tests passing, but this is far from release quality (it&#8217;s perfectly usable if you know its limitations, but it&#8217;s not entirely robust).</p>


	<p>Please let me know what you think of this. I&#8217;m aiming to make a more polished version, complete with voice over and it would be good to know which bits are confusing and need addressing in more detail in the voice over.</p>      </div>
    </content>
  </entry>
</feed>
