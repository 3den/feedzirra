<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom">
 
  <title type="html">ReinH Blog</title>
  <subtitle>Ruby and Rails Best Practices</subtitle>
  
  <link href="http://reinh.com/" />
  <updated>2009-01-22T17:59:55-05:00</updated>
  <author>
    <name>Rein Henrichs</name>
    <email>reinh@reinh.com</email>
  </author>
  <id>http://reinh.com/</id>
  
  <link rel="self" href="http://feeds.feedburner.com/reinh" type="application/atom+xml" /><entry>
    <title type="html">Story Driven Development With&amp;nbsp;Rails</title>
    <link href="http://reinh.com/blog/2008/12/09/story-driven-development-with-rails.html" />
    <id>tag:reinh.com,2008-12-09:1228843346</id>
    <published>2008-12-09T12:22:26-05:00</published>
    <updated>2008-12-09T12:22:26-05:00</updated>
    <content type="html">&lt;p&gt;As a follow up on &lt;a href="http://reinh.com/blog/2008/08/29/incremental-stories-and-micro-releases.html"&gt;writing incremental stories&lt;/a&gt;, we&amp;#8217;re going to take the first story and walk through a behavior driven development process to implement it in a simple Rails application. We will focus on making small, iterative changes and following a strict test-first philosophy where we write granular unit tests and implement them with just enough code to make them pass.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s review our first story:&lt;/p&gt;
&lt;div class='story box negative'&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To View A List Of Projects&lt;br/&gt;
&lt;span class="small"&gt;So that I can find a project that interests me&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance clear"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;All projects shown in list&lt;/li&gt;
	&lt;li&gt;List is paginated&lt;/li&gt;
	&lt;li&gt;List is sorted by age&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 1 Point&lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;At this point, let&amp;#8217;s assume that this story is on top of our current iteration.  First, we&amp;#8217;ll need to review the story for any missing information and communicate with the client to clear up any questions. Keep in mind that a story is just a way to capture a conversation about a feature. It is not set in stone. After talking to the client, we find that we will need to display a project&amp;#8217;s author name and title and that the title will need to link to that project&amp;#8217;s page. Let&amp;#8217;s update the story appropriately.&lt;/p&gt;
&lt;div class='story box negative'&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To View A List Of Projects&lt;br/&gt;
&lt;span class="small"&gt;So that I can find a project that interests me&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance clear"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;All projects shown in list&lt;/li&gt;
	&lt;li&gt;Show title for each project&lt;/li&gt;
	&lt;li&gt;Show author name for each project&lt;/li&gt;
	&lt;li&gt;Project title links to the project&amp;#8217;s page&lt;/li&gt;
	&lt;li&gt;List is paginated&lt;/li&gt;
	&lt;li&gt;List is sorted by project age&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 1 Point&lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Now that the story is complete, deliverable and acceptable, we can begin work on the new feature. A implementation plan should be forming in your head. Now is the time to divide the work into testable units. In our case we already have a Project model with the requisite fields (let&amp;#8217;s say) so our work will focus on the controller and view.&lt;/p&gt;
&lt;h3&gt;Test All The F***ing Time&lt;/h3&gt;
&lt;p&gt;Client sign-off on well written acceptance tests means that the specifications you write and the feature that is implemented as a result will be more closely in line with the client&amp;#8217;s expectations. This minimizes the kind of impedance mismatch between expectation and execution that so often plagues a project with poor client communication and a disorganized process.&lt;/p&gt;
&lt;p&gt;Now it&amp;#8217;s time to take our acceptance tests and use them to drive our iterative, test-driven development process. Let&amp;#8217;s take it from the top.&lt;/p&gt;
&lt;h4&gt;All Projects Shown in List&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s start with the controller. A list of projects needs an index action. Starting at the top, we will need to load all of the projects. Let&amp;#8217;s write a test for this:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;describe &lt;span class="co"&gt;ProjectsController&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
  describe &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;getting a list of products&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
    it &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;loads all the projects&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
      projects = [mock_model(&lt;span class="co"&gt;Project&lt;/span&gt;)]
      &lt;span class="co"&gt;Project&lt;/span&gt;.stub!(&lt;span class="sy"&gt;:all&lt;/span&gt;).and_return(projects)

      get &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;

      assigns(&lt;span class="sy"&gt;:projects&lt;/span&gt;).should == projects
    &lt;span class="r"&gt;end&lt;/span&gt;
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class='negative box hilight'&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Stubbing the call to &lt;code&gt;Project.all&lt;/code&gt; has the immediate benefit of eliminating the database from our test but is potentially more brittle since we cannot be sure that this interface point to our Project model will not need to change in the future.&lt;/p&gt;
&lt;p class="bottom"&gt;On a side note, I tend to view controller tests as integration-level tests rather than unit tests. As such, I usually do write tests that touch the database since these are often less brittle. If you write tests that touch the database, ActiveRecord factories such as &lt;a href="http://giantrobots.thoughtbot.com/2008/6/6/waiting-for-a-factory-girl"&gt;Factory Girl&lt;/a&gt; or &lt;a href="http://b.logi.cx/2007/11/26/object-daddy"&gt;object daddy&lt;/a&gt; are useful for populating the database with valid records in known&amp;nbsp;states.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we can write the implementation:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;ProjectsController&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;index&lt;/span&gt;
    &lt;span class="iv"&gt;@projects&lt;/span&gt; = &lt;span class="co"&gt;Project&lt;/span&gt;.all
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we have to display a list of projects. We&amp;#8217;ll write a view test to cover this:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;describe &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/projects/index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
  before(&lt;span class="sy"&gt;:each&lt;/span&gt;) &lt;span class="r"&gt;do&lt;/span&gt;
    &lt;span class="iv"&gt;@project&lt;/span&gt; = mock_model(&lt;span class="co"&gt;Project&lt;/span&gt;)
    &lt;span class="iv"&gt;@projects&lt;/span&gt; = [&lt;span class="iv"&gt;@project&lt;/span&gt;]
    assigns[&lt;span class="sy"&gt;:projects&lt;/span&gt;] = &lt;span class="iv"&gt;@projects&lt;/span&gt;
    render &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;projects/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="r"&gt;end&lt;/span&gt;
  
  it &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;should include a list of projects&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;li.project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="sy"&gt;:count&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@projects&lt;/span&gt;.size)
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the implementation:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="ta"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="iv"&gt;@projects&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |project| &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="r"&gt;end&lt;/span&gt; &lt;span class="idl"&gt;-%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="ta"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; View tests can often be brittle. They can be made less brittle by testing only for semantically appropriate tags, classes and ids whenever possible. Using semantically rich markup in your views will make it much easier to write robust view tests &amp;#8212; and is also a great practice for its own sake.&lt;/p&gt;
&lt;h4&gt;Show Title for Each Project&lt;/h4&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;describe &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/projects/index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
  &lt;span class="c"&gt;# SNIP&lt;/span&gt;
  
  it &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;should show the title for each project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;li.project .title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@project&lt;/span&gt;.title)
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="ta"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="iv"&gt;@projects&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |project| &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="ta"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%=&lt;/span&gt; project.title &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="r"&gt;end&lt;/span&gt; &lt;span class="idl"&gt;-%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="ta"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;Show Author Name for Each Project&lt;/h4&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;describe &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/projects/index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
  &lt;span class="c"&gt;# SNIP&lt;/span&gt;
  
  it &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;should show the author name for each project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
    response.should have_tag(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;li.project .author_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@project&lt;/span&gt;.author_name)
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="ta"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="iv"&gt;@projects&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |project| &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="ta"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%=&lt;/span&gt; project.title &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="ta"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;author_name&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%=&lt;/span&gt; project.author_name &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="r"&gt;end&lt;/span&gt; &lt;span class="idl"&gt;-%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="ta"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class="note"&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are using an accessor on our project model, &lt;code&gt;Project#author_name&lt;/code&gt;. There&amp;#8217;s a good chance that this name will be taken from an associated User or Author model in any non-trivial Rails application. From an object oriented standpoint, however, having the author name hang directly from the Project model improves encapsulation.&lt;/p&gt;
&lt;p class="bottom"&gt;The benefits of this were already seen in the test, where we were able to stub &lt;code&gt;author_name&lt;/code&gt; directly on the Project mock. Without the accessor, we would be forced to stub &lt;code&gt;#author&lt;/code&gt; on the Project mock to return an Author mock that then stubs &lt;code&gt;#name&lt;/code&gt; just so that we could properly test the method chain &lt;code&gt;project.author.name&lt;/code&gt; that is used in the view. Violating the &lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt; makes testing harder.&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;Project Title Links to the Project&amp;#8217;s Page&lt;/h4&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;describe &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/projects/index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
  &lt;span class="c"&gt;# SNIP&lt;/span&gt;
  
  it &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;should have project titles that link to the project page&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;
    response.should have_tag( &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;li.project .title a[href=?]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, project_path(&lt;span class="iv"&gt;@project&lt;/span&gt;),   
      &lt;span class="sy"&gt;:text&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@project&lt;/span&gt;.title)
  &lt;span class="r"&gt;end&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="ta"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="iv"&gt;@projects&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |project| &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;project&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="ta"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%=&lt;/span&gt; link_to project.title, project &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="ta"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;author_name&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%=&lt;/span&gt; project.author_name &lt;span class="idl"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="il"&gt;&lt;span class="idl"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="r"&gt;end&lt;/span&gt; &lt;span class="idl"&gt;-%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="ta"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The story is now about half complete. I&amp;#8217;ll leave pagination and default sort order as an exercise for the user. In fact, these could also have been broken out into a secondary story or stories given that what we have done so far is an incremental unit of work.&lt;/p&gt;
&lt;p&gt;I hope this rather contrived example shows how stories with well written acceptance tests inform a test- or behavior- driven development process and help bridge the gap between what the client expects and what the developement team delivers.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">A&amp;nbsp;Retraction</title>
    <link href="http://reinh.com/blog/2008/12/05/a-retraction.html" />
    <id>tag:reinh.com,2008-12-05:1228500630</id>
    <published>2008-12-05T13:10:30-05:00</published>
    <updated>2008-12-05T13:10:30-05:00</updated>
    <content type="html">&lt;p&gt;The folks over at &lt;a href="https://www.woobius.com/"&gt;Woobius&lt;/a&gt; have offered their sincere apology over what I believe was a simple misunderstanding and have made several changes to their blog design in response to my last post. I appreciate the professional way that they have handled the situation and have decided to retract said post in response to their request.&lt;/p&gt;
&lt;p&gt;I am not changing my stance on whether or not my design and content are open source and open to reuse (they are not). I will include a more explicit license to try to prevent such issues in the future. I would very much like to keep my blog&amp;#8217;s source publicly viewable on Github. I may need to discuss with the Github team the legal implications of their &lt;acronym title="Terms of Service"&gt;TOS&lt;/acronym&gt; for public repositories.&lt;/p&gt;
&lt;p&gt;I would also like to find a licensing solution that would allow me to open certain parts of the source (my customizations of Webby and the various helpers and tools in my &lt;code&gt;lib&lt;/code&gt; directory, for instance) but still allow me to keep the design and content proprietary. I welcome any suggestions in the comment section below.&lt;/p&gt;
&lt;p&gt;I wish the Woobius team the best and look forward to seeing the direction that they take with their blog now that this misunderstanding has been cleared up. I hereby officially remove their evildoer status and downgrade them to unfortunate-misunderstanding-doers. I have also called off my Lawyers of Justice.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">Git Push: Just The&amp;nbsp;Tip</title>
    <link href="http://reinh.com/blog/2008/04/18/git-push-just-the-tip.html" />
    <id>tag:reinh.com,2008-04-18:1208531353</id>
    <published>2008-04-18T11:09:13-04:00</published>
    <updated>2008-04-18T11:09:13-04:00</updated>
    <content type="html">&lt;p&gt;Today we delve into the world of &lt;code&gt;git push&lt;/code&gt;, one of the most often used git tools. &lt;code&gt;git push&lt;/code&gt; is typically used to update a remote ref and associated objects based on a local ref &amp;#8211; in other words, to push your local changes to an upstream repository &amp;#8211; but you can also use it to create or delete remote branches and &lt;del&gt;much, much more!&lt;/del&gt; actually, that&amp;#8217;s about it.&lt;/p&gt;
&lt;h3&gt;Just The Tip&lt;/h3&gt;
&lt;p&gt;The most common use of &lt;code&gt;git push&lt;/code&gt; is to push your local changes to your public upstream repository. Assuming that the upstream is a remote named &amp;#8220;origin&amp;#8221; (the default remote name if your repository is a clone) and the branch to be updated to/from is named &amp;#8220;master&amp;#8221; (the default branch name), this is done with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get used to this. You&amp;#8217;ll be doing it a lot.&lt;/p&gt;
&lt;h3&gt;A Bit Deeper&lt;/h3&gt;
&lt;p&gt;Git uses the term &amp;#8220;refspec&amp;#8221; when describing the usage of some of its commands. A refspec is essentially a name that git can resolve to a commit object. This can be the name of a branch or an arbitrary &amp;#8220;SHA1 expression&amp;#8221; such as &lt;code&gt;master~4&lt;/code&gt;, among &lt;a href="http://www.kernel.org/pub/software/scm/git"&gt;others&lt;/a&gt; core/docs/git rev-parse.html. Git gives you a lot of ways to refer to a commit but for most purposes you&amp;#8217;ll just use the name of a branch with &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.kernel.org/pub/software/scm/git"&gt;kernel.org manpage for git pull&lt;/a&gt; core/docs/git push.html#URLS will rather cryptically tell you that &amp;#8220;The canonical format of a &amp;lt;refspec&amp;gt; parameter is &lt;code&gt;+?&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt;&amp;#8221;. Most of the time this translates to &lt;code&gt;&amp;lt;branch to push from&amp;gt;:&amp;lt;branch to push to&amp;gt;&lt;/code&gt;. The branch to push from and the colon are optional. If left out, git will push from the local branch to the remote branch of the same name. If no refspec is used at all, git will push all &amp;#8220;heads&amp;#8221; (f.e. branches) on the local to matching heads that exist on the remote.&lt;/p&gt;
&lt;p&gt;In practice, this means that:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;git push origin&lt;/code&gt; will push changes from all local branches to matching branches the origin remote&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt; will push changes from the local master branch to the remote master branch&lt;/li&gt;
	&lt;li&gt;@git push origin master:staginwill push changes from the local master branch to the remote staging branch &lt;em&gt;if it exists&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tips and Tricks&lt;/h3&gt;
&lt;h4&gt;Create a Remote Branch&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git push origin master:refs/heads/staging&lt;/code&gt; will create the branch &lt;code&gt;staging&lt;/code&gt; in the origin      repository by copying the local &lt;code&gt;master&lt;/code&gt; branch&lt;/p&gt;
&lt;h4&gt;Delete a Remote Branch&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git push origin :staging&lt;/code&gt; will delete the branch &lt;code&gt;staging&lt;/code&gt; from the origin repository.&lt;/p&gt;
&lt;h4&gt;Set Up A Branch&amp;#8217;s Default Remote&lt;/h4&gt;
&lt;p&gt;You can use git config to assign a default remote to a given branch. This default remote will be used to push that branch unless otherwise specified.&lt;br /&gt;
    &lt;br /&gt;
This is already done for you when you use &lt;code&gt;git clone&lt;/code&gt;, allowing you to use &lt;code&gt;git push&lt;/code&gt; without any arguments to push the local master branch to update the origin repository&amp;#8217;s master branch.&lt;br /&gt;
    &lt;br /&gt;
&lt;code&gt;git config branch.&amp;lt;name&amp;gt;.remote &amp;lt;remote&amp;gt;&lt;/code&gt; can be used to specify this manually.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">Incremental Stories and&amp;nbsp;Micro&amp;#8209;Releases</title>
    <link href="http://reinh.com/blog/2008/08/29/incremental-stories-and-micro-releases.html" />
    <id>tag:reinh.com,2008-08-29:1220044463</id>
    <published>2008-08-29T17:14:23-04:00</published>
    <updated>2008-08-29T17:14:23-04:00</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.amazon.com/Agile-Estimating-Planning-Robert-Martin/dp/0131479415"&gt;Agile estimating and planning&lt;/a&gt; is difficult. One of the practices that we are learning and adopting at Hashrocket that has truly improved our ability to ship is &lt;a href="http://www.dtsato.com/blog/2008/08/26/agile-2008-estimating-considered-wasteful-introducing-micro-releases/"&gt;&lt;strong&gt;micro-releases&lt;/strong&gt;&lt;/a&gt;. The idea, championed by author Joshua Kerievsky, is that constantly planning and shipping small, feature based incremental releases within the iterative cycle drives the delivery of tangible business value. In other words, the most important stuff gets shipped sooner.&lt;/p&gt;
&lt;p&gt;Committing to micro-releases ensures that we are constantly working on delivering the highest priority features that represent real business value in an agile, incremental way. Complex stories that won&amp;#8217;t fit into a micro-release cycle are broken down into stories that deliver core value and supporting stories that can be deferred to a later iteration.&lt;/p&gt;
&lt;h3&gt;A Complex Story&lt;/h3&gt;
&lt;div class='story box negative' id="story-1"&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To View A List Of Projects&lt;br/&gt;
&lt;span class="small"&gt;So that I can find a project that interests me&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance clear"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;All projects shown in list&lt;/li&gt;
	&lt;li&gt;List is paginated&lt;/li&gt;
	&lt;li&gt;List sorts by age by default&lt;/li&gt;
	&lt;li&gt;List is sortable by the following criteria
	&lt;ul&gt;
		&lt;li&gt;Age&lt;/li&gt;
		&lt;li&gt;Owner&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;List is filterable by the following criteria
	&lt;ul&gt;
		&lt;li&gt;Status&lt;/li&gt;
		&lt;li&gt;Category&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 4 Points&lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;This is a reasonably good story. It is clear, concise and deliverable. Its acceptance criteria are testable. It adds real business value. A short time ago ago I would have been quite happy to write stories just like this. That&amp;#8217;s not the case today.&lt;/p&gt;
&lt;p&gt;Now that our development process is becoming more geared towards focused micro-releases, the value of incremental stories is becoming exceedingly clear. Writing incremental stories allows us to break complex stories apart into a first increment focused on delivering core value and a set of secondary stories that can be added as later increments to deliver supplementary value.&lt;/p&gt;
&lt;h3&gt;A Simple Primary Story&lt;/h3&gt;
&lt;div class='story box negative'&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To View A List Of Projects&lt;br/&gt;
&lt;span class="small"&gt;So that I can find a project that interests me&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance clear"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;All projects shown in list&lt;/li&gt;
	&lt;li&gt;List is paginated&lt;/li&gt;
	&lt;li&gt;List is sorted by age&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 1 Point&lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;This story is smaller and simpler but it delivers most of the value of the original complex story. Users can browse a list and find projects. Additional value is certainly provided by selecting sort and filtering criteria. But that&amp;#8217;s the point: these provide &lt;strong&gt;additional&lt;/strong&gt; value. The simple primary story is an increment that delivers on the core value behind this feature: users want to discover projects. It&amp;#8217;s the minimum functionality needed to start using the feature.&lt;/p&gt;
&lt;h3&gt;Some Simple Supplementary Stories&lt;/h3&gt;
&lt;div class='story box negative'&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To Sort The Project List&lt;br/&gt;
&lt;span class="small"&gt;So that I can better discover projects based on certain criteria&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1.1&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance clear"&gt;Requires:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;A list of projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story- acceptance"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;List is sortable by the following criteria
	&lt;ul&gt;
		&lt;li&gt;Age&lt;/li&gt;
		&lt;li&gt;Owner&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 1 Point&lt;/h5&gt;
&lt;/div&gt;
&lt;div class='story box negative'&gt;
&lt;h4 class='story-title column span-14'&gt;
As A User I Want To Filter The Project List&lt;br/&gt;
&lt;span class="small"&gt;So that I can browse only projects that match a given criterion&lt;/span&gt;
&lt;/h4&gt;
&lt;h4 style="text-align:right;" class="story-number alt column span-1 last"&gt;#1.2&lt;/h4&gt;
&lt;h5 style="margin-bottom:0;" class="story-requires clear"&gt;Requires:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;A list of projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-acceptance"&gt;Acceptance:&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;List is filterable by the following criteria
	&lt;ul&gt;
		&lt;li&gt;Status&lt;/li&gt;
		&lt;li&gt;Category&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 style="margin-bottom:0;" class="story-cost"&gt;Cost: 2 Points&lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;One interesting and important observation is that the primary story is a one point story while the secondary stories total to three points. This means that these secondary stories represent fully three fourths of the original value of the complex story. In other words, shipping on the core value of the feature becomes much, much easier once it&amp;#8217;s broken up into increments.&lt;/p&gt;
&lt;h3&gt;Ship Leaner Features, Sooner&lt;/h3&gt;
&lt;p&gt;Breaking complex stories into simpler incremental stories becomes especially important in situations where your iterations are extremely time-sensitive. This is precisely the case in our &lt;a href="http://www.hashrocket.com/products"&gt;3-2-1 Launch&lt;/a&gt; projects. Breaking stories into increments allows us to deliver more of the application&amp;#8217;s core value sooner. It also helps clients make real-time decisions about the importance of the primary and secondary value stories separately. Once they can get their hands on the core functionality they often re-prioritize the secondary stories more effectively.&lt;/p&gt;
&lt;p&gt;In the case of this particular story, once the basic list and pagination were out there &amp;#8211; and once project search (another core value feature) was implemented &amp;#8211; it became clear that the secondary project listing stories only duplicated functionality. These secondary stories are cooling off in the icebox as we speak. Meanwhile, we shipped a feature four times leaner and four times sooner.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">REST &amp;&amp;nbsp;Rails</title>
    <link href="http://reinh.com/blog/2007/11/13/rest-and-rails.html" />
    <id>tag:reinh.com,2007-11-13:1194974956</id>
    <published>2007-11-13T12:29:16-05:00</published>
    <updated>2007-11-13T12:29:16-05:00</updated>
    <content type="html">&lt;p&gt;I am giving a presentation on Rails, REST, and the Resource Oriented Architecture today entitled &amp;#8220;REST &amp;amp; Rails: Web Services for the Rails World&amp;#8221;. Check out &lt;a href="http://assets.reinh.com/talks/REST-and-Rails.pdf"&gt;the slides&lt;/a&gt;.&lt;/p&gt;
&lt;a href="http://assets.reinh.com/talks/REST-and-Rails.pdf" title="REST &amp;amp; Rails"&gt;&lt;img src="http://assets.reinh.com/images/REST-and-Rails.gif" title="REST &amp;amp; Rails"/&gt;&lt;/a&gt;</content>
  </entry>
  
  <entry>
    <title type="html">To Design A Blog (act&amp;nbsp;1)</title>
    <link href="http://reinh.com/blog/2008/02/25/to-design-a-blog.html" />
    <id>tag:reinh.com,2008-02-25:1203970944</id>
    <published>2008-02-25T15:22:24-05:00</published>
    <updated>2008-02-25T15:22:24-05:00</updated>
    <content type="html">&lt;p&gt;Your blog&amp;#8217;s role as personal soapbox is obvious; its role in establishing identity is often overlooked. As a designer, your blog speaks volumes not only by what it says, but also by how it says it. If you can&amp;#8217;t design your own blog &amp;ndash; they will say &amp;ndash; how can you design anything else? It was with this in mind that I set out to redesign my own blog.&lt;/p&gt;
&lt;p&gt;As an entry point for colleagues and potential clients, your blog&amp;#8217;s first impression is crucial. Snap judgements will be made that you may never be able to escape. Your design must inform your readers as to your abilities with grace and flair. It must establish your visual style distinctly and succinctly. It must be both well orchestrated and well rehearsed. It must, in short, be great.&lt;/p&gt;
&lt;h3&gt;The Design Process&lt;/h3&gt;
&lt;p&gt;Before setting pen to paper, hand to mouse or fingers to keyboard, I began by thinking about what kind of response I wanted to elicit from my readers. I decided that want it to be warm and inviting, rich in information, and clean and elegant; it should be visually consistent, easy to read, and easy to navigate; most importantly, it should look like me.&lt;/p&gt;
&lt;p&gt;This lead to a few clear design goals:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Strong, consistent typography&lt;/li&gt;
	&lt;li&gt;Simple, uncomplicated layout&lt;/li&gt;
	&lt;li&gt;Minimal but effective use of color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The design itself went through a number of iterations, beginning with simple pen-and-paper sketches. At the beginning, I imposed a few constraints to help focus my efforts: Single column, 800px width, gridded layout, three fonts. The content would reign supreme. Consistent typography would establish a visual hierarchy.&lt;/p&gt;
&lt;h3&gt;In The Beginning Was The Typography&lt;/h3&gt;
&lt;div class="img"&gt;
&lt;a href="/images/redesign/ReinH-01.png"&gt;&lt;img src="/images/redesign/thumbs/ReinH-01.png" id="figure-1-1" alt="" /&gt;&lt;/a&gt;
    &lt;p&gt;(Figure 1.1)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Sorting out the typography goes a long way towards giving your design a strong, cohesive style. It is important to chose two or three fonts (and no more) and to use them consistently. It is also important to use consistent font sizing to establish a visual hierarchy.&lt;/p&gt;
&lt;p&gt;I decided on Helvetica (specifically Helvetica Neue when available) for headers and Verdana for body text. Helvetica was chosen for its readability at medium to large point sizes and flat out gorgeousness. Verdana was chosen for its ubiquity and readability on screen at small to medium point sizes.&lt;/p&gt;
&lt;h3&gt;Rock Out With Your Layout&lt;/h3&gt;
&lt;p&gt;Most blogs use a two-column layout with a sidebar on the right to display subordinate information. Here, I choose a more minimal approach: a single column with information presented serially according to importance. The home page is streamlined to encourage the reader to discover subordinate content, as will navigation links at the top.&lt;/p&gt;
&lt;p&gt;Also, the typography was further refined. A serif font is added for subtitles and meta information (like post date). Finally. the main heading font is pumped a bit to help the major sections pop.&lt;/p&gt;
&lt;div class="img"&gt;    &lt;a href="/images/redesign/ReinH-02.png"&gt;&lt;img src="/images/redesign/thumbs/ReinH-02.png" id="figure-1-2" alt="" /&gt;&lt;/a&gt;&lt;br /&gt;
    &lt;p&gt;(Figure 1.2)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A quick look at &lt;a href="/images/redesign/ReinH-02.png"&gt;Figure 1.2&lt;/a&gt; will reveal that the initial read is much improved. The main content sections (the latest post and the list of recent posts) stand out as clearly differentiated. There remain, however, some issues with the font sizing and the spacing of elements. Also, the footer&amp;#8217;s columns appear rather haphazardly placed.&lt;/p&gt;
&lt;p&gt;Coming up in act two, the layout and typography get cleaned up and we add a splash of color. Don&amp;#8217;t miss it!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">Custom Textile Tags For Great&amp;nbsp;Justice</title>
    <link href="http://reinh.com/blog/2008/04/09/customize-textile-tags-for-great-justice.html" />
    <id>tag:reinh.com,2008-04-09:1207788961</id>
    <published>2008-04-09T20:56:01-04:00</published>
    <updated>2008-04-09T20:56:01-04:00</updated>
    <content type="html">&lt;p&gt;fig. 1.1 | elem-typo-style.png&lt;/p&gt;
&lt;p&gt;Taking some inspiration (and code) from the quirky but lovable _why&amp;#8217;s original post on &lt;a href="http://redhanded.hobix.com/inspect/usingRedcloth3.html"&gt;adding yer custom blocks&lt;/a&gt; to RedCloth and the inimitable Geoff Grosenbach&amp;#8217;s foray into the world of &lt;a href="http://nubyonrails.com/articles/about-this-blog-custom-textile" title="About This Blog: Custom Textile | Ruby on Rails for Newbies"&gt;custom textile figure tags&lt;/a&gt;, we&amp;#8217;ve build a custom tag (or prefix) for this blog&amp;#8217;s own figures, like &lt;a href="/images/elem-typo-style.png" class="figure-1-1"&gt;figure-1-1)&lt;/a&gt; there on the right.&lt;/p&gt;
&lt;p&gt;RedCloth&amp;#8217;s textile implementation uses some simple metaprogramming to create its own tags, which allows you to (more or less) easily create new tags to suit your own needs. The basic formula is: write a &lt;code&gt;textile_#{ tag }&lt;/code&gt; method, where &lt;code&gt;tag&lt;/code&gt; is the name of the tag you want to create. This method takes four arguments, tag, atts, cite and content, which are parsed from the textile by the RedCloth engine.&lt;/p&gt;
&lt;p&gt;For our purposes, we&amp;#8217;re only concerned with content and atts, so I&amp;#8217;ll leave the rest as an exercise for the gentle reader. The html we&amp;#8217;re trying to create looks like this:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="ta"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="an"&gt;id&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;figure-1-1&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="ta"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="an"&gt;class&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fig&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="an"&gt;href&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/images/image.jpb&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="ta"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="ta"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="an"&gt;src&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;/images/thumbs/image.jpg&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="an"&gt;alt&lt;/span&gt;=&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Figure 1.1&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="ta"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="ta"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="ta"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Figure 1.1&lt;span class="ta"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="ta"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The tag we want to use to create it looks like this:&lt;/p&gt;
&lt;code&gt;fig. 1.1 | image.jpg&lt;/code&gt;&lt;p&gt;That&amp;#8217;s quite a bit shorter and more elegant. Jumping right in to the good stuff, the method definition for our new tag looks like this:&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;textile_fig&lt;/span&gt;(tag, atts, cite, content)
  span_class = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;img &lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="r"&gt;if&lt;/span&gt; atts =~ &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;class=&amp;quot;([^&lt;/span&gt;&lt;span class="ch"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;]+)&amp;quot;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;
    span_class += &lt;span class="gv"&gt;$1&lt;/span&gt;
  &lt;span class="r"&gt;end&lt;/span&gt;
  (figure_number, img_url) = content.split(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).map { |w| w.strip }
  figure_name = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Figure &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_number&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  figure_id = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;figure-&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_number&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.tr(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="s"&gt;&lt;span class="dl"&gt;%{&lt;/span&gt;&lt;span class="k"&gt;
  &amp;lt;div class=&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;span_class&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot; id=&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_id&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;fig&amp;quot; href=&amp;quot;/images/&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;img_url&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot;&amp;gt;
      &amp;lt;img src=&amp;quot;/images/thumbs/&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;img_url&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot; alt=&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_name&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;quot; /&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_name&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;#8217;s break that down.&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;span_class = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;img &lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="r"&gt;if&lt;/span&gt; atts =~ &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;class=&amp;quot;([^&lt;/span&gt;&lt;span class="ch"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;]+)&amp;quot;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;
  span_class += &lt;span class="gv"&gt;$1&lt;/span&gt;
&lt;span class="r"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This adds any classes in atts (in the form of &lt;code&gt;class="foo"&lt;/code&gt;) to the base class, img.&lt;/p&gt;
&lt;div class="CodeRay"&gt;&lt;pre&gt;(figure_number, img_url) = content.split(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).map { |w| w.strip }
figure_name = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Figure &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_number&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
figure_id = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;figure-&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="idl"&gt;#{&lt;/span&gt;figure_number&lt;span class="idl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.tr(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This breaks &amp;#8220;fig 1.1 | image.jpg&amp;#8221; down into two parts by splitting on the &amp;#8220;|&amp;#8221; and then normalizes them a bit to be used later.&lt;/p&gt;
&lt;p&gt;Finally, the relevant parts are jammed into the html prototype and spit back as the method&amp;#8217;s return value for insertion into your textile document (and for great justice, of course).&lt;/p&gt;
&lt;p&gt;fig. 1.2 | ReinH-07.png&lt;/p&gt;
&lt;p&gt;A later post might show the way &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;DATA&lt;/code&gt; and &lt;code&gt;if __FILE__ == $PROGRAM_NAME&lt;/code&gt; were used with the TextMate Ruby Bundle&amp;#8217;s &amp;amp;#x2318;R command to preview the output of the textile tag as it was being written for a faster workflow or the jQuery used to activate the thumbnail&amp;#8217;s hover effect while an inline link like &lt;a href="/images/ReinH-07.png" class="figure-1-2"&gt;figure-1-2)&lt;/a&gt; is hovered. But I wouldn&amp;#8217;t hold your breath.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">To Design A Blog (act&amp;nbsp;2)</title>
    <link href="http://reinh.com/blog/2008/02/26/to-design-a-blog-2.html" />
    <id>tag:reinh.com,2008-02-26:1204079296</id>
    <published>2008-02-26T21:28:16-05:00</published>
    <updated>2008-02-26T21:28:16-05:00</updated>
    <content type="html">&lt;p&gt;fig. 1.1 | ReinH-02.png&lt;/p&gt;
&lt;p&gt;In our &lt;a href="http://reinh.com/2008/02/25/to-design-a-blog-1.html"&gt;first installment&lt;/a&gt;, the typography and layout of the blog were mostly decided. With this ground work in place, it&amp;#8217;s time to start focusing on the details. But first, it&amp;#8217;s time to give our eyes and brain a chance to relax and reset. Staring at the same design for hours tends to give you tunnel-vision and we want to be able to look at the site afresh.&lt;/p&gt;
&lt;p&gt;Now that we&amp;#8217;re ready to continue, the most obvious issue is the arrangement of the sections in the footer. The rest of the design follows a strict grid system but the haphazard placement of the bottom columns is jarring to the eye and the whitespace between them is also problematic. &lt;a href="/images/ReinH-02.png" class="figure-1-1"&gt;figure-1-1)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;fig. 1.2 | ReinH-03.png&lt;/p&gt;
&lt;p&gt;A third column is added and the columns are properly aligned with the grid layout once again &lt;a href="/images/ReinH-03.png" class="figure-1-2"&gt;figure-1-2)&lt;/a&gt;. Great success! The remaining changes are all relatively minor and mainly involve tweaks to font size, color, and spacing. Bonus points if you can spot them.&lt;/p&gt;
&lt;p&gt;Now then: Welcome to the new blog! Enjoy your stay.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">Rocking the&amp;nbsp;Hoedown</title>
    <link href="http://reinh.com/blog/2008/08/10/rocking-the-hoedown.html" />
    <id>tag:reinh.com,2008-08-10:1218391358</id>
    <published>2008-08-10T14:02:38-04:00</published>
    <updated>2008-08-10T14:02:38-04:00</updated>
    <content type="html">&lt;p&gt;&lt;img src="/images/hoedown/hoedown-speaker.png" class="box right" alt="" /&gt;&lt;br /&gt;
&lt;span class="dropcap w"&gt;W&lt;/span&gt;e had a great time at the Ruby Hoedown this weekend. The &lt;a href="http://hashrocket.com"&gt;Hashrocket&lt;/a&gt; crew was out in force (and there was much debauchery in the Hashrocket RV). We got to meet or get better acquainted with a lot of great rubyists and hear a lot of entertaining, informative talks.&lt;/p&gt;
&lt;h3&gt;Jim and Joe&amp;#8217;s Mock Dialog&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://farm4.static.flickr.com/3046/2747232825_923bf6eb27_m.jpg" class="box" alt="" /&gt;&lt;br /&gt;
&lt;a href="http://onestepback.org/"&gt;Jim Weirich&lt;/a&gt; and &lt;a href="http://objo.com/"&gt;Joe O&amp;#8217;Brien&lt;/a&gt; presented their talk about mocks and stubs in the form of a short play in three acts. This was very timely for me since mocking properly in tests is area we have been discussing quite a bit at Hashrocket.&lt;/p&gt;
&lt;p&gt;One thing they said that struck a chord was that complex mocks are a code smell that can clue you in to problems or hot spots for refactoring in the code under test.&lt;/p&gt;
&lt;p&gt;The presentation style was fresh and the tips they provided should be very valuable to anyone using mocks in testing (which should be everyone).&lt;/p&gt;
&lt;h3&gt;Ruby Best Practice Patterns&lt;/h3&gt;
&lt;p&gt;&lt;img src="/images/hoedown/rein-hoedown-talk.png" class="box right" alt="" /&gt;&lt;br /&gt;
I&amp;#8217;m afraid I played a little trick on poor Jeremy and my dear audience. Instead of spending an hour giving examples of patterns and practices, I thought it might be fun to take a more satirical slant on the material. The resulting talk, &lt;cite&gt;Unfactoring From Patterns: Job Security Through Code Obscurity&lt;/cite&gt;, turned out to be a modest success (if I do say so myself) and I think rather more entertaining to boot.&lt;/p&gt;
&lt;p&gt;I did have time to show a few actual patterns but the dialog during the question and answer period was especially valuable. David Black, Yehuda Katz and others made some great points and I really enjoyed getting a chance to discuss one of my favorite topics with such a receptive and informed audience.&lt;/p&gt;
&lt;h3&gt;We Ain&amp;#8217;t Got No Keynote&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://farm4.static.flickr.com/3020/2750897640_74a18f4807_m.jpg" class="box" alt="" /&gt;&lt;br /&gt;
Chris decided to forgo the slides to tell us a more personal story about his growth from a lowly PHP hacker to the successful rubyist, entreprenuer and open-source champion that he is today. Chris is an exemplar for me of the right way to go about creating a personal and company brand.&lt;/p&gt;
&lt;p&gt;Chris&amp;#8217;s years of passion for tinkering, experimenting and exploring really have payed off in a big way. I think his story could rightly be considered inspirational. I&amp;#8217;m sure a lot of people left his talk and started side projects this very weekend. I really enjoyed his talk (even if he did tell people not to buy my book).&lt;/p&gt;
&lt;h3&gt;Flog Your Tests, Test Your Flog&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://farm4.static.flickr.com/3268/2750731456_95a4c0e43d_m.jpg" class="box right" alt="" /&gt;&lt;br /&gt;
Testing is such a crucial part of my process that I was very excited to hear Rick Bradley&amp;#8217;s account of his rather epic battle to add tests to flog. The irony here, of course, is that flog itself is a testing tool.&lt;/p&gt;
&lt;p&gt;This talk combined two of my favorite topics: testing and refactoring. Rick&amp;#8217;s war stories had some great takeaways: the importance of integration tests to characterize the behavior of the existing system, the ways in which code that is written test first differs from code that is written without tests, the utter importance of testing all the f&amp;#8212;king time. Bryal Liles will have more to say on that last topic in a bit.&lt;/p&gt;
&lt;p&gt;I really can&amp;#8217;t say enough about Rick&amp;#8217;s talk. Hashrocket often takes on applications with little or no testing for our Rescue Missions and Rick&amp;#8217;s deliberate, careful, comprehensive methodology is exactly the process we try to follow when we refactor and resuscitate our clients&amp;#8217; code back to health. Rick could very well write the Hashrocket Rescue Mission manual.&lt;/p&gt;
&lt;h3&gt;MIDI Machinations and Hungry Hungry Hippos&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://farm3.static.flickr.com/2379/2330883047_19ee04ab8d_m.jpg" class="box left" alt="" /&gt;&lt;br /&gt;
Giles Bowkett is a mad genius. Perhaps more importantly, he&amp;#8217;s an artist who can ship. He lured us all to a talk about archaeopteryx, his amazing MIDI  generator, and then proceeded to smack us all with the enlightenment stick.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t spoil his talk for people who haven&amp;#8217;t seen it. Suffice it to say that it was far more than I expected. Giles&amp;#8217;s opinions on software development are unique and somewhat iconoclastic. Be careful, the code he writes might blow some people&amp;#8217;s minds.&lt;/p&gt;
&lt;p&gt;Giles&amp;#8217;s &lt;a href="http://gilesbowkett.blogspot.com/2008/04/my-approach-to-giving-presentations.html"&gt;presentation style&lt;/a&gt; is engaging and he can be down right hilarious at times. Also, hippos are scary!&lt;/p&gt;
&lt;h3&gt;Wrap It Up!&lt;/h3&gt;
&lt;p&gt;Taking a road trip down to the Hoedown with the Hashrocket crew was one of the best conference experiences I&amp;#8217;ve had so far. The talks were great, but I think the after-conference festivities were the real hilight. Watching Obie and Jason play beer pong on a table constructed of pool noodles (watch the video), playing werewolf with a crew of drunken rubyists and spending time with some of my favorite conference friends. Who could ask for more? Also, Jeremy has big plans for next year&amp;#8217;s Hoedown. It involves words like &amp;#8220;free&amp;#8221; and &amp;#8220;Nashville&amp;#8221; &amp;#8211; I would be inclined to add &amp;#8220;awesome&amp;#8221; as well.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title type="html">Adding Epicycles: Copernicus on Software&amp;nbsp;Development</title>
    <link href="http://reinh.com/blog/2008/07/28/adding-epicycles-copernicus-on-software-development.html" />
    <id>tag:reinh.com,2008-07-28:1217288895</id>
    <published>2008-07-28T19:48:15-04:00</published>
    <updated>2008-07-28T19:48:15-04:00</updated>
    <content type="html">&lt;p class="first"&gt;&lt;span class="dropcap t"&gt;T&lt;/span&gt;he geocentric model of the solar system is a very old one. First postulated by Plato and Aristotle in the 6th century BC, the idea that the Earth is at the center of the universe was later refined and standardized in Claudius Ptolemy&amp;#8217;s main astronomical book, &lt;cite&gt;Almagest&lt;/cite&gt;. It is also an excellent example of a very common design failure in software development.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NB: The following contains a completely gratuitous lesson on the history of sclence. If you don&amp;#8217;t like learning things, I guess you can &lt;a href="#loser"&gt;skip a bit&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Ptolemy&amp;#8217;s Faulty Assumption&lt;/h3&gt;
&lt;p&gt;It seems like a pretty obvious idea: sun, stars, planets&amp;#8230; everything &lt;em class="standard"&gt;looks&lt;/em&gt; as if it goes around the Earth. Indeed, it was almost two thousand years before Copernicus was able to provide a convincing alternative.&lt;/p&gt;
&lt;h3&gt;Ptolemy&amp;#8217;s Great Design Failure&lt;/h3&gt;
&lt;p&gt;As people began to make better and better observations of the motions of the various heavenly bodies, they began to notice that their movements were often far more complex than the Ptolemaic system could allow. The planets were particularly troublesome in this regard.&lt;/p&gt;
&lt;p&gt;The logical step when a hypothesis no longer fits with observation is to reconsider that hypothesis and possibly discard it in place of a more fitting candidate. This is precisely what did not happen when Ptolemy set out to catalog the arrangements and movements of the celestial spheres.&lt;/p&gt;
&lt;p&gt;What he did instead was add smaller circles that the planets move in, and then have these circles move on top of their orbital circles. These circles on top of circles &amp;#8211; or &lt;em class="standard" lang="la"&gt;epicycles&lt;/em&gt; &amp;#8211; form the basis of Ptolemy&amp;#8217;s new and &amp;#8220;improved&amp;#8221; geocentric model.&lt;/p&gt;
&lt;p&gt;Ptolemy&amp;#8217;s greatest mistake was not made in adopting the geocentric model in the first place. It was made in not abandoning it when it no longer fit observed fact. Rather than throw out his bad design, he added more and more layers of bad design to try to fit the new observations.&lt;/p&gt;
&lt;h3&gt;Copernicus&amp;#8217;s Great Refactor&lt;/h3&gt;
&lt;p&gt;This process of adding more and more complexity onto complexity continued through iteration after iteration for almost two thousand years until Copernicus stepped in. He fixed the bad design at the root of the ridiculously complex and unwieldy Ptolemaic system by putting the Sun at the center. This simple change had a profoundly simplifying effect on our understanding of the motion of the planets and other heavenly bodies.&lt;/p&gt;
&lt;p&gt;Copernicus&amp;#8217;s heliocentric model is in retrospect a rather simple and obvious paradigm shift. Nevertheless, it marked the start of the Scientific Revolution and is often regarded as the starting point of modern astronomy.&lt;/p&gt;
&lt;h3 id="loser"&gt;Copernicus on Software Development&lt;/h3&gt;
&lt;p&gt;What does all of this mean for software developers? It means that if your system is built on a bad design, trying to accomodate that problem will only lead you to add more and more levels of bad design. Eventually the whole system will come crashing down under the weight of this accumulated technical debt.&lt;/p&gt;
&lt;p&gt;This process of iteratively adding layers of complexity and bad design to attempt to shore up a faulty assumption or hopelessly flawed abstraction is called &lt;a href="http://c2.com/cgi/wiki?AddingEpicycles"&gt;Adding Epicycles&lt;/a&gt; in honor of Ptolemy and his great design failure. The right thing to do is to follow Copernicus&amp;#8217;s lead and correct the faulty assumption or poor abstraction that is at the heart of your design failure. The sooner you do this, the sooner you can start simplifying your code.&lt;/p&gt;
&lt;p&gt;Correcting a critical design flaw will often cause these layers of circle upon circle upon preposterous circle of complexty to vanish, leaving your code clean and clear and simple. Just try not to anger the Pope.&lt;/p&gt;</content>
  </entry>
  
</feed>
