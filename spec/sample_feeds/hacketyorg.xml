<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en" xml:base="http://hackety.org/index.atom">
    <title>hackety org</title>
    <link href="http://hackety.org" rel="alternate" type="text/html" />
    
    <updated>2009-01-18T09:44:50Z</updated>
    <subtitle>filling your pockets &amp; hat with code</subtitle>
    <id>tag:hackety.org,2009:blog</id>
    <generator uri="http://hobix.com/" version="0.5">Hobix</generator>
    <rights>None</rights>
<link rel="self" href="http://feeds.feedburner.com/HacketyOrg" type="application/atom+xml" /><feedburner:browserFriendly></feedburner:browserFriendly><entry xml:base="/2008/12/06/insideShoooesTwooo.html"><title xml:space="preserve">Inside Shoes 2</title><link href="/2008/12/06/insideShoooesTwooo.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FinsideShoooesTwooo</id><published xml:space="preserve">2008-12-06T07:59:19Z</published><updated xml:space="preserve">2008-12-06T07:59:19Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;The second &amp;#8220;stable&amp;#8221; release of Shoes has flown. We still have a lot to do. But, hey. It&amp;#8217;s happening, right?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://shoooes.net/about/raisins/"&gt;&lt;img src="http://shoooes.net/images/shoes-splash.png" class="c" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time I have some detailed &lt;a href="http://shoooes.net/about/raisins/"&gt;release notes&lt;/a&gt;, with screenshots and code fragments to help sort it all out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://shoooes.net/about/raisins/"&gt;Inside Shoes 2&lt;/a&gt;: The second release of Shoes (called &amp;#8220;Raisins&amp;#8221; by many) is a culmination of a year of feature-filled additions to the first, experimental release of Shoes (titled &amp;#8220;Curious&amp;#8221;.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This release adds a built-in manual, an error console, RubyGems integration, simple asynchronous downloads, an in-memory and database-backed image cache, support for external fonts, and, most prominently, its own unique library for packaging apps into little executables. OS X support is significantly better, as we switched from Carbon to Cocoa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A lot of these features were fleshed out here on the blog, with your responses proving very so very valuable indeedy.&lt;/p&gt;
&lt;p&gt;So, thanks for following along.  Shoes 3 (&amp;quot;Policeman&amp;quot;) will come around in, oh, January, I&amp;#8217;d hazard.&lt;/p&gt;</content></entry><entry xml:base="/2008/12/04/theFrustratingMagicalAspect.html"><title xml:space="preserve">The Frustrating Magical Aspect</title><link href="/2008/12/04/theFrustratingMagicalAspect.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FtheFrustratingMagicalAspect</id><published xml:space="preserve">2008-12-04T17:29:33Z</published><updated xml:space="preserve">2008-12-04T17:29:33Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;&lt;img src="http://hackety.org/images/rxvg-2.png" class="r" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://xrvg.rubyforge.org/XRVGPhilosophy.html"&gt;Julien Léonard&lt;/a&gt;: Actually, a graphic is foremost a composition of basic shapes and color. It is not their absolute values (that is absolute spatial and color coordinates) but their relations that matters. This is even more true because our visual perceptive chain processes its inputs in a relative way, as paradoxical visual games highlight it.&lt;/p&gt;
&lt;/blockquote&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;While plundering around in the NodeBox forums, I happened upon a very stirring library for creating &lt;span class="caps"&gt;SVG&lt;/span&gt; drawings in Ruby. Goes by the name of &lt;a href="http://xrvg.rubyforge.org/"&gt;&lt;span class="caps"&gt;XRVG&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/rxvg-1.png" class="lb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let me give you an idea of the mind at work behind this. &lt;span class="caps"&gt;XRVG&lt;/span&gt; is a response to &amp;#8220;the frustrating magical aspect of generative fractals like the Mandelbrot set&amp;#8221; and, perhaps even moreso, &amp;#8220;the hermetique aspect of the dominant graphics programming toolkits notation.&amp;#8221; You get the sense this fellow&amp;#8217;s trying to work out new ways to express shapes, particularly generative shapes like fractals.&lt;/p&gt;
&lt;p&gt;And, for further study, I highly recommend the author&amp;#8217;s &lt;a href="http://www.fractalyze.blogspot.com/"&gt;blog of fractals&lt;/a&gt;, which he has filled with nearly 200 samples throughout the year.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Toward the middle of the &lt;a href="http://xrvg.rubyforge.org/XRVGPhilosophy.html"&gt;philosophy&lt;/a&gt; page, XRVG&amp;#8217;s author Julien Léonard goes into a very compelling rationale for why &lt;span class="caps"&gt;XRVG&lt;/span&gt; strays from using coordinate systems. I&amp;#8217;m quoting liberally from this, because it&amp;#8217;s really fantastic stuff that speaks well on behalf of context-free art kits.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/rxvg-2.png" class="r" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nearly every programming toolkit that you may find, in any programming language, instanciates shapes with absolute geometrical coordinates. What that means is that if you want to do graphics programming with them, you rapidly get lost in a list of basic drawing primitives with lots of numbers, without being able to recover the abstract compositional content of the graphic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually, a graphic is foremost a composition of basic shapes and color. It is not their absolute values (that is absolute spatial and color coordinates) but their relations that matters. This is even more true because our visual perceptive chain processes its inputs in a relative way, as paradoxical visual games highlight it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As a consequence, &lt;span class="caps"&gt;XRVG&lt;/span&gt; strives to get rid of these absolutes, by using shapes and functions as numerical patterns to compute shapes and composition. Thus, if you want to draw five circles in a regular way, you must be able to do it without using trigonometric formulae to figure out where these circles have to be drawn. Instead, you just need to use a first circle and &amp;#8220;sample&amp;#8221; it five times to have subcircle centers.&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry xml:base="/2008/11/25/sevenYearsLaterProcessingLeavesBeta.html"><title xml:space="preserve">Seven Years Later, Proce55ing Leaves Beta!</title><link href="/2008/11/25/sevenYearsLaterProcessingLeavesBeta.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FsevenYearsLaterProcessingLeavesBeta</id><published xml:space="preserve">2008-11-25T07:20:11Z</published><updated xml:space="preserve">2008-11-25T07:20:11Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.shiffman.net/2008/11/25/processing-10-launch/"&gt;Daniel Shiffman&lt;/a&gt;: At New York University&amp;#8217;s graduate &lt;span class="caps"&gt;ITP&lt;/span&gt; program, Processing is taught alongside its sister project Arduino and &lt;span class="caps"&gt;PHP&lt;/span&gt; as part of the foundation course for 100 incoming students each year. At &lt;span class="caps"&gt;UCLA&lt;/span&gt;, undergraduates in the Design | Media Arts program use Processing to learn the concepts and skills needed to imagine the next generation of web sites and video games. At Lincoln Public Schools in Nebraska and the Phoenix Country Day School in Arizona, middle school teachers are experimenting with Processing to supplement traditional algebra and geometry classes.&lt;/p&gt;
&lt;/blockquote&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;That&amp;#8217;s right. &lt;a href="http://www.processing.org/about/processing-1.0.zip"&gt;1.0.&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.processing.org/"&gt;Processing.org&lt;/a&gt;: The most important aspect of this release is its stability. However, we have added many new features during the last few months. They include a new optimized 2D graphics engine, better integration for working with vector files, and the ability to write tools to enhance the development environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/1747316"&gt;&lt;img src="http://hackety.org/images/processing1.jpg" class="rb" title="Metamorphosis by Glen Marshall" alt="Metamorphosis by Glen Marshall" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What a great year for Processing. It&amp;#8217;s really poised to supplant Flash as the center of the art hacking kingdom and has influenced an avalanche of colorful software. Particularly when you think of the really successful offshoots that have surrounded it, such as Processing.js and Arduino.&lt;/p&gt;
&lt;p&gt;As it&amp;#8217;s picked up speed, it&amp;#8217;s left in its wake a fine pile of code-made &lt;a href="http://casualdata.com/newsknitter/"&gt;clothing&lt;/a&gt;, &lt;a href="http://www.vimeo.com/1994927"&gt;music videos&lt;/a&gt;, &lt;a href="http://www.worthersoriginal.com/viki/#page=shadowmonsters"&gt;theatrics&lt;/a&gt; and &lt;a href="http://rmx.cz/monsters/"&gt;flippant things&lt;/a&gt; aplenty. For pleasure and for break time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.shiffman.net/2008/11/25/processing-10-launch/"&gt;Daniel Shiffman&lt;/a&gt;: At New York University&amp;#8217;s graduate &lt;span class="caps"&gt;ITP&lt;/span&gt; program, Processing is taught alongside its sister project Arduino and &lt;span class="caps"&gt;PHP&lt;/span&gt; as part of the foundation course for 100 incoming students each year. At &lt;span class="caps"&gt;UCLA&lt;/span&gt;, undergraduates in the Design | Media Arts program use Processing to learn the concepts and skills needed to imagine the next generation of web sites and video games. At Lincoln Public Schools in Nebraska and the Phoenix Country Day School in Arizona, middle school teachers are experimenting with Processing to supplement traditional algebra and geometry classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As Dan&amp;#8217;s post goes into, it&amp;#8217;s not just the popularity of Processing that is so exciting. It&amp;#8217;s one thing for a language to find popularity in the cubicles and server rooms. This is a toolkit that is fighting for legitimacy in classrooms, in the editing rooms, on the dance floors and in basements.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s almost like Processing is paving a new road for creative hackers that don&amp;#8217;t go for point-and-click and Flash&amp;#8217;s deeply nested timeline. Who are, let&amp;#8217;s just say, smarter than that. And, I mean, beyond that, Processing is open source. You can extend it into new territory.&lt;/p&gt;
&lt;p&gt;Huge congratulations to Ben Fry, Casey Reas and the rest of the people who made this happen.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;By the way, I&amp;#8217;ve also heard that Dan Shiffman&amp;#8217;s new book is sensational. I&amp;#8217;m sorry to say that Ira Greenberg&amp;#8217;s book troubled me with its extreme length and textbook pace. Maybe it works okay in a class room. I&amp;#8217;ve always found the online reference to be very good.&lt;/p&gt;
&lt;p&gt;Anyone out there actually read &lt;a href="http://www.learningprocessing.com/"&gt;Learning Processing&lt;/a&gt;, yet?&lt;/p&gt;</content></entry><entry xml:base="/2008/11/22/runningHot.html"><title xml:space="preserve">Running Hot</title><link href="/2008/11/22/runningHot.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FrunningHot</id><published xml:space="preserve">2008-11-22T16:38:58Z</published><updated xml:space="preserve">2008-11-22T16:38:58Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;Yes-s-s, Zed takes me on! Here&amp;#8217;s a good part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.zedshaw.com/blog/2008-11-21.html"&gt;Zed Shaw&lt;/a&gt;: Why actually blessed me with his presence during one of my hacking sessions and made me feel smarter by association. I showed him Ragel (which he used to write Hpricot), and showed him some vim tricks, and he talked to Obie. &lt;ins&gt;It was great just having him warming the air near me.&lt;/ins&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;Yes-s-s, Zed takes me on! Here&amp;#8217;s a good part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.zedshaw.com/blog/2008-11-21.html"&gt;Zed Shaw&lt;/a&gt;: Why actually blessed me with his presence during one of my hacking sessions and made me feel smarter by association. I showed him Ragel (which he used to write Hpricot), and showed him some vim tricks, and he talked to Obie. &lt;ins&gt;It was great just having him warming the air near me.&lt;/ins&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My coils tend to run &lt;span class="caps"&gt;VERY&lt;/span&gt; &lt;span class="caps"&gt;HOT&lt;/span&gt;. And I fart a lot.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;He makes a very sore point about Shoes &amp;#8220;taking that wonderfully stable Ruby interpreter his friend Matz wrote to the edges of all that is possible in computing.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Ouch, that smarts. And it&amp;#8217;s totally true. I&amp;#8217;ve had a rough time getting Ruby 1.8 to work out. I don&amp;#8217;t really have any defense. I don&amp;#8217;t see Shoes as this incredible answer to everything. It&amp;#8217;s a bit hokey and it&amp;#8217;s a bit trite.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/319615"&gt;Alex Fenton&lt;/a&gt;: I admire Shoes but it&amp;#8217;s not the best choice for much desktop application programming. It&amp;#8217;s not going to &amp;#8220;open up a new world&amp;#8221;&amp;#8230; naming Shoes a &amp;#8216;toy&amp;#8217; is not a slur; play is important in life. It&amp;#8217;s an influential experiment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree with this! It&amp;#8217;s a toy, it&amp;#8217;s for fun and I trust that &lt;a href="http://hackety.org/press/nks-3.html"&gt;nobody&lt;/a&gt; takes it very seriously.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Learning Ragel and Lemon at the feet of Zed Shaw was a classic time, for sure.&lt;br /&gt;
Tell me more about this passive aggressive thing, though. Do I have to have a deep hidden agenda, a long-standing personal beef or an ulterior motive in order to simply call a guy Hannah Montana?&lt;/p&gt;</content></entry><entry xml:base="/2008/11/21/aCostlyParade.html"><title xml:space="preserve">A Costly Parade</title><link href="/2008/11/21/aCostlyParade.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FaCostlyParade</id><published xml:space="preserve">2008-11-21T07:59:50Z</published><updated xml:space="preserve">2008-11-21T07:59:50Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://adam.blog.heroku.com/past/2008/4/29/what_defines_the_ruby_community"&gt;Adam Wiggins&lt;/a&gt;: First, Rubyists love elegance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://storytotell.org/articles/2008/11/20/what-defines-the-ruby-community"&gt;Daniel Lyons&lt;/a&gt;: Every programmer worth a damn thinks they love elegance.&lt;/p&gt;
&lt;/blockquote&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://adam.blog.heroku.com/past/2008/4/29/what_defines_the_ruby_community"&gt;Adam Wiggins&lt;/a&gt;: First, Rubyists love elegance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://storytotell.org/articles/2008/11/20/what-defines-the-ruby-community"&gt;Daniel Lyons&lt;/a&gt;: Every programmer worth a damn thinks they love elegance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rubyists love life. Boy, I tell you. They love humans. They love cars!! They looooooove dishes of real, actual food. You don&amp;#8217;t even know. Airplanes in mid-air, refueling? They love that!&lt;/p&gt;
&lt;p&gt;But, more importantly, Rubyists love pups. Baby dogs, man! Ever heard of em? Little dogs rock!!&lt;/p&gt;
&lt;p&gt;Okay, wait, no. No, please hold, I can&amp;#8217;t seem to find a citation for that. I mean, speaking for myself, I definitely like dogs. And I&amp;#8217;ve heard tell of dogs in other places&amp;#8230; Okay, well, how about, yeah, yeah here, let&amp;#8217;s say a tentative &lt;em&gt;yellow light&lt;/em&gt; interest in dogs. And we&amp;#8217;ll green light that puppy if the blogosphere goes all taggy on us and there&amp;#8217;s like a thousand delicious tags on this post that say &lt;code&gt;rooby-roo&lt;/code&gt;!&lt;/p&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://richkilmer.blogs.com/ether/2008/10/striving-for-civility-in-the-ruby-and-rails-community.html"&gt;Rich Kilmer&lt;/a&gt;: I propose that we demand civility in the Ruby and Rails community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://richkilmer.blogs.com/ether/2008/10/striving-for-civility-in-the-ruby-and-rails-community.html#comment-137201501"&gt;Matt Todd&lt;/a&gt;: When we&amp;#8217;re fucking upset, we&amp;#8217;re fucking upset!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a neighbor who demands peace and quiet. He&amp;#8217;d kill all of us if it would bring some sanity. He&amp;#8217;s a brutal peacemaker that one.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s smart, though. Really, truly, war is the only way to achieve peace. You have to get people totally sick of violence.&lt;/p&gt;
&lt;p&gt;So, without further ceremony: I demand civility. But, boy, oh hot snacks, the lawlessness of these people is amazing! It&amp;#8217;s like when you&amp;#8217;d play army men as kids. You&amp;#8217;d go, &amp;#8220;You&amp;#8217;re dead! I got you!&amp;#8221; And the other kid&amp;#8217;d go, &amp;#8220;No, my guy can fly!&amp;#8221; And you&amp;#8217;d go, &amp;#8220;No, who says?&amp;#8221; And his guy is already fortifying a whole new pavilion way on top of the bookshelf.&lt;/p&gt;
&lt;p&gt;Please. Stay on the ground. This is a decorated army veteran who fought for his country. And, no, he will not have his medals tarnished by allowing himself to get caught in that cunning old web of deceit that &lt;em&gt;is&lt;/em&gt; the so-called Pretending To Fly.&lt;/p&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.martinfowler.com/bliki/RubyPeople.html"&gt;Martin Fowler&lt;/a&gt;: I have noticed that that ruby community is much nicer than most on-line communities I&amp;#8217;ve seen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://zedshaw.com/blog/2008-11-13.html"&gt;Zed Shaw&lt;/a&gt;: I&amp;#8217;ve pulled battered women out of abusive relationships. Helped kids who were being beaten by bullies. I got no problem stepping up and protecting the weaker ones in our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s like Jesus. Except Jesus never had the forthrightness and temerity to actually kick a guy in the jugular if he had to.&lt;/p&gt;
&lt;p&gt;Zed is Gandhi. Zed is Che Guevara. And Zed is Morpheus. But, also, Zed is Daniel Larusso. Immediately following that, he&amp;#8217;s Slim Shady. Ergo, Zed is Hannah Montana.&lt;/p&gt;
&lt;p&gt;Cool, we&amp;#8217;re making progress.&lt;/p&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://twitter.com/d2h/status/1015351238"&gt;David Heinemeier Hansson&lt;/a&gt;: Let me take out one of my favorite words for the occasion: Who the fuck cares? Just put it on ignore, like you would any troll fest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rubyists live by this creed: DO &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FEED&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;TROLLS&lt;/span&gt;. Trolls are&amp;#8230; how you say&amp;#8230; unsavory people? Rubyists are &lt;span class="caps"&gt;VERY&lt;/span&gt; nice people. Always gladhanding and passing around the Lifesavers. Here, have one. We know other nice people when we see them. Nice people talk to each other. It&amp;#8217;s way addictive. It&amp;#8217;s great! (It&amp;#8217;s completely social.)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Let me put it this way. Suppose you&amp;#8217;ve got Zed Shaw. No, wait, say you&amp;#8217;ve got &amp;#8220;a person.&amp;#8221; (We&amp;#8217;ll call this person &amp;#8220;Hannah Montana&amp;#8221; for the sake of this exercise.) And you look outside and this young teen sensation is yelling, throwing darts at your house and peeing in your mailbox. For reals. You can see it all. Your mailbox is soaked. Defiled. The flag is up.&lt;/p&gt;
&lt;p&gt;Now, stop and think about this. This is a very tough situation. This young lady has written one of &lt;span class="caps"&gt;THE&lt;/span&gt; premiere web servers in the whole wide world. Totally, insanely &lt;span class="caps"&gt;RFC&lt;/span&gt; complaint. They give it away on the street, but everyone knows its secretly worth like a thousand dollars. And there was nothing in that web server that hinted to these postal urinations.&lt;/p&gt;
&lt;p&gt;Sacrebleu! Ah, the life and times of a Ruby guy. What is one to do? All you really can do is put one foot in front of the other. You&amp;#8217;ve got to go to work. You&amp;#8217;ve got gems to install. You&amp;#8217;ve got agility to showcase. Sure, you&amp;#8217;ve got some soiled envelopes open.&lt;/p&gt;
&lt;p&gt;But, hey, you didn&amp;#8217;t feed the trolls. Ten points to Gryffindor.&lt;/p&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/19905"&gt;matz&lt;/a&gt;: I am afraid that it&amp;#8217;s only in Japanese.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And, you know, I really regret the whole Hpricot vs. Nokogiri thing from a few weeks back. It was for fun, but I mean, come on, there&amp;#8217;s no question that LibXML is a better, faster &lt;span class="caps"&gt;HTML&lt;/span&gt; parser. I&amp;#8217;m not sure what I&amp;#8217;m doing with Hpricot. It&amp;#8217;s just a doodad. I mostly just like the name is all. Am I terrible person?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I once sat on the advisory board of DO &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FEED&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;TROLLS&lt;/span&gt;.&lt;/em&gt; (Translation: I &lt;span class="caps"&gt;KNOW&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;SILENT&lt;/span&gt; &lt;span class="caps"&gt;TREATMENT&lt;/span&gt; I &lt;span class="caps"&gt;LEARNED&lt;/span&gt; IT &lt;span class="caps"&gt;MYSELF&lt;/span&gt;. Doing business as: &lt;span class="caps"&gt;PARDON&lt;/span&gt; ME IF I &lt;span class="caps"&gt;SEEM&lt;/span&gt; &lt;span class="caps"&gt;TOTALLY&lt;/span&gt; &lt;span class="caps"&gt;ALOOF&lt;/span&gt;.) However, I resigned when Sally Struthers sent me a postcard exposing the severe malnutrition of these poor, poor virtual dwarves. It just rent my heart in twixt.&lt;/p&gt;
&lt;p&gt;Now I send two thoughtful rebuttals a week to a troll in The Sheeple&amp;#8217;s Republic of Reddit, always sure to include a few deliberate typos. Please consider contributing. Now is the time. Only you. Now?&lt;/p&gt;
&lt;p&gt;So, look, Ruby is a crazy fun language (for some) and perhaps nothing more. You can get away with things that are heresy elsewhere. Maybe it&amp;#8217;s an irresponsible language. A flimsy language. I don&amp;#8217;t know, sheriff. The business world has its ideas about perfection. Maybe Ruby doesn&amp;#8217;t take itself as seriously as the business world does.&lt;/p&gt;
&lt;p&gt;If, after all these years, Ruby isn&amp;#8217;t going to take itself seriously, then should I bother taking myself seriously either?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: the above is a paid advertisement for my Pong clone.&lt;/em&gt;&lt;/p&gt;
&lt;script src="http://gist.github.com/26431.js"&gt;&lt;/script&gt;&lt;p&gt;Based on a &lt;a href="http://billmill.org/pong.html"&gt;true story&lt;/a&gt;.&lt;/p&gt;</content></entry><entry xml:base="/2008/11/17/SomethingLikePyargParseForRuby.html"><title xml:space="preserve">Something Like PyArg_ParseTuple For Ruby</title><link href="/2008/11/17/SomethingLikePyargParseForRuby.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FSomethingLikePyargParseForRuby</id><published xml:space="preserve">2008-11-17T23:58:36Z</published><updated xml:space="preserve">2008-11-17T23:58:36Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">
&lt;pre&gt;&lt;code class="c"&gt; rb_arg_list args;
 /* "k" means Class, "h" means Hash */
 switch (rb_parse_args(argc, argv, "kh,h,", &amp;args))
 {
   case 1: /* "kh" - style(Link, :background =&gt; white) */ break;
   case 2: /* "h"  - style(:width =&gt; "100%") */ break;
   case 3: /* ""   - style() =&gt; {...hash of styles...} */ break;
 }
&lt;/code&gt;&lt;/pre&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;Calling into Ruby from C is great, but I&amp;#8217;ve noticed that I spend a lot of time casting arguments coming into each function.&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt; rb_scan_args(argc, argv, "11", &amp;port, &amp;opts);
 if (rb_respond_to(port, rb_intern("to_str"))
   StringValue(port);
 else if (!rb_respond_to(port, rb_intern("read")))
   rb_raise(rb_eArgError, "a String or IO object only, please");
 if (TYPE(opts) != T_HASH &amp;&amp; !NIL_P(opts))
   rb_raise(rb_eArgError, "options must be a hash");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ruby is dynamically typed, but object types are a bit more reified in C. The &lt;span class="caps"&gt;TYPE&lt;/span&gt; macro can check an object to see if it&amp;#8217;s a T_FIXNUM, T_HASH, T_STRING, T_ICLASS, etc. You can duck type all you want, but when you&amp;#8217;re inside an extension, you&amp;#8217;ll need to know the type before calling &lt;code&gt;rb_str_cat&lt;/code&gt; or &lt;code&gt;rb_hash_aref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;StringValue&lt;/code&gt; does this, it&amp;#8217;ll cast using &lt;code&gt;to_str&lt;/code&gt; and then make sure you&amp;#8217;ve actually a real T_STRING.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I&amp;#8217;m disappointed with &lt;code&gt;rb_scan_args&lt;/code&gt;. It&amp;#8217;s wimpy. The function signatures it uses aren&amp;#8217;t very expressive. It&amp;#8217;s basically describing arity and that&amp;#8217;s it.&lt;/p&gt;
&lt;p&gt;One thing I like better in Python&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt;, though, is the &lt;a href="http://docs.python.org/c-api/arg.html"&gt;PyArg_ParseTuple&lt;/a&gt; function and its cousins.&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt; const char *file;
 const char *mode = "r";
 int bufsize = 0;
 ok = PyArg_ParseTuple(args, "s|si", &amp;file, &amp;mode, &amp;bufsize);
 /* A string, and optionally another string and an integer */
 /* Possible Python calls:
    f('spam')
    f('spam', 'w')
    f('spam', 'wb', 100000) */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function signature is more expressive here (&lt;code&gt;"s|si"&lt;/code&gt;), indicating which types are allowed. You don&amp;#8217;t have to check the types individually, nor do you need to throw individual exceptions.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Here&amp;#8217;s &lt;a href="http://github.com/why/rb_parse_args"&gt;an equivalent&lt;/a&gt; I&amp;#8217;m working on for Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt; rb_arg_list args;
 rb_parse_args(argc, argv, "s|h,-|h", &amp;args);
 /* a string and optionally a hash OR an IO and an optional hash */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;rb_parse_args&lt;/code&gt; function returns the number of the match. If the first signature (&lt;code&gt;"s|h"&lt;/code&gt;) is matched, you get 1. If the second signature is matched, you get 2.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m planting this in a switch statement when I want to overload a method.&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt; rb_arg_list args;
 /* "k" means Class, "h" means Hash */
 switch (rb_parse_args(argc, argv, "kh,h,", &amp;args))
 {
   case 1: /* "kh" - style(Link, :background =&gt; white) */ break;
   case 2: /* "h"  - style(:width =&gt; "100%") */ break;
   case 3: /* ""   - style() =&gt; {...hash of styles...} */ break;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is saving me some tedium. In typical shoddy form, my error messages blow. I am undisciplined&amp;#8217;s middle name.&lt;/p&gt;
&lt;p&gt;Ah, how good it feels to be inspired by Python. A bit good, a bit slimey. I&amp;#8217;m like Joe Lieberman, guys.&lt;/p&gt;</content></entry><entry xml:base="/2008/11/03/hpricotStrikesBack.html"><title xml:space="preserve">Hpricot Strikes Back</title><link href="/2008/11/03/hpricotStrikesBack.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FhpricotStrikesBack</id><published xml:space="preserve">2008-11-03T19:13:21Z</published><updated xml:space="preserve">2008-11-03T19:13:21Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;This fruit is tiny, shiny and can be spit-polished in a single weekend.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/hpricot.png" class="c" alt="" /&gt;&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;My my. How the sensationalist press does carry on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.rubyinside.com/nokogiri-ruby-html-parser-and-xml-parser-1288.html"&gt;Peter Cooper&lt;/a&gt;: On an &lt;a href="http://gist.github.com/18533"&gt;Hpricot vs Nokogiri benchmark&lt;/a&gt;, Nokogiri clocked in at 7 times faster at initially loading an &lt;span class="caps"&gt;XML&lt;/span&gt; document, 5 times faster at searching for content based on an XPath, and 1.62 times faster at searching for content via a &lt;span class="caps"&gt;CSS&lt;/span&gt;-based search. These are impressive results, since Hpricot was previously considered to be quite speedy itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I feel just awful (just &lt;em&gt;supreeeeemely&lt;/em&gt; lousy) that these benchmarks were only good for four days.  Nokogiri is no longer seven times faster than Hpricot.&lt;/p&gt;
&lt;p&gt;And that means these guys have to go back through all their docs and promotional materials and&amp;#8230; wow, what a job it&amp;#8217;s going be.  It&amp;#8217;s just a tough situation, folks.  My heart goes out to all the fine young lads who worked so hard to bring Hpricot down, only to discover, &lt;em&gt;hey, boss, there she goes!&lt;/em&gt; Hpricot is strolling right along the boardwalk, smiling, waving, checking its watch, fit as a fiddle.&lt;/p&gt;
&lt;p&gt;This fruit is tiny, shiny and can be spit-polished in a single weekend.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/hpricot.png" class="c" alt="" /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Before we get to the news&amp;#8230; Here&amp;#8217;s the &lt;span class="caps"&gt;XML&lt;/span&gt; those Nokogiri benchmarks are based on: &lt;a href="http://static.bezurk.com/fragments/wikitravel/sin.xml"&gt;sin.xml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Someone help me here.  Am I reading that right?  There are six &lt;span class="caps"&gt;XML&lt;/span&gt; tags in that whole file.  Is this for reals?  Six, right?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;location&amp;gt;
&amp;lt;refUrl&amp;gt;http://wikitravel.org/en/Singapore&amp;lt;/refUrl&amp;gt;
  &amp;lt;info&amp;gt;
    &amp;amp;lt;b&amp;amp;gt;Singapore&amp;amp;lt;/b&amp;amp;gt; is an island-state in Southeast
    Asia, connected by bridges to Malaysia. Founded as a British trading colony 
    in 1819, since independence it has become one of the &amp;amp;lt;b&amp;amp;gt;world's 
    most prosperous countries&amp;amp;lt;/b&amp;amp;gt; and sports the world's busiest 
    port.   Combining the skyscrapers and subways of a &amp;amp;lt;b&amp;amp;gt;modern, 
    affluent city&amp;amp;lt;/b&amp;amp;gt; with a medley of Chinese, Indian and Malay 
    influences and a &amp;amp;lt;b&amp;amp;gt;tropical climate&amp;amp;lt;/b&amp;amp;gt;, with 
    tasty food, good shopping and a vibrant nightlife scene, this Garden City 
    makes a great stopover or springboard into the region.
  &amp;lt;/info&amp;gt;
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This benchmark was linked all over the place last week.  Does anyone look at this stuff?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Okay, great.  Let&amp;#8217;s battle!&lt;/p&gt;
&lt;p&gt;Time for a new benchmark based on &lt;code&gt;timeline.xml&lt;/code&gt; from John Nunemaker&amp;#8217;s &lt;a href="http://railstips.org/2008/8/12/parsing-xml-with-ruby"&gt;libxml vs. hpricot&lt;/a&gt; stuff.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://gist.github.com/21936"&gt;gist: 21936&lt;/a&gt;:&lt;pre&gt;&lt;code&gt;    user system total real
hpricot:doc 2.630000 0.030000 2.660000 ( 2.655527)
hpricot2:doc 0.340000 0.000000 0.340000 ( 0.349340)
nokogiri:doc 0.600000 0.020000 0.620000 ( 0.611570)
    user system total real
hpricot:xpath 1.910000 0.000000 1.910000 ( 1.911496)
hpricot2:xpath 0.890000 0.010000 0.900000 ( 0.897664)
nokogiri:xpath 0.060000 0.000000 0.060000 ( 0.061546)
    user system total real
hpricot:css 1.880000 0.000000 1.880000 ( 1.889301)
hpricot2:css 0.680000 0.010000 0.690000 ( 0.677072)
nokogiri:cssbenchmark.rb:77: [BUG] Bus Error
ruby 1.8.6 (2007-09-24) [i686-darwin8.11.1]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try it yourself with the &lt;a href="http://hackety.org/dist/hpricot-0.6.170.gem"&gt;hpricot-0.6.170 gem&lt;/a&gt;, which includes source code, so you&amp;#8217;ll need a compiler.&lt;/p&gt;
&lt;p&gt;This is only a rewrite of the parser, not the Ragel lexer.  I&amp;#8217;m actually surprised the XPath and &lt;span class="caps"&gt;CSS&lt;/span&gt; parser numbers are cut in half, basically, just by changing my object structures.  I&amp;#8217;ve just finished a new Ragel-based &lt;span class="caps"&gt;CSS&lt;/span&gt; selector parser which should cause those searches to drop dramatically.  I am considering dropping XPath support this time.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t got the new parser totally switched in yet.  Right now you call &lt;code&gt;Hpricot.scan&lt;/code&gt; without a block.  Once I&amp;#8217;m finished testing the two side-by-side, I&amp;#8217;ll swap in the new parser and release 0.7.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I feel some regret posting a benchmark at all, because I don&amp;#8217;t want to detract from my main point.&lt;/p&gt;
&lt;p&gt;Someday, Nokogiri may be seven times faster than Hpricot.  Someday it may be twelve times slower.  In fact, on one single day, it may be five time faster, then fourteen times slower, then eleven-point-three times faster!&lt;/p&gt;
&lt;p&gt;But Nokogiri has no fuzzy fruited emblem.  And it does not dwell in an orchard of markup.  (Such a very yummy orchard, you&amp;#8217;d never believe!)  I can put those statements in my promos and newsreels and they&amp;#8217;ll never change.&lt;/p&gt;</content></entry><entry xml:base="/2008/10/06/mixingOurWayOutOfInstanceEval.html"><title xml:space="preserve">Mixing Our Way Out Of Instance Eval?</title><link href="/2008/10/06/mixingOurWayOutOfInstanceEval.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FmixingOurWayOutOfInstanceEval</id><published xml:space="preserve">2008-10-06T17:36:39Z</published><updated xml:space="preserve">2008-10-06T17:36:39Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">
&lt;pre&gt;&lt;code class="rb"&gt; require 'mixico'

 def Builder.capture &amp;blk
   mix_eval(self, &amp;blk)
 end
&lt;/code&gt;&lt;/pre&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;The lynchpin of Ruby&amp;#8217;s pidgins and so-called DSLs (Douchebaggery as a Second Language) is the method known as &lt;code&gt;instance_eval&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From an article titled &lt;a href="http://blog.8thlight.com/articles/2007/05/20/ruby-dls-blocks"&gt;Ruby &lt;span class="caps"&gt;DSL&lt;/span&gt; Blocks&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; def self.order(&amp;block)
   order = Order.new
   order.&lt;strong&gt;instance_eval&lt;/strong&gt;(&amp;block)
   return order.drinks
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And another one &lt;a href="http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html"&gt;Implementing an internal &lt;span class="caps"&gt;DSL&lt;/span&gt; in Ruby&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; def Expectations(&amp;block)
   Expectations::Suite.instance.&lt;strong&gt;instance_eval&lt;/strong&gt;(&amp;block)
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From &lt;a href="http://www.artima.com/rubycs/articles/ruby_as_dsl2.html"&gt;Creating DSLs with Ruby&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; class MyDSL
   def define_parameters
     yield self
   end

   def self.load(filename)
     dsl = new
     dsl.&lt;strong&gt;instance_eval&lt;/strong&gt;(File.read(filename), filename)
     dsl
   end
 end#class MyDSL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, so good?  Most often &lt;code&gt;instance_eval&lt;/code&gt; is used, but you&amp;#8217;ll see &lt;code&gt;module_eval&lt;/code&gt;, too.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Now, the reason for this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://onestepback.org/index.cgi/Tech/Ruby/BuilderObjects.rdoc"&gt;Jim Weirich&lt;/a&gt;: Within the builder code blocks, any method call with an implicit object target needs to be sent to our builder. To achieve this, the code blocks are evaluated with instance_eval which changes the value of self to be the builder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He goes on to say why this could be troubling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is OK until you want to call a method in the calling object. Since self is no longer the calling object, you have to explicitly provide the caller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Weirich&amp;#8217;s &lt;a href="http://builder.rubyforge.org"&gt;Builder&lt;/a&gt;, he prefers to use plain blocks and hand you the variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; builder { |xm|
   xm.em("emphasized")
   xm.em { xm.b("emp &amp; bold") }
   xm.a("A Link", "href" =&gt; "http://onestepback.org")
   xm.div { xm.br }
   xm.target("name" =&gt; "compile", "option" =&gt; "fast")
   xm.instruct!
   xm.html {
     xm.head {
       xm.title("History")
     }
     xm.body {
       xm.comment! "HI"
       xm.h1("Header")
       xm.p("paragraph")
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;instance_eval&lt;/code&gt;, you&amp;#8217;d end up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; builder {
   em("emphasized")
   em { b("emp &amp; bold") }
   a("A Link", "href" =&gt; "http://onestepback.org")
   div { br }
   target("name" =&gt; "compile", "option" =&gt; "fast")
   instruct!
   html {
     head {
       title("History")
     }
     body {
       comment! "HI"
       h1("Header")
       p("paragraph")
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Builder once did use &lt;code&gt;instance_eval&lt;/code&gt;, but now offers this explanation in the docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The instance_eval implementation which forces self to refer to the message receiver as self is now obsolete. We now use normal block calls to execute the markup block. This means that all markup methods must now be explicitly send to the xml builder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rails&amp;#8217; routing stuff also prefers to &lt;a href="http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl"&gt;go without&lt;/a&gt; &lt;code&gt;instance_eval&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; ActionController::Routing::Routes.draw do |map|
   map.with_options :controller =&gt; 'blog' do |blog|
     blog.show '',  :action =&gt; 'list'
   end
   map.connect ':controller/:action/:view'
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, it probably seems like &lt;code&gt;instance_eval&lt;/code&gt; has been driven out of play by the mature libs and now only lingers in the dabbling blog posts.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I don&amp;#8217;t care about the best way to do this.  The fact is: even &amp;#8220;normal blocks&amp;#8221; are prone to bugs.  I had to fix up the Builder example above because it&amp;#8217;s wrong in &lt;a href="http://builder.rubyforge.org/classes/Builder/XmlMarkup.html"&gt;the docs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; xm.em("emphasized")             # =&gt; &lt;em&gt;emphasized&lt;/em&gt;
 xm.em { xmm.b("emp &amp; bold") }   # =&gt; &lt;em&gt;&lt;b&gt;emph &amp;amp; bold&lt;/b&gt;&lt;/em&gt;
 xm.a("A Link", "href"=&gt;"http://onestepback.org")
                                 # =&gt; &lt;a href="http://onestepback.org"&gt;A Link&lt;/a&gt;
 xm.div { br }                    # =&gt; &lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two errors in the above example.  The date on the RDoc is Sun Feb 05 23:49:01 &lt;span class="caps"&gt;EST&lt;/span&gt; 2006.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Recently I discovered another option to all of this, thanks to the work of Guy Decoux.&lt;/p&gt;
&lt;p&gt;While investigating a library Guy never released (called &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20293"&gt;prop&lt;/a&gt;,) I realized that perhaps he was on to something while fooling with mixins and the inheritance chain.&lt;/p&gt;
&lt;p&gt;Think about it: &lt;code&gt;instance_eval&lt;/code&gt; changes self, intercepts method calls and alters instance variables.  Really, all we really want to do is dispatch method calls.  As Jim Weirich says, changing self is the troubling side effect here.&lt;/p&gt;
&lt;p&gt;This is a pertinent topic.  Even today, ruby-core discusses a &lt;code&gt;with&lt;/code&gt; operator and Paul Brannan &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/19138"&gt;chimes in&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instance_eval for initialization has surprising behavior for instance variables (e.g. as in Ruby/Tk).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A method that affects only method calls and not instance variables would make this idiom more viable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&amp;#8217;t know whether that is a good thing or a bad thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again with the &lt;em&gt;good&lt;/em&gt; and &lt;em&gt;bad&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What if there was a way to temporarily add methods for the duration of a block?&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; def to_html
    Builder.capture do
      html do
       head do
         title self.friendly_title
       end
       body do
         comment! "HI"
         h1("Header")
         p("paragraph")
       end
     end
   end
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The essence of Builder.capture is to mixin a bunch of Builder methods, inject them into the block&amp;#8217;s binding.  This adds the &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;comment!&lt;/code&gt; methods into the calling self.&lt;/p&gt;
&lt;p&gt;Using a very small extension called &lt;a href="http://github.com/why/mixico"&gt;mixico&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; def Builder.capture &amp;blk
   mix_eval(self, &amp;blk)
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This extension enables and disables mixins atomically.  It is a single, quick operation to add and remove a module from the inheritance chain.  (See the mixico &lt;a href="http://github.com/why/mixico/tree/master/README"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;&lt;/a&gt; for more on this technique.)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The &lt;code&gt;mix_eval&lt;/code&gt; method code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt; class Module
   def mix_eval mod, &amp;blk
     blk.mixin mod
     blk.call
     blk.mixout mod
   end
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;mixin&lt;/code&gt; and &lt;code&gt;mixout&lt;/code&gt; methods enable and disable the Module in the block&amp;#8217;s binding.&lt;/p&gt;
&lt;p&gt;While you might be inclined to dismiss this on the grounds of it being mixin &lt;strong&gt;magic&lt;/strong&gt;, I&amp;#8217;m starting to believe that this is a notable omission from Ruby.  It&amp;#8217;s very quick and efficient to disable and enable mixins and could prove to be a very handy technique.&lt;/p&gt;
&lt;p&gt;Like open classes, however, I&amp;#8217;m afraid the timidity of the business community might label it as taboo, despite it offering great flexibility to you &amp;#8212; all of my fine, able-minded friends out there.&lt;/p&gt;</content></entry><entry xml:base="/2008/09/27/textareaResizeAndCurlyQuotesForConkeror.html"><title xml:space="preserve">Textarea Resize And Curly Quotes For Conkeror</title><link href="/2008/09/27/textareaResizeAndCurlyQuotesForConkeror.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FtextareaResizeAndCurlyQuotesForConkeror</id><published xml:space="preserve">2008-09-27T22:29:42Z</published><updated xml:space="preserve">2008-09-27T22:29:42Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">
&lt;pre&gt;&lt;code class="js"&gt; function resize_textarea_up(field) {
   var h = field.offsetHeight;
   if (h &gt; 120)
     field.style.height = (h - 60) + "px";
 }
 function resize_textarea_down(field) {
   field.style.height = (parseInt(field.offsetHeight) + 60) + "px";
 }
 interactive(
   "resize-textarea-up",
   "Resize a textarea to be smaller.",
   function (I) call_on_focused_field(I, resize_textarea_up)
 );
 interactive(
   "resize-textarea-down",
   "Resize a textarea to be taller.",
   function (I) call_on_focused_field(I, resize_textarea_down)
 );
 define_key(content_buffer_textarea_keymap, "C-up", "resize-textarea-up", $category = "Movement");
 define_key(content_buffer_textarea_keymap, "C-down", "resize-textarea-down", $category = "Movement");
&lt;/code&gt;&lt;/pre&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;People say Google Chrome is a step behind Firefox because Firefox has addons.  Well, excuse me, but Firefox was already a step behind Conkeror and Vimperator!  Making Google Chrome a whopping &lt;span class="caps"&gt;TWO&lt;/span&gt; steps behind.  (But I&amp;#8217;m sure we&amp;#8217;re all another full step behind some completely obscure browser which only runs on Plan 9 and is being ported to the Erlang VM.)&lt;/p&gt;
&lt;p&gt;Here are a few Conkeror hacks that can be easily dropped into your &lt;code&gt;~/.conkerorrc&lt;/code&gt;.  (If you need a introduction to Conkeror, see &lt;a href="http://hackety.org/2008/02/29/conkerorComesUnstuck.html"&gt;Conkeror Comes Unstuck&lt;/a&gt;.)&lt;/p&gt;
&lt;hr /&gt;


&lt;pre&gt;&lt;code class="js"&gt; function resize_textarea_up(field) {
   var h = field.offsetHeight;
   if (h &gt; 120)
     field.style.height = (h - 60) + "px";
 }
 function resize_textarea_down(field) {
   field.style.height = (parseInt(field.offsetHeight) + 60) + "px";
 }
 interactive(
   "resize-textarea-up",
   "Resize a textarea to be smaller.",
   function (I) call_on_focused_field(I, resize_textarea_up)
 );
 interactive(
   "resize-textarea-down",
   "Resize a textarea to be taller.",
   function (I) call_on_focused_field(I, resize_textarea_down)
 );
 define_key(content_buffer_textarea_keymap, "C-up", "resize-textarea-up", $category = "Movement");
 define_key(content_buffer_textarea_keymap, "C-down", "resize-textarea-down", $category = "Movement");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one enables &lt;code&gt;Ctrl-Up&lt;/code&gt; and &lt;code&gt;Ctrl-Down&lt;/code&gt; inside a textarea.  So you can stretch the box without reaching for the mouse.  How about that!&lt;/p&gt;
&lt;hr /&gt;


&lt;pre&gt;&lt;code class="js"&gt; var quotes = [["squote", "C-quote", "2018"],
 ["apostrophe", "M-quote", "2019"],
 ["lquote", "C-S-quote", "201c"],
 ["rquote", "M-S-quote", "201d"],
 ["emdash", "M--", "2014"],
 ["ellipsis", "M-.", "2026"]];
for (var i in quotes) {
  var q = quotes[i];
  eval("function curly_" + q[0] + "(field) { modify_region(field, function(str) \"\\u" + q[2] + "\" ); }");
  interactive(
    "curly-" + q[0],
    "Inserts a curly " + q[0] + " at the cursor in a textarea.",
    eval("function (I) call_on_focused_field(I, curly_" + q[0] + ")")
  );
  define_key(content_buffer_text_keymap, q[1], "curly-" + q[0], $category = "Editing");
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I find myself using more &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 characters that aren&amp;#8217;t on the keyboard.  Like these are four keybindings for curly quotes.&lt;/p&gt;
&lt;p&gt;If you hit the &lt;code&gt;Ctrl&lt;/code&gt; key and the single- or double-quote key, you&amp;#8217;ll get a left-side curl.  An &lt;code&gt;Alt&lt;/code&gt; gives a right-side curl.  There are a few dashes in there, too.  This stuff could be done in the keymaps, but I wanted to see how it could be scripted. OS X already has keymaps for these I think.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;One other thing.  If you are in a textarea and you hit &lt;code&gt;Ctrl-I&lt;/code&gt;, it&amp;#8217;ll open the textarea in an external editor.  For some reason, vim wasn&amp;#8217;t doing it for me.  Well, I had the setting wrong.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt; define_variable("editor_shell_command", "gvim -f");&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Lastly, if you&amp;#8217;re using a site that has its own keybindings (such as Try Ruby,) you can use &lt;code&gt;Ctrl-Alt-Q&lt;/code&gt; to let all keystrokes pass through.  Hit &lt;code&gt;Esc&lt;/code&gt; to give focus back to the browser.&lt;/p&gt;</content></entry><entry xml:base="/2008/09/25/legendNeverToBeSolved.html"><title xml:space="preserve">A Legend Never To Be Solved</title><link href="/2008/09/25/legendNeverToBeSolved.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FlegendNeverToBeSolved</id><published xml:space="preserve">2008-09-25T06:33:52Z</published><updated xml:space="preserve">2008-09-25T06:33:52Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;&lt;img src="http://hackety.org/images/a-note-to-pigeon.png" class="c" alt="" /&gt;&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;&lt;img src="http://hackety.org/images/a-note-to-pigeon.png" class="c" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t mean to be overly sentimental or maudlin.  Guy Decoux (pronounced &lt;em&gt;ghee de-coo&lt;/em&gt;, I believe) was a great secret among Ruby enthusiasts.  I am sad to hear that he is gone.  I dropped my glass the minute I heard.  He was fantastic.  Of his legend I will always tell.  He leaves us much to think about.&lt;/p&gt;
&lt;p&gt;He was around long before I happened upon Ruby and, man, the guy was sensationally smart.  He knew Ruby inside and out.  Really, he was fantastic with Ruby internals.  I&amp;#8217;m happy to have long employed some of his cunning code in Shoes: the &lt;code&gt;ts_each&lt;/code&gt; and &lt;code&gt;ts_funcall2&lt;/code&gt; in &lt;a href="http://github.com/why/shoes/tree/master%2Fshoes%2Fruby.c?raw=true"&gt;shoes/ruby.c&lt;/a&gt;.  He only made 19 commits to Ruby in the years 2000 to 2003, but he discovered countless bugs and you can find his ruby-core messages cited often in the ChangeLog.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;He was probably the earliest master of Ruby outside Japan.  He began study of Ruby in 1999 (&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/859"&gt;ruby-talk:859&lt;/a&gt;) and was right there at the inception of ruby-core (&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/27"&gt;ruby-core:27&lt;/a&gt;.)  Matz will be unhappy to hear of this news, since Guy had been so helpful over these last nine years.&lt;/p&gt;
&lt;p&gt;He was few on words, but not necessarily because he was poor at English.  I asked him for some pointers, long ago, when I started work on Try Ruby.  He sent back a reply that not only detailed a number of bugs he discovered, but also a postscript asking me to fix the reverse &lt;span class="caps"&gt;DNS&lt;/span&gt; for my e-mail address, attaching some lines from his mail log as proof!&lt;/p&gt;
&lt;p&gt;There I was, quite surprised to see actual words and paragraphs in his e-mail.  The real ts!  He rarely gave color commentary on his code.  He gave only transcripts of his conversations at the shell prompt with his machine called &lt;em&gt;pigeon&lt;/em&gt;.  (In previous years, sometimes it had been &lt;em&gt;svg&lt;/em&gt;.)  I thought it was funny that his transcripts always ended with a blank shell line &lt;em&gt;pigeon%&lt;/em&gt;, as if he parked it there for you, awaiting further command.  And that was part of the marvel of ts: he respected your smarts to figure out his code and he let his code entirely represent him.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll hear a lot of people say that we didn&amp;#8217;t know who he was.  That no one met him.  But we all read alot of his code.  And clearly that was how he wanted us to know him.  Think of how that stands in such sharp contrast to the self-advertisement and vanity journalism of the Web today.  We knew him, just not in the way we&amp;#8217;re used to.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The RubyFrance blog has this photo of Guy:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/guy_decoux.jpg" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Anyway, if the real pigeon is intact, I hope it will find its way into a wing of the Matz Museum, alongside the Perl &lt;span class="caps"&gt;CGI&lt;/span&gt; book that Matz inherited from his dad and the magnetic tapes in Matz&amp;#8217; closet.  (Ruby pre-1.0 is lost somewhere in there on outdated media.)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Here is the very thoughtful eulogy given by Jean-François Trân.  You can give your thanks to &lt;a href="http://twitter.com/underflow_/"&gt;@underflow_&lt;/a&gt; for writing it.&lt;/p&gt;
&lt;p&gt;I am archiving it here, though the original is on &lt;a href="http://groups.google.com/group/ruby-talk-google/browse_thread/thread/70b8cce2be8efbd3"&gt;ruby-talk&lt;/a&gt;.  I would be very interested to hear memories from matz or David Alan Black or anyone who had correspondence with Guy.  It would be great to revisit some of his finer replies over the next few days, wouldn&amp;#8217;t it?&lt;/p&gt;
&lt;blockquote&gt;I&amp;#8217;m sad to announce you Guy Decoux&amp;#8217;s death in the beginning of the month of July 2008. He was 53 years old. He died accidentally, intoxicated by the smokes of the fire that took place during the night in his flat in Louveciennes (near Paris).&lt;br /&gt;
&lt;br /&gt;
Guy Decoux was network and system admin at the &lt;a href="http://moulon.inra.fr/"&gt;Plant Genomics Research Unit of &lt;span class="caps"&gt;INRA&lt;/span&gt;&lt;/a&gt; (Agricultural Research labs, where he worked since 1982) in Moulon&amp;#8217;s Farm (Moulon&amp;#8217;s plateau, in the south west of Paris).&lt;br /&gt;
&lt;br /&gt;
He was an Internet pioneer. For example, he worked on Oraplex, one of the first Oracle to web gateways. He deployed the first website that gave access to an &lt;a href="http://www.acedb.org/"&gt;ACeDB&lt;/a&gt; system by the end of 1993. He had worked on bioinformatic free software, like &lt;a href="http://moulon.inra.fr/%7Ebioinfo/PROTICdb"&gt;ProticDB&lt;/a&gt;, a plant proteomic database.&lt;br /&gt;
&lt;br /&gt;
He was part of the generation of developers who switched from Perl to Ruby in the 90s. While his mastering of Perl was already great, his knowledge about Ruby was so deep and impressive that a lot of Rubyists would have been very happy to have the same one. Guy contributed to Dave Thomas&amp;#8217; book, &amp;#8220;Programming Ruby&amp;#8221;. Of course he polled for the comp.lang.ruby and fr.comp.lang.ruby newsgroups creation. He was maintaining some libraries like &lt;a href="http://raa.ruby-lang.org/project/pl-ruby"&gt;PL/Ruby&lt;/a&gt; a procedural language for PostgreSQL, &lt;a href="http://raa.ruby-lang.org/project/bdb"&gt;bdb&lt;/a&gt; / &lt;a href="http://raa.ruby-lang.org/project/bdb1"&gt;bdb1&lt;/a&gt; bindings for Berkeley DB, &lt;a href="http://raa.ruby-lang.org/project/bz2"&gt;bz2&lt;/a&gt; bindings the libbzip2 compression library and &lt;a href="http://raa.ruby-lang.org/project/mmap"&gt;MMap&lt;/a&gt; class, a class for Memory-mapped files.&lt;br /&gt;
&lt;br /&gt;
To my knowledge, he was the only french person to have commits right to Ruby &lt;span class="caps"&gt;MRI&lt;/span&gt; source code. I don&amp;#8217;t know if he was officially member of the Ruby Core Team (I don&amp;#8217;t know if there is an official Ruby Core Team list).&lt;br /&gt;
&lt;br /&gt;
I&amp;#8217;m not sure &amp;#8216;ts&amp;#8217; (what does &amp;#8216;ts&amp;#8217; mean in his electronic address?) had ever been to RubyConf nor any Ruby conference. Well I don&amp;#8217;t know if there is a french Rubyist who ever meet him. Was he mysterious or secret ? Maybe he was just reserved. His colleagues described Guy as reserved, kind, available, professional and technically very competent. His messages on Ruby-Core or Ruby-Talk, sometimes with a bit of humor, show all that.&lt;br /&gt;
&lt;br /&gt;
This is a loss for Ruby Community.&lt;br /&gt;
&lt;br /&gt;
 In the name of french association RubyFrance, I present my condolences to Guy Decoux&amp;#8217;s family, his friends and his collegues.&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Matz has &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/315945"&gt;replied&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was socked.  He was one of the smartest guy among our community. Even thought I haven&amp;#8217;t had a chance to meet him in person, he had been a great source of knowledge and insight.  I should have exchanged ideas with him more often.  I miss him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update #2:&lt;/strong&gt; A nice &lt;a href="http://www.reddit.com/r/programming/comments/73d13/guy_decoux_ts_one_of_the_smartest_rubyists_around/c05khtu"&gt;remark&lt;/a&gt; from Mauricio Fernandez:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s sad that the aura of mystery around ts was dissipated by this tragic news. Back in the pre-Rails era, there were often jokes about him being not one but many people &lt;del&gt;-&lt;/del&gt; such was the perception of his knowledge and skill. matz once said he hoped Guy would maintain Ruby if he got hit by a bus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He is referencing &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/10826"&gt;ruby-talk:10826&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Furthermore:&lt;/strong&gt; A few from the Decoux archive.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20293"&gt;ruby-talk:20293&lt;/a&gt;, his lost &lt;code&gt;prop&lt;/code&gt; extension for inserting a module between a class and its metaclass. (Diagram in &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/20296"&gt;ruby-talk:20296&lt;/a&gt;.)&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/17000"&gt;ruby-talk:17000&lt;/a&gt;, where he refers to ts as his moniker.  the &lt;code&gt;iis&lt;/code&gt; extension used to spill method source code is from the 1.6 days and can be found on the moulon &lt;a href="ftp://moulon.inra.fr/pub/ruby/"&gt;ftp site&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/5795"&gt;ruby-talk:5795&lt;/a&gt;, about his style of answering in code he says, &amp;#8220;I know nothing, I just ask ruby what it do.&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry xml:base="/2008/09/15/documentsRevealDjangoPonyTailOfLies.html"><title xml:space="preserve">Documents Reveal Django Pony, Caught In Tail Of Lies</title><link href="/2008/09/15/documentsRevealDjangoPonyTailOfLies.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FdocumentsRevealDjangoPonyTailOfLies</id><published xml:space="preserve">2008-09-15T06:07:53Z</published><updated xml:space="preserve">2008-09-15T06:07:53Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;&lt;a href="http://twitter.com/djangopony/statuses/921492548"&gt;&lt;img src="http://hackety.org/images/pony-magic.png" class="c" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</content></entry><entry xml:base="/2008/09/09/sortingOutLibskia.html"><title xml:space="preserve">Sorting Out Libskia</title><link href="/2008/09/09/sortingOutLibskia.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FsortingOutLibskia</id><published xml:space="preserve">2008-09-09T18:09:56Z</published><updated xml:space="preserve">2008-09-09T18:09:56Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.vlad1.com/2008/09/09/better-random-thoughts-than-none-at-all/"&gt;Vladimir Vukićević&lt;/a&gt;: Another graphics library, Skia, has recently appeared as part of the Google Chrome code drop.  It&amp;#8217;s unfortunate that Google felt they needed to develop their own alternative in a closed fashion instead of joining an existing open source project.  The Cairo project, and through it the many open source projects that depend on it, could have benefitted from the work that was done on Skia behind closed doors.  Even worse, unlike most of the rest of the Chrome code, Skia is licensed under the Apache Public License v2.0.  This creates difficulties in being able to reuse the Skia code in most projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, on a happy note, hopefully it will ignite a performance race between itself and Cairo.  I also wonder if Cairo will ever pick up what Skia has in the way of effects and animation.  Cairo does have filters, gradients.  But not blurs and lighting effects.&lt;/p&gt;
&lt;p&gt;The biggest obstacle to using Skia on its own, though, is that Skia is really only partially released.  It&amp;#8217;s a &lt;a href="http://code.google.com/p/skia/"&gt;403&lt;/a&gt;.  Allegedly, some folks were able to &lt;a href="http://www.satine.org/archives/2007/03/05/the-skia-source-code-dilemma/"&gt;nab the source&lt;/a&gt; during a brief window on March 4th of last year.  And the source code in the &lt;a href="http://src.chromium.org/viewvc/chrome/trunk/src/skia/"&gt;Chrome tree&lt;/a&gt; is a snapshot that seems incomplete.  For example, much of the native code (to paint directly to X11, Windows, OS X contexts) seems missing.&lt;/p&gt;
&lt;p&gt;For my part, I&amp;#8217;d like to see how Shoes would run if forked to be Skia-powered.  Can&amp;#8217;t seem to hook it all up just yet.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Skia can be built seperately, though.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ git clone git://github.com/why/skistrap.git
$ cd skistrap
$ make fetch
$ make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Presuming you have the includes and libs for libpng, libjpeg, libgif and libX11, you&amp;#8217;ll end up with &lt;strong&gt;libskia.so&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also a &lt;code&gt;make test&lt;/code&gt;, but I haven&amp;#8217;t got it hooked up to X11 quite yet, as there&amp;#8217;s no &lt;code&gt;ports/SkOSWindow_Unix.cpp&lt;/code&gt; or the like.  And it looks like the GL bindings it uses are for other platforms.&lt;/p&gt;</content></entry><entry xml:base="/2008/08/28/theFunnyChip.html"><title xml:space="preserve">The Funny Chip</title><link href="/2008/08/28/theFunnyChip.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FtheFunnyChip</id><published xml:space="preserve">2008-08-28T19:53:21Z</published><updated xml:space="preserve">2008-08-28T19:53:21Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.gutenberg.org/catalog/world/readfile?fk_files=5964&amp;#38;pageno=25"&gt;Henri Bergson&lt;/a&gt;: This is just why the tragic poet is so careful to avoid anything calculated to attract attention to the material side of his heroes. No sooner does anxiety about the body manifest itself than the intrusion of a comic element is to be feared. On this account, the hero in a tragedy does not eat or drink or warm himself. He does not even sit down any more than can be helped. To sit down in the middle of a fine speech would imply that you remembered you had a body. &lt;ins&gt;Napoleon, who was a psychologist when he wished to be so, had noticed that the transition from tragedy to comedy is effected simply by sitting down.&lt;/ins&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, is that all?  Merely take a seat and it&amp;#8217;s comedy?  Hot socks.  I&amp;#8217;m afraid we have seriously overdone it.  Prevailing notions of today dictate that a sit must be accompanied by a stamp of the foot, three Porky Pig impersonations and an offstage fart.  How outmoded is this Napoleon?&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.gutenberg.org/catalog/world/readfile?fk_files=5964&amp;#38;pageno=25"&gt;Henri Bergson&lt;/a&gt;: This is just why the tragic poet is so careful to avoid anything calculated to attract attention to the material side of his heroes. No sooner does anxiety about the body manifest itself than the intrusion of a comic element is to be feared. On this account, the hero in a tragedy does not eat or drink or warm himself. He does not even sit down any more than can be helped. To sit down in the middle of a fine speech would imply that you remembered you had a body. &lt;ins&gt;Napoleon, who was a psychologist when he wished to be so, had noticed that the transition from tragedy to comedy is effected simply by sitting down.&lt;/ins&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, is that all?  Merely take a seat and it&amp;#8217;s comedy?  Hot socks.  I&amp;#8217;m afraid we have seriously overdone it.  Prevailing notions of today dictate that a sit must be accompanied by a stamp of the foot, three Porky Pig impersonations and an offstage fart.  How outmoded is this Napoleon?&lt;/p&gt;
&lt;p&gt;And besides, what good is this clinical dissection of gags and guffaws?  What thing is less a topic for seriousness than unseriousness?  The minute we sober up, our topic has left the scene.  It carries with it just such an inflatable jalopy in case of gravity.&lt;/p&gt;
&lt;p&gt;On these matters, I will listen to none other than a professor who can hardly keep a straight face, but is constantly coughing behind his hand, weeping with &lt;em&gt;I&amp;#8217;m sorry, pardon me, just one moment&lt;/em&gt;, turning away from the class, loosing his complete composure, cackling wickedly, bravely bringing a hatchet down upon a ceramic donkey, only to discover the axe is rubber in its ricochet, and dashing around the room in nothing but briefs and hollandaise sauce.  Even in that case, I am reluctant to say that much would be accomplished.  The rubber axe, in particular, was poor execution.&lt;/p&gt;
&lt;p&gt;But the only reason I&amp;#8217;m reading this Henri Bergson essay (circa 1911) is for this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.gutenberg.org/catalog/world/readfile?fk_files=5964&amp;#38;pageno=30"&gt;Henri Bergson&lt;/a&gt;: (bottom of the page) &lt;span class="caps"&gt;ANY&lt;/span&gt; &lt;span class="caps"&gt;ARRANGEMENT&lt;/span&gt; OF &lt;span class="caps"&gt;ACTS&lt;/span&gt; &lt;span class="caps"&gt;AND&lt;/span&gt; &lt;span class="caps"&gt;EVENTS&lt;/span&gt; IS &lt;span class="caps"&gt;COMIC&lt;/span&gt; &lt;span class="caps"&gt;WHICH&lt;/span&gt; &lt;span class="caps"&gt;GIVES&lt;/span&gt; US, IN A &lt;span class="caps"&gt;SINGLE&lt;/span&gt; &lt;span class="caps"&gt;COMBINATION&lt;/span&gt;, &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;ILLUSION&lt;/span&gt; OF &lt;span class="caps"&gt;LIFE&lt;/span&gt; &lt;span class="caps"&gt;AND&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;DISTINCT&lt;/span&gt; &lt;span class="caps"&gt;IMPRESSION&lt;/span&gt; OF A &lt;span class="caps"&gt;MECHANICAL&lt;/span&gt; &lt;span class="caps"&gt;ARRANGEMENT&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have never heard this sort of definition before.  And if there is a link between laughs and engineering, I&amp;#8217;d like to know.  Possibly a hundred-year-old idea in all caps can be true.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Perhaps there are some codes or patterns to it.  Jokes as a language hack?  Tongue twisters being: unnecessary and playful obfuscations to an otherwise normal sentence, maybe?  Knock-knocks: a kind of exception handling?&lt;/p&gt;
&lt;p&gt;Doesn&amp;#8217;t it strike you as tremendously design-patterns-ish that we even name the different types of jokes?  Ah well, everything has its categories I suppose.&lt;/p&gt;
&lt;p&gt;And what of loops?  Well, read this in a soothing voice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.bizjournals.com/austin/stories/1999/11/01/smallb3.html"&gt;Ellis Posey&lt;/a&gt;: Comedy professor and author Melvin Helitzer claims there&amp;#8217;s something magic about the number three. [&amp;#8230;] Here&amp;#8217;s the way it goes: &amp;#8220;Women are crazy today.&amp;#8221; The rhythm is &lt;span class="caps"&gt;DEE&lt;/span&gt;-&lt;span class="caps"&gt;DEE&lt;/span&gt;-la-&lt;span class="caps"&gt;DEE&lt;/span&gt;-&lt;span class="caps"&gt;DEE&lt;/span&gt;, followed my a silent beat. Next comes the punch line, &amp;#8220;Take my wife. Please.&amp;#8221; &lt;span class="caps"&gt;DEE&lt;/span&gt;-la-&lt;span class="caps"&gt;DEE&lt;/span&gt;, la-&lt;span class="caps"&gt;DEE&lt;/span&gt;. The rhythm changes in the middle of the joke.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&amp;#8217;t make me do that ever again.&lt;/p&gt;
&lt;p&gt;0xDEE &amp;#8211; 0xDEE &amp;#8211; 0&amp;#215;1a &amp;#8211; 0xDEE &amp;#8211; 0xDEE = ?.&lt;/p&gt;
&lt;p&gt;Equals&amp;#8230; let&amp;#8217;s see&amp;#8230; &lt;em&gt;negative seven-thousand one-hundred fifty-and-eight!&lt;/em&gt;  Kxxx!&lt;/p&gt;
&lt;p&gt;Is there a euphoria present in &lt;code&gt;for (i = 0; i &amp;lt; 3; i++)&lt;/code&gt;?  I can&amp;#8217;t imagine.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s consult Henri Bergson.  You got anything for us on repetition in 1911?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus, you meet a friend in the street whom you have not seen for an age; there is nothing comic in the situation. If, however, you meet, him again the same day, and then a third and a fourth time, you may laugh at the &amp;#8220;coincidence.&amp;#8221; [&amp;#8230;] Such are the repetitions produced on the stage. They are the more laughable in proportion as the scene repeated is more complex and more naturally introduced&amp;#8212;two conditions which seem mutually exclusive, and which the play-writer must be clever enough to reconcile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gah.  I was really hoping he would say it was like a for loop.  He says &amp;#8220;two conditions&amp;#8221;: &lt;code&gt;if complex++ &amp;amp;&amp;amp; if natural++&lt;/code&gt;.  Don&amp;#8217;t overload your incrementer and you&amp;#8217;ll be just fine then.  (One stamp of the foot, three Porky Pig impressions and an offstage fart later&amp;#8230;)  I don&amp;#8217;t think this is going anywhere.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Maybe this whole humor mechanism conjecture is a bag of gas.  Here&amp;#8217;s what I&amp;#8217;d say: Yes, there are some mechanics to it.  I don&amp;#8217;t know if you can purely measure out a joke.  But you could look at any fragment of language as a series of instructions.  Surely the pure mechanics of it aren&amp;#8217;t the allure.  I mean this is why puns generally suck.  (And possibly why programmers seriously get off on puns.)&lt;/p&gt;
&lt;p&gt;Still, sometimes the best jokes work like a series of instructions which act remarkably lifelike.  Which assemble in a reflective way, which can be read a myriad of ways rather than merely straightforward.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.weather.net/zarg/ZarPages/stevenWright.html"&gt;Steven Wright&lt;/a&gt;: I planted some bird seed. A bird came up. Now I don&amp;#8217;t know what to feed it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s a little life machine.  A machine where life is different.  It&amp;#8217;s kind of funny because it only takes such a small machine to create such a world.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Let&amp;#8217;s look over today&amp;#8217;s &lt;a href="http://textism.com/favrd/most/2008-08-28"&gt;Favrd&lt;/a&gt;.  The Transatlantic Monkeyshines Index.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://twitter.com/fireland/statuses/901301220"&gt;Fireland&lt;/a&gt;: Is it possible to unfriend somebody to death?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this machine, a push button politely severs an affection.  But press it again and again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://twitter.com/CcSteff/statuses/901595962"&gt;CcSteff&lt;/a&gt;: It&amp;#8217;s all fun and games until someone gets his dick slammed in a drawer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah, a mechanized bureau possessing the ability to end the horseplay with a fast-acting penis removal utility.  Delightful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://twitter.com/aedison/statuses/901897075"&gt;aedison&lt;/a&gt;: Grandma used to nag me. Now she can&amp;#8217;t talk anymore. Call it a &amp;#8216;stroke of luck&amp;#8217;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This machine is&amp;#8230; the grandmother?  This girl Edison is quite a master of puns, though I can&amp;#8217;t tell you why so many puns otherwise fail.  I really do wonder.&lt;/p&gt;
&lt;p&gt;Look, &lt;em&gt;kaput&lt;/em&gt; with the analysis.  I&amp;#8217;m done.  There is something to this, but it&amp;#8217;s not that computers are funny.  Maybe just the link between humor, tragedy and hacking: spinning a lush reality from raw numerals?  Leave me alone.&lt;/p&gt;</content></entry><entry xml:base="/2008/08/15/threadedDownloadsInShoes.html"><title xml:space="preserve">Threaded XMLHttpRequest In Shoes</title><link href="/2008/08/15/threadedDownloadsInShoes.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FthreadedDownloadsInShoes</id><published xml:space="preserve">2008-08-15T17:36:59Z</published><updated xml:space="preserve">2008-08-15T17:36:59Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;Threads can be tough and don&amp;#8217;t suit beginners very well.  And, well, Ruby threads can tie up the main app thread.&lt;/p&gt;
&lt;p&gt;So, Shoes steals the underpinnings of Ajax to give you asynchronous downloads without needing to get into threading.  Many of the young Sneakers are building Twitter and Flickr apps; it seemed the morally upright thing to do.  In addition, I was able to use these &lt;span class="caps"&gt;HTTP&lt;/span&gt; threads to load remote images in the background.  So, in Shoes, images loaded from the web will appear as they load.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the &lt;code&gt;simple-downloader.rb&lt;/code&gt; from the samples that come with Shoes:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/shoes-downloader.png" class="c" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;To achieve this, Shoes uses platform code for both threading and &lt;span class="caps"&gt;HTTP&lt;/span&gt;.  On Windows, CreateThread and WinHTTP.  On Linux, pthread and curl.  And, on OS X, NSURLDownload &amp;#8212; which does the threading for you.&lt;/p&gt;
&lt;p&gt;Downloading is reduced to a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Shoes.app { download "http://shoooes.net/shoes.png", :save =&gt; "shoes.png" }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This happens asynchronously, so &lt;code&gt;shoes.png&lt;/code&gt; won&amp;#8217;t be there yet when this method ends.  It might be huge.  It might appear an hour later.  You can attach a &lt;code&gt;finish&lt;/code&gt; event to be notified when the download is complete.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Shoes.app do
  download "http://shoooes.net/shoes.png", :save =&gt; "shoes.png" do |dl|
    alert "Scuse me. Your shoes.png has arrived."
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Omit the &lt;code&gt;:save&lt;/code&gt; option and you can get back the download as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Shoes.app do
  download "http://hacketyhack.net/pkg/osx/shoes" do |dl|
    alert "The latest OS X download is: #{dl.response.body}"
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also attach &lt;code&gt;:method&lt;/code&gt;, &lt;code&gt;:headers&lt;/code&gt; and &lt;code&gt;:body&lt;/code&gt; options to the download, if you want to customize the request beyond that.  I studied XMLHttpRequest closely and tried to be sure the same things could be done with this.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;As for events, you get four of them: &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;finish&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.  You can either pass proc objects in as options:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Shoes.app do
  url = "http://shoooes.net/dist/shoes-0.r905.exe"
  status = para "Downloading #{url}"

  download url, :save =&gt; "shoes.exe",
    :start =&gt; proc { |dl| status.text = "Connecting..." },
    :progress =&gt; proc { |dl| status.text = "#{dl.percent}% complete" },
    :finish =&gt; proc { |dl| status.text = "Download finished" },
    :error =&gt; proc { |dl, err| status.text = "Error: #{err}" }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, use the method syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Shoes.app do
  url = "http://shoooes.net/dist/shoes-0.r905.exe"
  status = para "Downloading #{url}"

  get = download url, :save =&gt; "shoes.exe"
  get.start { |dl| status.text = "Connecting..." }
  get.progress { |dl| status.text = "#{dl.percent}% complete" }
  get.finish { |dl| status.text = "Download finished" }
  get.error { |dl, err| status.text = "Error: #{err}" }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing I will mention is that every queued download is attached to the window containing it.  When you close the window, the download stops.  So, if you&amp;#8217;re queueing a download from a temporary popup, be sure to queue it on the main app window.&lt;/p&gt;</content></entry><entry xml:base="/2008/08/12/thoseVintagePKDCovers.html"><title xml:space="preserve">Those Vintage P K D Covers</title><link href="/2008/08/12/thoseVintagePKDCovers.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FthoseVintagePKDCovers</id><published xml:space="preserve">2008-08-13T04:54:10Z</published><updated xml:space="preserve">2008-08-13T04:54:10Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;Here&amp;#8217;s a shot of an updated book page, with the real cover.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/abebooks3.png" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;See?  A fine, illustrated cover from days of yore.  Devoid of panicky torsos and their ilk.&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;&lt;img src="http://hackety.org/images/high-castle.jpg" class="rb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It just baffles me.  There&amp;#8217;s a &lt;a href="http://www.philipkdick.com/works_covers.html"&gt;landslide&lt;/a&gt; of interesting Philip K. Dick covers out there.  And yet, were you to pick up &lt;em&gt;The Man in the High Castle&lt;/em&gt;, you&amp;#8217;d likely wind up with the schmaltzy construction paper torso of astonishment at right.  Are those supposed to be surprise lines or something?  No, that naked, armless guy is embarassed, poor thing!  &amp;#8220;Hey, I thought I was posing for a can of Paul Mitchell primping wax!  What&amp;#8217;s with all this dystopia??&amp;#8221;&lt;/p&gt;
&lt;p&gt;Couldn&amp;#8217;t we have just stick with &lt;a href="http://www.philipkdick.com/covers/tmithc24.jpg"&gt;white tiger&lt;/a&gt; on a ledge?  Or &lt;a href="http://www.philipkdick.com/covers/tmithc-czech.jpg"&gt;czech&lt;/a&gt; this one!&lt;/p&gt;
&lt;p&gt;See, this is exactly the benefit of used books.  Aside from the glorious marginalia and ad-hoc footnoting, you get to find a nice, fun cover that isn&amp;#8217;t around no more.  And where does one go to scoop up used books?  You go to &lt;a href="http://abebooks.com"&gt;AbeBooks&lt;/a&gt;, probably.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Here is what AbeBooks looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/abebooks1.png" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Some entries have covers, but a lot don&amp;#8217;t.  Usually they only show the covers of the newest editions.&lt;/p&gt;
&lt;p&gt;However, we can grab some editions from the cover library at LibraryThing:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/abebooks2.png" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This hack will only add covers to AbeBooks.  If Abe already shows a picture (and some booksellers do show a photo of the actual book from their inventory,) then those images will be left alone.&lt;/p&gt;
&lt;p&gt;Of course, some entries are still blank.  If there is no &lt;span class="caps"&gt;ISBN&lt;/span&gt;.  Or if LibraryThing lacks the cover &amp;#8212; which is common, but less common than Amazon.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Here&amp;#8217;s a shot of an updated book page, with the real cover.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/abebooks3.png" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;See?  A fine, illustrated cover from days of yore.  Devoid of panicky torsos and their ilk.&lt;/p&gt;
&lt;p&gt;The Greasemonkey script is entitled &lt;a href="http://userscripts.org/scripts/show/31662"&gt;AbeBooks Covers&lt;/a&gt; at Userscripts.org.  Find yourself a Clooney-free Solaris.&lt;/p&gt;</content></entry><entry xml:base="/2008/06/26/gitHooksForDitz.html"><title xml:space="preserve">Git Hooks For Ditz</title><link href="/2008/06/26/gitHooksForDitz.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FgitHooksForDitz</id><published xml:space="preserve">2008-06-26T18:04:23Z</published><updated xml:space="preserve">2008-06-26T18:04:23Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;&lt;code&gt;~/.ditz/hooks/after_add.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Ditz::HookManager.on :after_add do |project, config, issues|
  issues.each do |issue|
    `git add #{issue.pathname}`
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.ditz/hooks/after_delete.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;Ditz::HookManager.on :after_delete do |project, config, issues|
  issues.each do |issue|
    `git rm #{issue.pathname}`
  end
end
&lt;/code&gt;&lt;/pre&gt;</content></entry><entry xml:base="/2008/06/25/callingCocoaCommandline.html"><title xml:space="preserve">Calling Cocoa Commandline</title><link href="/2008/06/25/callingCocoaCommandline.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FcallingCocoaCommandline</id><published xml:space="preserve">2008-06-25T19:31:14Z</published><updated xml:space="preserve">2008-06-25T19:31:14Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">
&lt;pre&gt;&lt;code class="objc"&gt;[win center];
[win setLevel: NSFloatingWindowLevel];
[win makeKeyAndOrderFront: nil];
&lt;/code&gt;&lt;/pre&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;The euphoria.  All of Shoes&amp;#8217; Carbon code is gone, rewritten using entirely Cocoa native code.  Not only did this shrink the native code to nearly half of its previous size, but things actually work now.  The euphoria.  And also: the elation.&lt;/p&gt;
&lt;p&gt;The only painful part was figuring out how to get started with only gcc and get it all linked with the C code.  To get away without an &lt;span class="caps"&gt;IDE&lt;/span&gt;.  It&amp;#8217;s been done in lots of other cross-platform libs, sure.  Buried under autotools and lost in deep directories.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a summary of using Cocoa from the commandline.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;A truly trivial Cocoa program reads thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code class="objc"&gt;#import &amp;lt;Cocoa/Cocoa.h&amp;gt;

#define INIT    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
#define RELEASE [pool release];

int
main(int argc, char *argv[])
{
  NSApplication *app = [NSApplication sharedApplication];
  INIT;

  NSWindow *win = [[NSWindow alloc] initWithContentRect: NSMakeRect(0, 0, 340, 140)
    styleMask: (NSTitledWindowMask | NSClosableWindowMask | NSMiniaturizableWindowMask)
    backing: NSBackingStoreBuffered defer: NO];
  NSTextField *text = [[[NSTextField alloc] initWithFrame: NSMakeRect(40, 90, 260, 18)]
    autorelease];

  [[win contentView] addSubview: text];
  [text setBezeled: NO];
  [text setStringValue: @"Drink Coke-O"];
  [text setBackgroundColor: [NSColor windowBackgroundColor]];
  [text setEditable: NO];
  [text setSelectable: NO];

  [win center];
  [win orderFront: nil];

  RELEASE;
  [app run];
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save this as &lt;code&gt;coke-o.m&lt;/code&gt; and compile it (you&amp;#8217;ll need the Xcode tools installed):&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ gcc -framework Cocoa -o coke-o coke-o.m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it: &lt;code&gt;./coke-o&lt;/code&gt; (although the window will appear behind your terminal for now.)&lt;/p&gt;
&lt;p&gt;While we&amp;#8217;re messing with gcc, let&amp;#8217;s compile it as a Universal binary.  Since Universal binaries aren&amp;#8217;t that much bigger for little progs.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ export MACOSX_DEPLOYMENT_TARGET=10.4
$ gcc -O -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc \
    -framework Cocoa -o coke-o coke-o.m
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Now, about the window coming up behind the Terminal.  To me, this just seems to be one of those things that Apple is so pedantic about that it ends up not really making sense when you&amp;#8217;re starting out with Cocoa.&lt;/p&gt;
&lt;p&gt;From what I can gather, this is all tied into OS X&amp;#8217;s demand that every app have a menu and an icon.  And, in order to get a menu and an icon, you&amp;#8217;ve got to get an Info.plist file and a .app directory structure and all of that.  So, that&amp;#8217;s one way of solving the problem.&lt;/p&gt;
&lt;p&gt;Since our commandline app is being launched from the terminal, though, it&amp;#8217;s just becoming another window in Terminal.app&amp;#8217;s environment.&lt;/p&gt;
&lt;p&gt;So, if you just want your app to work from the terminal, expand the &lt;code&gt;win center&lt;/code&gt; call to also move the window up to the floating level.&lt;/p&gt;

&lt;pre&gt;&lt;code class="objc"&gt;[win center];
[win setLevel: NSFloatingWindowLevel];
[win makeKeyAndOrderFront: nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;In the case of the Shoes installer, I also needed to sniff out the &lt;span class="caps"&gt;CPU&lt;/span&gt; type.  I was okay having the little installer stub be a universal binary, but I really wanted to have it download other libraries specific to either PowerPC or Intel architectures.&lt;/p&gt;
&lt;p&gt;The simplest way of doing this is to use the &lt;code&gt;__ppc__&lt;/code&gt; pre-processor def.&lt;/p&gt;

&lt;pre&gt;&lt;code class="objc"&gt;NSString *url;
#ifdef __ppc__
url = @"http://hacketyhack.net/pkg/osx/shoes-ppc";
#else
url = @"http://hacketyhack.net/pkg/osx/shoes";
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the universal binary will actually compile this code twice (once for &lt;code&gt;-arch i386&lt;/code&gt; and once for &lt;code&gt;-arch ppc&lt;/code&gt;,) each of the &lt;code&gt;url&lt;/code&gt; assignment lines will end up in the proper side of the binary for its architecture.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d rather sniff out the &lt;span class="caps"&gt;CPU&lt;/span&gt; type at runtime (or if you need the &lt;span class="caps"&gt;CPU&lt;/span&gt; frequency as well,) I&amp;#8217;d look into calling &lt;code&gt;sysctl&lt;/code&gt; with the &lt;code&gt;CTL_HW&lt;/code&gt; and &lt;code&gt;HW_CPU_FREQ&lt;/code&gt; flags.  For some nice, complete examples, see the &lt;a href="http://plumber.gnu-darwin.org/home/pub/Documents/samples-c/arch_info.c"&gt;arch_info.c&lt;/a&gt; sample from the Darwin sources.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Lastly, I will mention briefly about linking to C.  While you may be able to get away with just writing plain C functions in &lt;code&gt;coke-o.m&lt;/code&gt; that can be exposed to C, you might eventually need to pass around Cocoa objects in your C structs.&lt;/p&gt;
&lt;p&gt;Since Objective-C is a superset of C, I found it easiest to just compile everything as Objective-C.  All of Cocoa&amp;#8217;s controls can be passed as C pointers.&lt;/p&gt;
&lt;p&gt;I kept all my C sources with the &lt;code&gt;.c&lt;/code&gt; extension and added &lt;code&gt;-x objective-c&lt;/code&gt; to the gcc flags when compiling vanilla C sources.  And then you can safely &lt;code&gt;#include &amp;lt;Cocoa/Cocoa.h&amp;gt;&lt;/code&gt; throughout your program.&lt;/p&gt;</content></entry><entry xml:base="/2008/06/19/stampingExesAndDmgs.html"><title xml:space="preserve">Stamping EXEs And DMGs</title><link href="/2008/06/19/stampingExesAndDmgs.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FstampingExesAndDmgs</id><published xml:space="preserve">2008-06-19T15:15:31Z</published><updated xml:space="preserve">2008-06-19T15:15:31Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;&lt;img src="http://hackety.org/images/shoes-packager.png" class="c" alt="" /&gt;&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;Here&amp;#8217;s a brief Ruby script&amp;#0151;one that demos Shoes&amp;#8217; events and animation&amp;#0151;and it&amp;#8217;s been injected into an &lt;span class="caps"&gt;EXE&lt;/span&gt; and a &lt;span class="caps"&gt;DMG&lt;/span&gt;:&lt;/p&gt;
&lt;div style="text-align: center; width: 340px; margin: 0 auto"&gt;&lt;div style="width: 160px; float:left"&gt;&lt;a href="http://hackety.org/bin/accordion.exe"&gt;&lt;img src="http://hackety.org/images/accordion-exe.png" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="http://hackety.org/bin/accordion.exe"&gt;accordion.exe&lt;/a&gt;&lt;br /&gt;&lt;span style="color:#552"&gt;84.0 KB&lt;/span&gt;&lt;/div&gt;&lt;div style="width: 160px; float:left"&gt;&lt;a href="http://hackety.org/bin/accordion.dmg"&gt;&lt;img src="http://hackety.org/images/accordion-dmg.png" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="http://hackety.org/bin/accordion.dmg"&gt;accordion.dmg&lt;/a&gt;&lt;br /&gt;&lt;span style="color:#552"&gt;43.4 KB&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;/div&gt;&lt;br clear="all" /&gt;&lt;/p&gt;
&lt;p&gt;These are web installers. Using native calls on each platform, they&amp;#8217;ll install Shoes if no Shoes is found on the system.  (If you already have Shoes installed, though, it won&amp;#8217;t &lt;a href="http://code.whytheluckystiff.net/shoes/wiki/RecentBuilds"&gt;update&lt;/a&gt; for you.)  Not a big deal, not worth mentioning really.  Installers.&lt;/p&gt;
&lt;p&gt;But, hold up.  What if I told you that Shoes can build EXEs and DMGs on any of its platforms?  Without needing a compiler.  You can build EXEs and DMGs from Windows.  And from Linux.  And from OS X.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/shoes-packager.png" class="c" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This is the built-in packager, which can be brought up with &lt;code&gt;shoes -p&lt;/code&gt; (or &lt;code&gt;shoes --package&lt;/code&gt; on Windows and Linux.  On OS X, it&amp;#8217;s in the Shoes main menu.  (Or ⌘-x.)&lt;/p&gt;
&lt;p&gt;Even as Ron Popeil is to the unflavored turkey, so is Shoes to these most willing binaries.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The magic is a little Ruby extension I use for manipulating EXEs and DMGs.  It&amp;#8217;s based on two programs: &lt;a href="http://www.mikekohn.net/file_formats/anal_pe.php"&gt;anal_pe&lt;/a&gt; and &lt;a href="http://github.com/planetbeing/xpwn"&gt;xpwn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you poke around with a hex editor inside Windows&amp;#8217; PE binary format, you&amp;#8217;ll find an .rsrc section at the end of the file which contains the icons and dialog boxes.  I insert the Ruby script into this mess.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;binj = Binject::EXE.new("blank.exe")
binj.inject("SHOES_FILENAME", "simple-accordion.rb")
File.open("simple-accordion.rb") do |f|
  binj.inject("SHOES_PAYLOAD", f)
end
binj.save("accordion.exe")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;blank.exe&lt;/strong&gt; is the empty web installer.  It&amp;#8217;s an executable that scans its own resources and then bases its moves on what it finds.  If it finds a Ruby script (or Shy file) in the &lt;code&gt;SHOES_PAYLOAD&lt;/code&gt; resource, it&amp;#8217;ll run it.  And if it finds an installer in the &lt;code&gt;SHOES_SETUP&lt;/code&gt; resource, it&amp;#8217;ll run the installer rather than going out to the web.&lt;/p&gt;
&lt;p&gt;So, yeah, &lt;strong&gt;blank.exe&lt;/strong&gt; comes with Shoes and we inject when you go to package.  Yeah?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Fabricating DMGs is a different kind of binary hacking.  In this case, we&amp;#8217;ve got to build an HFS+ partition and then convert that to a &lt;span class="caps"&gt;DMG&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One would start by making a small, raw HFS+ file and gzipping it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ dd if=/dev/zero of=blank.hfs bs=512K count=1
$ mkfs.hfsplus -v Shoes blank.hfs
$ gzip blank.hfs
$ mv blank.hfs.gz blank.hfz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This blank disk gets included with Shoes as well.  And at runtime, we use our extension to build the innards of the &lt;span class="caps"&gt;DMG&lt;/span&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;binj = Binject::DMG.new("blank.hfz", "Accordion")
binj.inject_dir("Accordion.app", "/tmp/accordion.app")
binj.chmod_file(0755, "Accordion.app/Contents/MacOS/accordion-launch")
binj.save("accordion.dmg")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This amazing code is only possible due to tons of incredible work by the XPwn dev team.  First of all, their &lt;span class="caps"&gt;DMG&lt;/span&gt; and HFS+ code is totally portable and only depends on zlib.  But also, the &lt;span class="caps"&gt;API&lt;/span&gt; is just too easy.  Their project is going to catch on big, not only in jail breaking the iPhone from any platform, but in building DMGs from the commandline on OS X itself!&lt;/p&gt;
&lt;p&gt;Since both anal_pe and XPwn are &lt;span class="caps"&gt;GPL&lt;/span&gt;, I&amp;#8217;m afraid this extension must be &lt;span class="caps"&gt;GPL&lt;/span&gt; as well.  The rest of Shoes is &lt;span class="caps"&gt;MIT&lt;/span&gt;.  Which is okay I guess since the packager isn&amp;#8217;t really needed to run Shoes apps.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;This is all a bleeding fresh part of &lt;a href="http://code.whytheluckystiff.net/shoes/wiki/RecentBuilds"&gt;today&amp;#8217;s&lt;/a&gt; builds.&lt;/p&gt;
&lt;p&gt;As for Linux.  I&amp;#8217;m not decided as to what to do about generating Linux binaries.  Either using &lt;a href="http://megastep.org/makeself/"&gt;makeself&lt;/a&gt; or plain shell scripting will do.  But do I download binaries or automate package manager steps?  The unsurety.&lt;/p&gt;</content></entry><entry xml:base="/2008/06/12/martinDemellosGooeyChallenge.html"><title xml:space="preserve">Martin DeMello's Gooey Challenge</title><link href="/2008/06/12/martinDemellosGooeyChallenge.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FmartinDemellosGooeyChallenge</id><published xml:space="preserve">2008-06-12T17:57:48Z</published><updated xml:space="preserve">2008-06-12T17:57:48Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/304341"&gt;Martin DeMello&lt;/a&gt;: One of the most interesting facets of a desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; system is how easy it makes it to go off the beaten track, particularly how well you can add &amp;#8220;first class&amp;#8221; components to the system. (Using &amp;#8216;first class&amp;#8217; here to mean &amp;#8216;on an equal footing with the widgets supplied by the toolkit&amp;#8217;). Also, as a ruby programmer, I&amp;#8217;d naturally rather not drop down into C (or Java) to do this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So how does &lt;a href="http://code.whytheluckystiff.net/shoes/"&gt;Shoes&lt;/a&gt; hold up against this challenge?  And i mean: without hacking anything new into Shoes, using syntax introduced before the challenge was posed.&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/304341"&gt;Martin DeMello&lt;/a&gt;: One of the most interesting facets of a desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; system is how easy it makes it to go off the beaten track, particularly how well you can add &amp;#8220;first class&amp;#8221; components to the system. (Using &amp;#8216;first class&amp;#8217; here to mean &amp;#8216;on an equal footing with the widgets supplied by the toolkit&amp;#8217;). Also, as a ruby programmer, I&amp;#8217;d naturally rather not drop down into C (or Java) to do this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So how does &lt;a href="http://code.whytheluckystiff.net/shoes/"&gt;Shoes&lt;/a&gt; hold up against this challenge?  And i mean: without hacking anything new into Shoes, using syntax introduced before the challenge was posed.&lt;/p&gt;
&lt;p&gt;Well, let&amp;#8217;s go over the four parts of the contest:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;A component consisting of a series of existing components hooked together to act as a single widget.&lt;/strong&gt; (Such as an &lt;code&gt;icon&lt;/code&gt; widget that incorporates a picture and a textfield.  With options to turn off or size the image and make the text editable.)&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;A component built &amp;#8216;from scratch&amp;#8217; atop a canvas, that is, handling its own drawing and event management.&lt;/strong&gt; (Like a speedometer-type dial with a configurable range and tick interval.)&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;A component combining a canvas and existing widgets.&lt;/strong&gt; (For example, a box that holds a component and paints a customised border around it.)&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;A container that takes a collection of widgets and lays them out according to some userdefined algorithm.&lt;/strong&gt; (He suggests a pure-ruby implementation of a &lt;a href="http://zem.novylen.net/ruby/wrapboxdemo.png"&gt;wrapbox&lt;/a&gt;, but I thought this point might be better illustrated by a cascading container.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My initial &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/304372"&gt;response&lt;/a&gt; had a few simple code examples, but I didn&amp;#8217;t take the chance to do all the examples just as Martin described.  That e-mail touches on how Shoes custom widgets work.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;ve had a minute and I&amp;#8217;d like to present just my new, unadorned entries.  In each of these, a custom Shoes widget is setup by inheriting from the &lt;code&gt;Widget&lt;/code&gt; class.  And Shoes then creates a method using the lowercased name of the class which is used in the &lt;code&gt;app&lt;/code&gt;. (And you can try these out with today&amp;#8217;s super-fresh &lt;a href="http://code.whytheluckystiff.net/shoes/wiki/RecentBuilds"&gt;recent builds&lt;/a&gt;.)&lt;/p&gt;
&lt;hr /&gt;

&lt;h2&gt;Icon Widget (&lt;code&gt;challenge1.rb&lt;/code&gt;)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="rb"&gt;class Icon &lt; Widget
  attr_accessor :image, :caption
  def initialize opts = {}
    @stack = stack
    @image = @stack.image(*opts[:image]) if opts[:image]
    @caption = @stack.para(*opts[:text])
  end
  def edit
    return if @edit
    @caption.hide
    @stack.append do
      @edit = edit_line :width =&gt; 200, :text =&gt; @caption
    end
  end
  def save
    return unless @edit
    @caption.replace @edit.text
    @edit.remove
    @caption.show
  end
end

Shoes.app do
  stack do
    @icon = icon :image =&gt; "static/shoes-icon.png",
                 :text =&gt; "Welcome!"

    button("image.hide") { @icon.image.hide }
    button("image.show") { @icon.image.show }
    button("image.size") { @icon.image.style :width =&gt; 64, :height =&gt; 64 }
    button("text.edit") { @icon.edit }
    button("text.save") { @icon.save }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;Speedometer Widget (&lt;code&gt;challenge2.rb&lt;/code&gt;)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="rb"&gt;class Speedometer &lt; Widget
  attr_accessor :range, :tick, :position
  def initialize opts = {}
    @range = opts[:range] || 200
    @tick = opts[:tick] || 10
    @position = opts[:position] || 0
    @cx, @cy = self.left + 110, self.top + 100

    nostroke
    rect :top =&gt; self.top, :left =&gt; self.left,
      :width =&gt; 220, :height =&gt; 200
    nofill
    stroke white
    oval :left =&gt; @cx - 50, :top =&gt; @cy - 50, :radius =&gt; 50
    (ticks + 1).times do |i|
      radial_line 225 + ((270.0 / ticks) * i), 70..80
      radial_line 225 + ((270.0 / ticks) * i), 45..49
    end
    strokewidth 2
    oval :left =&gt; @cx - 70, :top =&gt; @cy - 70, :radius =&gt; 70
    stroke lightgreen
    oval :left =&gt; @cx - 5, :top =&gt; @cy - 5, :radius =&gt; 5
    @needle = radial_line 225 + ((270.0 / @range) * @position), 0..90
  end
  def ticks; @range / @tick end
  def radial_line deg, r
    pos = ((deg / 360.0) * (2.0 * Math::PI)) - (Math::PI / 2.0)
    line (Math.cos(pos) * r.begin) + @cx, (Math.sin(pos) * r.begin) + @cy,
      (Math.cos(pos) * r.end) + @cx, (Math.sin(pos) * r.end) + @cy
  end
  def position= pos
    @position = pos
    @needle.remove
    append do
      @needle = radial_line 225 + ((270.0 / @range) * @position), 0..90
    end
  end
end

Shoes.app do
  stack do
    para "Enter a number between 0 and 100"
    flow do
      @p = edit_line
      button "OK" do
        @s.position = @p.text.to_i
      end
    end

    @s = speedometer :range =&gt; 100, :ticks =&gt; 10
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;Native Button with Custom Border (&lt;code&gt;challenge3.rb&lt;/code&gt;)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="rb"&gt;class BorderButton &lt; Widget
  def initialize *args, &amp;blk
    opts = args.detect { |a| a.is_a? Hash }

    border opts[:border], :strokewidth =&gt; opts[:strokewidth]

    args[args.index(opts)] = opts.
      merge(:width =&gt; opts[:width] - (opts[:strokewidth] * 2))
    stack(:margin =&gt; opts[:strokewidth]).button *args, &amp;blk
  end
end

Shoes.app do
  borderbutton "OK", :width =&gt; 200,
    :strokewidth =&gt; 4, :border =&gt; "#000".."#FFF" do
      alert("PROOF!")
  end   
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2&gt;Cascading Container (&lt;code&gt;challenge4.rb&lt;/code&gt;)&lt;/h2&gt;

&lt;pre&gt;&lt;code class="rb"&gt;class Cascade &lt; Widget
  def initialize &amp;blk
    instance_eval &amp;blk
  end
  def draw(a,b)
    x, y = 0, 0
    contents.each do |e|
      if x != e.left &amp;&amp; y != e.top
        e.move x, y
      end
      x += e.height
      y += e.width
    end
    super(a,b)
  end
end

Shoes.app do
  cascade do
    button "1"
    button "2"
    button "3"
  end
end
&lt;/code&gt;&lt;/pre&gt;</content></entry><entry xml:base="/2008/06/09/dismantlingBrowserPlus.html"><title xml:space="preserve">Dismantling BrowserPlus</title><link href="/2008/06/09/dismantlingBrowserPlus.html" rel="alternate" type="text/html" xml:space="preserve" /><id xml:space="preserve">tag:hackety.org,2009:blogentry%2Fnews%2FdismantlingBrowserPlus</id><published xml:space="preserve">2008-06-09T08:58:47Z</published><updated xml:space="preserve">2008-06-09T08:58:47Z</updated><dc:subject xml:space="preserve">news</dc:subject><category term="news" scheme="http://hobix.com/tags" xml:space="preserve" /><summary mode="escaped" type="html" xml:space="preserve">&lt;p&gt;I had to peek a little.  And to pry it open like the upturned crab it was.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/bplus.png" class="cb" alt="" /&gt;&lt;/p&gt;</summary><author><name xml:space="preserve">why the lucky stiff</name><uri xml:space="preserve">http://whytheluckystiff.net/</uri><email xml:space="preserve">why@whytheluckystiff.net</email></author><content type="html" xml:space="preserve">&lt;p&gt;So, Yahoo!&amp;#8217;s &lt;a href="http://browserplus.yahoo.com/"&gt;BrowserPlus&lt;/a&gt; came out of nowhere.  And, well, it does other things, but I want to look at how it embeds Ruby in the browser.  I know, I know.  Enough with Ruby in the browser.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://hackety.org/images/bplus.png" class="cb" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;But I had to peek a little.  And to pry it open like the upturned crab it was.  Don&amp;#8217;t ask me if they are doing the &lt;strong&gt;right&lt;/strong&gt; thing or if they are going to &lt;strong&gt;win&lt;/strong&gt; or anything.  (I look at Facebook and all I see is a guy in an over-starched shirt with a blue collar who leans on the wall with his legs crossed and has to analyze everything I say &lt;em&gt;to death&lt;/em&gt;.  Go peg your pants, guy.)&lt;/p&gt;
&lt;p&gt;I wanted to find out if the interpreter was sandboxed, first of all.  And, next, I wanted to set up an &lt;code&gt;eval&lt;/code&gt; method so you can run arbitrary Ruby code.&lt;/p&gt;
&lt;p&gt;And to what end?  Come on, everybody quit asking me that.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Actually, BrowserPlus doesn&amp;#8217;t come with a Ruby interpreter.  Ruby is an addition you can download and a couple of the samples use it for talking to Flickr and for storing marshalled data.  (Their equivalent to Google Gears&amp;#8217; SQLite is just a PStore wrapper?)  The Photo Uploader and &lt;span class="caps"&gt;IRC&lt;/span&gt; Client &lt;a href="http://browserplus.yahoo.com/demos/"&gt;demos&lt;/a&gt; both use the Ruby interp.&lt;/p&gt;
&lt;p&gt;It also doesn&amp;#8217;t really embed Ruby directly in the browser.  Plus runs as a separate process that you pass calls out to.  The process hosts these additions called &lt;em&gt;services&lt;/em&gt; or &lt;em&gt;corelets&lt;/em&gt; (but I like to call them roo-dads!)  And they are sort of like a ruby gem.  A versioned library that&amp;#8217;s downloaded only when you need it.&lt;/p&gt;
&lt;p&gt;Okay, so that&amp;#8217;s the nutshell.  And the hacks hereforward will be:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A web app which serves up the roo-dads.&lt;/li&gt;
	&lt;li&gt;Some OpenSSL commandline scripting to sign them.&lt;/li&gt;
	&lt;li&gt;Some Ruby scripts in a zip file to act as our sample.&lt;/li&gt;
	&lt;li&gt;Injecting a library into their RubyInterpreter corelet.&lt;/li&gt;
	&lt;li&gt;And a few hacks on the user-side to get things opened up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you&amp;#8217;ve got a handle on these hacks, you&amp;#8217;ll be able to screw around with Plus yourself, rather than being confined to the restricted set of demos on the Yahoo! dev site.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Let&amp;#8217;s free up Plus first.  Since this is just a beta release, the Plus team have it all locked up so you can only use it on the &lt;code&gt;browserplus.yahoo.com&lt;/code&gt; subdomain.&lt;/p&gt;
&lt;p&gt;Step one.  Edit &lt;strong&gt;BrowserPlus.config&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;On Windows, look for &lt;code&gt;C:\Program Files\Yahoo! BrowserPlus\2.0.4\BrowserPlus.config&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;On OS X, it&amp;#8217;s at &lt;code&gt;$HOME/Library/Application Support/Yahoo!/BrowserPlus/2.0.4/BrowserPlus.config&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;/* THIS FILE IS GENERATED BY THE BUILD SYSTEM.  EDIT THE CORRESPONDING .cmakeIn FILE.
 */

/*
 * This is the configuration file for BrowserPlus
 */

{
   // the base url for the "primary" distribution server.  This server will
   // be the single source of truth for Permissions, and will used to
   // attain services
   "DistServer": "http://browserplus.yahoo.com",

   // An array of "secondary" distribution servers, which will be checked
   // in order for services if the primary server has no components
   // available which match an issued require statement.
   "SecondaryDistServers": [ "" ],

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alter the &lt;code&gt;DistServer&lt;/code&gt; line.  Change &lt;code&gt;"http://browserplus.yahoo.com"&lt;/code&gt; to &lt;code&gt;"http://plus.hackety.org"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second step, we&amp;#8217;ve got to add some S/&lt;span class="caps"&gt;MIME&lt;/span&gt; keys.  I can&amp;#8217;t sign stuff as Yahoo! considering that I lack their private keys.&lt;/p&gt;
&lt;p&gt;Download &lt;a href="http://hackety.org/crt/BrowserPlus.crt"&gt;BrowserPlus.crt&lt;/a&gt; and copy to the &lt;strong&gt;Permissions&lt;/strong&gt; folder.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;On Windows, this is at &lt;code&gt;C:\Program Files\Yahoo! BrowserPlus\Permissions\BrowserPlus.crt&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;On OS X, go to &lt;code&gt;$HOME/Library/Application Support/Yahoo!/BrowserPlus/Permissions/BrowserPlus.crt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;#8217;t worry about overwriting the file.  Yahoo!&amp;#8217;s cert is still in there as well.&lt;/p&gt;
&lt;p&gt;Third and last step, alter the &lt;strong&gt;Permissions&lt;/strong&gt; file.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;On Windows, you&amp;#8217;ll want &lt;code&gt;%LOCALAPPDATA%/Yahoo!/BrowserPlus/Permissions/Permissions&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;On OS X, edit &lt;code&gt;$HOME/Library/Application Support/Yahoo!/BrowserPlus/Permissions/Permissions&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;{
    // What domains are approved?  Entries are PCRE regular expressions
    // which must match the scheme://host:port of the requesting URI.
    // Regular expressions must be anchored with $.
    // Note that the PCRE expression may need to be protected in order
    // to be valid JSON (e.g. a '\' needs to be '\\')
    //
    "whitelist" : [
      "^http(s?)://(.*)\\.yahoo\\.com$",
      "^http(s?)://(.*)\\.yahoo\\.com:[0-9]+$"
    ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to the &lt;code&gt;"whitelist"&lt;/code&gt; array an entry for hackety.org: &lt;code&gt;"^http(s?)://(.*)\\.hackety\\.org$"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to write your own web pages using BrowserPlus, you can follow that last step for your site as well.  However, to actually write Ruby extensions, you&amp;#8217;ll need a cert and a dist server of your own, until Yahoo! opens up their dist server.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The certificate is an &lt;a href="http://kb.mozillazine.org/Getting_an_SMIME_certificate"&gt;S/&lt;span class="caps"&gt;MIME&lt;/span&gt; cert&lt;/a&gt;.  Which is used for signing e-mail.  In fact, all the meat cutlet core-dads get served as &lt;code&gt;smime.p7m&lt;/code&gt;.  They look like e-mail attachments.  (Here&amp;#8217;s &lt;a href="http://browserplus.yahoo.com/api/v1/corelet/strings/ImageAlter/1.2.6/win32"&gt;one&lt;/a&gt; for your inspection, if you like.)&lt;/p&gt;
&lt;p&gt;So, let&amp;#8217;s say you get a cert and end up with a &lt;span class="caps"&gt;PEM&lt;/span&gt; file that has a list of certs and your private key.  You&amp;#8217;ll want to split that file up into separate files.  From a &lt;a href="http://www.kfu.com/~nsayer/encryption/openssl.html"&gt;really great &lt;span class="caps"&gt;HOWTO&lt;/span&gt;&lt;/a&gt; that explains it all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should get out a bunch of certificates. You&amp;#8217;ll need to look at the text above each one to find the one that is your certificate. The rest are part of Thawte&amp;#8217;s Certifying Authority. It turns out that if you want your messages to verify correctly, you must also include Thawte&amp;#8217;s intermediate CA key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be 3 certificates. The one whose identity is your e-mail address is your certificate. The one whose subject and issue are identical is the Thawte CA root. You won&amp;#8217;t need that one, since we&amp;#8217;ll include it in the trusted root file later. The 3rd one will have the CA root as the issuer and something else as the subject (which will be the same as the issuer of your certificate). You need to save that vertificate as an additional certificate for signing. We&amp;#8217;ll refer to the file containing this cert as othercert.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To &lt;code&gt;BrowserPlus.crt&lt;/code&gt;, you add the 3 certificates.  If your CA is a common one, you can probably omit the CA root certificate.&lt;/p&gt;
&lt;p&gt;As for signing the payload, you take a zip with Ruby scripts inside and use &lt;code&gt;openssl&lt;/code&gt; from the commandline.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ openssl smime -sign -inkey HacketyPlus.key -signer HacketyPlus.crt \
    -certfile HacketyPlus.other -in Payload-1.0.0.zip -out Payload-1.0.0.p7m \
    -nodetach -binary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test unpacking the payload with your master &lt;code&gt;BrowserPlus.crt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ openssl smime -verify -CAfile BrowserPlus.crt \
    -in Payload-1.0.0.p7m -out Payload-1.0.0.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, yeah, cert created.  Signing and unpacking is good.&lt;/p&gt;
&lt;p&gt;The zip itself should have Ruby scripts and a &lt;code&gt;manifest.json&lt;/code&gt; in the root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Eval-1.0.0.zip:
    manifest.json
    eval.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Now, what goes in the Ruby scripts?  Here&amp;#8217;s a trivial example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;
class Eval
  def initialize(args)
  end

  def eval(bp, args)
    begin
      code = args['code']
      obj = Kernel.eval(code, TOPLEVEL_BINDING)
      bp.complete(obj.inspect)
    rescue Exception =&gt; err
      bp.error('FAIL', "Error: #{err}")
    end
  end
end

RubyCoreletDefinition = {
  'class' =&gt; "Eval",
  'name' =&gt; "Eval",
  'major_version' =&gt; 1,
  'minor_version' =&gt; 0,
  'micro_version' =&gt; 0,
  'documentation' =&gt; 'Run any Ruby whatsoever.',
  'functions' =&gt;
  [
    { 
      'name' =&gt; 'eval',
      'documentation' =&gt; "Executes a string of Ruby code.
         Returns a string of the inspected data.",
      'arguments' =&gt;
      [ 
        { 
          'name'          =&gt; 'code',
          'type'          =&gt; 'string',
          'required'      =&gt; true,
          'documentation' =&gt; 'The code to execute.'
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gah.  That&amp;#8217;s a pretty arduous Hello World.  The definition at the bottom declares the signature of every method you expose to JavaScript.&lt;/p&gt;
&lt;p&gt;Take particular note of the &lt;code&gt;eval&lt;/code&gt; method.  For every method you offer up, you get a pair of arguments: the first being a &lt;code&gt;bp&lt;/code&gt; object for communicating with BrowserPlus and an &lt;code&gt;args&lt;/code&gt; hash containing the incoming &lt;span class="caps"&gt;JSON&lt;/span&gt;-marshalled object.&lt;/p&gt;
&lt;p&gt;We need not go through that mess, though.  Since I was able to unpack the RubyInterpreter corelet, I&amp;#8217;ve injected a bit of code into my version (3.1.2) to make this more comfortable for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;
class Eval
  bp_version "1.0.0"
  bp_doc "Run any Ruby whatsoever."

  def eval(code)
    obj = Kernel.eval(code, TOPLEVEL_BINDING)
    obj.inspect
  end
  bp_doc :eval, 
    "Executes a string of Ruby code.
     (code: string) The code to execute."
end

RubyCoreletDefinition = Eval.to_corelet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code that makes this possible is found in &lt;a href="http://github.com/why/fakeplus/tree/master/stdlib/bp_hacks.rb"&gt;stdlib/bp_hacks.rb&lt;/a&gt; in the RubyInterpreter 3.1.2 download.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;As for serving up all these libs, I give you &lt;a href="http://github.com/why/fakeplus"&gt;FakePlus&lt;/a&gt;.  This is a very small Camping app, accompanied by a &lt;span class="caps"&gt;YAML&lt;/span&gt; index.  The index lists all the available additions.  The Camping app mimicks Yahoo!&amp;#8217;s web service at &lt;code&gt;browserplus.yahoo.com/api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you can mess with the Eval addition by visiting &lt;a href="http://plus.hackety.org/eval.html"&gt;here&lt;/a&gt; once you&amp;#8217;ve got the hacks at the beginning all nicely in place.  And I think if you horse around on that page for a little while, it will become very evident whether things are sandboxed or not.&lt;/p&gt;</content></entry></feed>
