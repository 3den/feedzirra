<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:cfis.savagexi.com,2005:/articles</id>
  <link rel="alternate" type="text/html" href="http://cfis.savagexi.com"/>
  <link rel="self" type="application/atom+xml" href="http://cfis.savagexi.com/articles.atom"/>
  <title>cfis : </title>
  <subtitle type="html">Charlie Savage's Blog</subtitle>
  <updated>2008-11-13T15:46:30-07:00</updated>
  <generator version="4.x" uri="http://www.typosphere.org">Typo</generator>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/504</id>
    <published>2008-11-13T01:44:03-07:00</published>
    <updated>2008-11-13T15:46:30-07:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Profiling Your Rails Application - Take Two</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Last year I wrote about how to <a href="http://cfis.savagexi.com/2007/07/10/how-to-profile-your-rails-application">profile</a> your Rails application, which is a lot harder then it seems. Its not  		so much the profiling itself - its easy enough to create one-off results.  		Instead, its coming up with a reproducible process that lets you measure  		performance changes over time.</p>
<p>Some things that don't work over the long term:</p>
<ul>
    <li>Insert profiling code into your application code</li>
    <li>Use unit tests for profiling</li>/
    <li>Use functional tests for profiling</li>
    <li>Use integration tests for profiling</li>
    <li>Modify standard rails environments (test, development, production  		  for profiling)</li>
</ul>
<p>So the latest version of <a href="http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0">ruby-prof</a> introduces a new approach to profiling  		your Ruby or Rails code that is heavily based on the excellent work <a href="http://bitsweat.net/">Jeremy</a>  		has done on the request profiler included in newer versions of Rails.</p>
<p>The basic idea is to extend Ruby's TestUnit library so that individual test  		cases are profiled by including a new RubyProf::Test module. When you include this module, ruby-prof will run each test once as a warm up  		and then ten more times to gather profiling data (using another new feature  		of the 0.7.0 release, the ability to pause and resume a profiling run).  Profile data is then output for each test.</p>
<p>Let's look at an example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> ExampleTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br />  <br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_stuff<br />    puts <span style="color: rgb(255, 0, 0);">&quot;Test method&quot;</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The line <tt><span style="font-weight: bold;"> 		<span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test</tt>  		turns the test case into a profiling test case. The same approach  		could be used for hooking into other testing frameworks - all patches are  		of course welcome!</p>
<h3>Using a Profile Environment for Rails</h3>
<p>Now lets talk about profiling Rails. There are two main issues that make it harder then it seems.</p>
<p>First, to get any useful data you need to profile a Rails app using the production environment settings in conjunction with a test database.  		Using the development environment doesn't work because the time it takes  		Rails to reload classes on each request drowns out any useful information.</p>
<p>Second, how should profile tests be written and where should they go?</p>
<p>The solution I've adopted is to use functional like-tests that use a  		PROFILE environment, and place them in a directory called test/profile.</p>
<p>Let's look at another example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 128);">require</span></span> File<span style="color: rgb(153, 0, 0);">.</span>dirname<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">__FILE__</span></span><span style="color: rgb(153, 0, 0);">)</span> <span style="color: rgb(153, 0, 0);">+</span> <span style="color: rgb(255, 0, 0);">'/../profile_test_helper'</span><br /><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> MyControllerTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br /><br />  fixtures<span style="color: rgb(153, 0, 0);"> :my_fixture</span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> setup<br />    <span style="color: rgb(0, 153, 0);">@controller</span> <span style="color: rgb(153, 0, 0);">=</span> MyController<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@request</span>    <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestRequest<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@response</span>   <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestResponse<span style="color: rgb(153, 0, 0);">.</span>new<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_get<br />    get<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">:index</span></span><span style="color: rgb(153, 0, 0);">)</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The only difference between a functional test and a profile test are  		the inclusion of the RubyProf::Test module and loading profile_test_helper.rb.  		profile_test_helper is unfortunately needed because the standard test_helper.rb  		file Rails uses loads the TEST environment. Hopefully future versions  		of Rails will fix this by allowing greater flexibility in specifying a test  		environment.</p>
<p>So to get started with profiling your Rails application:</p>
<ol>
    <li>Copy profile_test_helper.rb from the ruby-prof distribution to your  		  rails test directory</li>
    <li>Modify profile_test_helper.rb as needed to set ruby-prof's output  		  directory</li>
    <li>Create a profile.rb file in the environments directory</li>
    <li>Update your databases.yml file to include a profile database (just map it to your test database)</li>
    <li>Create a new directory test/profile</li>
    <li>Start writing profiling tests that look similar to the above example</li>
</ol>
<p>And now you'll have reproducible profiling tests cases.</p>
<p>So what's missing? A way of keeping track of how your  		applications performance changes over time. A quick hack is to use  		source control to keep profile tests results around. A more sophisticated  		solution would be to use ruby-prof's API to dump profile results into a  		database and then put a nice web front end onto it. Any takers?</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>Last year I wrote about how to <a href="http://cfis.savagexi.com/2007/07/10/how-to-profile-your-rails-application">profile</a> your Rails application, which is a lot harder then it seems. Its not  		so much the profiling itself - its easy enough to create one-off results.  		Instead, its coming up with a reproducible process that lets you measure  		performance changes over time.</p>
<p>Some things that don't work over the long term:</p>
<ul>
    <li>Insert profiling code into your application code</li>
    <li>Use unit tests for profiling</li>/
    <li>Use functional tests for profiling</li>
    <li>Use integration tests for profiling</li>
    <li>Modify standard rails environments (test, development, production  		  for profiling)</li>
</ul>
<p>So the latest version of <a href="http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0">ruby-prof</a> introduces a new approach to profiling  		your Ruby or Rails code that is heavily based on the excellent work <a href="http://bitsweat.net/">Jeremy</a>  		has done on the request profiler included in newer versions of Rails.</p>
<p>The basic idea is to extend Ruby's TestUnit library so that individual test  		cases are profiled by including a new RubyProf::Test module. When you include this module, ruby-prof will run each test once as a warm up  		and then ten more times to gather profiling data (using another new feature  		of the 0.7.0 release, the ability to pause and resume a profiling run).  Profile data is then output for each test.</p>
<p>Let's look at an example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> ExampleTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br />  <br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_stuff<br />    puts <span style="color: rgb(255, 0, 0);">&quot;Test method&quot;</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The line <tt><span style="font-weight: bold;"> 		<span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test</tt>  		turns the test case into a profiling test case. The same approach  		could be used for hooking into other testing frameworks - all patches are  		of course welcome!</p>
<h3>Using a Profile Environment for Rails</h3>
<p>Now lets talk about profiling Rails. There are two main issues that make it harder then it seems.</p>
<p>First, to get any useful data you need to profile a Rails app using the production environment settings in conjunction with a test database.  		Using the development environment doesn't work because the time it takes  		Rails to reload classes on each request drowns out any useful information.</p>
<p>Second, how should profile tests be written and where should they go?</p>
<p>The solution I've adopted is to use functional like-tests that use a  		PROFILE environment, and place them in a directory called test/profile.</p>
<p>Let's look at another example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 128);">require</span></span> File<span style="color: rgb(153, 0, 0);">.</span>dirname<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">__FILE__</span></span><span style="color: rgb(153, 0, 0);">)</span> <span style="color: rgb(153, 0, 0);">+</span> <span style="color: rgb(255, 0, 0);">'/../profile_test_helper'</span><br /><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> MyControllerTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br /><br />  fixtures<span style="color: rgb(153, 0, 0);"> :my_fixture</span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> setup<br />    <span style="color: rgb(0, 153, 0);">@controller</span> <span style="color: rgb(153, 0, 0);">=</span> MyController<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@request</span>    <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestRequest<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@response</span>   <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestResponse<span style="color: rgb(153, 0, 0);">.</span>new<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_get<br />    get<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">:index</span></span><span style="color: rgb(153, 0, 0);">)</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The only difference between a functional test and a profile test are  		the inclusion of the RubyProf::Test module and loading profile_test_helper.rb.  		profile_test_helper is unfortunately needed because the standard test_helper.rb  		file Rails uses loads the TEST environment. Hopefully future versions  		of Rails will fix this by allowing greater flexibility in specifying a test  		environment.</p>
<p>So to get started with profiling your Rails application:</p>
<ol>
    <li>Copy profile_test_helper.rb from the ruby-prof distribution to your  		  rails test directory</li>
    <li>Modify profile_test_helper.rb as needed to set ruby-prof's output  		  directory</li>
    <li>Create a profile.rb file in the environments directory</li>
    <li>Update your databases.yml file to include a profile database (just map it to your test database)</li>
    <li>Create a new directory test/profile</li>
    <li>Start writing profiling tests that look similar to the above example</li>
</ol>
<p>And now you'll have reproducible profiling tests cases.</p>
<p>So what's missing? A way of keeping track of how your  		applications performance changes over time. A quick hack is to use  		source control to keep profile tests results around. A more sophisticated  		solution would be to use ruby-prof's API to dump profile results into a  		database and then put a nice web front end onto it. Any takers?</p>

        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/503</id>
    <published>2008-11-12T00:09:35-07:00</published>
    <updated>2008-11-13T17:07:41-07:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">ruby-prof 0.7.0</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I'm happy to announce the release of 		<a href="http://rubyforge.org/projects/ruby-prof">ruby-prof</a> 0.7.0, the  		superfast, open-source, Ruby profiler that helps you find bottlenecks in  		your Ruby code. This release was a joint effort, with major contributions  		from <a href="http://bitsweat.net/">Jeremy Kemper</a> (aka bitsweat) of  		Rails fame and <a href="http://www.linkedin.com/pub/0/567/a2">Hin Boen</a>  		from CodeGear. There are two major new features in this release, as well  		as a number of smaller enhancements and bug fixes. For a full list of changes,  		take a look at the 		<a href="http://rubyforge.org/forum/forum.php?forum_id=28366">release notes</a>.</p>
<p>The first major new feature is improved Rails profiling, which I'll talk  		about in a separate <a href="http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two">post</a>.</p>
<p>The second major feature is significant internal changes that make it  		easier to integrate ruby-prof with IDEs. ruby-prof is already being used  		by Aptana's <a href="http://www.aptana.com/rails/">RadRails</a> and has  		been integrated into the next version of Code Gear's 		<a href="http://www.codegear.com/products/3rdrail">3rd Rail</a>. As part  		of this work, Hin has built a user interface for ruby-prof that lets a user  		inspect individual methods to see how much time they took as well as how  		they were called.</p>
<p>One big problem though, previous versions of ruby-prof only kept track  		of aggregate data. This made it impossible for Hin to create the user interface  		he wanted. For example, look at this call sequence:</p>
<pre><tt>     A<br />    / \<br />   B   K<br />  / \   \<br /> C   D   B<br />        / \<br />       C   D</tt></pre>
<p>With earlier versions of ruby-prof, there was no way to tell what percent  		of the time spent in method C was a result of the A -&gt; B -&gt; C call sequence  		versus the A -&gt; K -&gt; B -&gt; C call sequence. <br />
<br />
Or take another example:</p>
<pre><tt>  A    K<br />  |    |<br />  B    B<br />  |    |<br />  C    D	</tt></pre>
<p>In this case, if you tried to reconstruct the call sequence from ruby-prof  		you would end up with this incorrect result:</p>
<pre><tt>     A    K<br />     |  /<br />     B   <br />    / \ <br />  C    D	</tt></pre>
<p>So working with Hin, I rearchitected ruby-prof to keep track of full call  		sequences. Most likely you won't notice any difference - the changes will  		only affect you if you use ruby-prof's api to present results in a custom  		way. In that case, you'll have to update your code, which should only take  		a few minutes (to see the api in use, take a look at the various printer  		classes that ship with ruby-prof).</p>
<p>Enjoy, and all feedback is welcome.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>I'm happy to announce the release of 		<a href="http://rubyforge.org/projects/ruby-prof">ruby-prof</a> 0.7.0, the  		superfast, open-source, Ruby profiler that helps you find bottlenecks in  		your Ruby code. This release was a joint effort, with major contributions  		from <a href="http://bitsweat.net/">Jeremy Kemper</a> (aka bitsweat) of  		Rails fame and <a href="http://www.linkedin.com/pub/0/567/a2">Hin Boen</a>  		from CodeGear. There are two major new features in this release, as well  		as a number of smaller enhancements and bug fixes. For a full list of changes,  		take a look at the 		<a href="http://rubyforge.org/forum/forum.php?forum_id=28366">release notes</a>.</p>
<p>The first major new feature is improved Rails profiling, which I'll talk  		about in a separate <a href="http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two">post</a>.</p>
<p>The second major feature is significant internal changes that make it  		easier to integrate ruby-prof with IDEs. ruby-prof is already being used  		by Aptana's <a href="http://www.aptana.com/rails/">RadRails</a> and has  		been integrated into the next version of Code Gear's 		<a href="http://www.codegear.com/products/3rdrail">3rd Rail</a>. As part  		of this work, Hin has built a user interface for ruby-prof that lets a user  		inspect individual methods to see how much time they took as well as how  		they were called.</p>
<p>One big problem though, previous versions of ruby-prof only kept track  		of aggregate data. This made it impossible for Hin to create the user interface  		he wanted. For example, look at this call sequence:</p>
<pre><tt>     A<br />    / \<br />   B   K<br />  / \   \<br /> C   D   B<br />        / \<br />       C   D</tt></pre>
<p>With earlier versions of ruby-prof, there was no way to tell what percent  		of the time spent in method C was a result of the A -&gt; B -&gt; C call sequence  		versus the A -&gt; K -&gt; B -&gt; C call sequence. <br />
<br />
Or take another example:</p>
<pre><tt>  A    K<br />  |    |<br />  B    B<br />  |    |<br />  C    D	</tt></pre>
<p>In this case, if you tried to reconstruct the call sequence from ruby-prof  		you would end up with this incorrect result:</p>
<pre><tt>     A    K<br />     |  /<br />     B   <br />    / \ <br />  C    D	</tt></pre>
<p>So working with Hin, I rearchitected ruby-prof to keep track of full call  		sequences. Most likely you won't notice any difference - the changes will  		only affect you if you use ruby-prof's api to present results in a custom  		way. In that case, you'll have to update your code, which should only take  		a few minutes (to see the api in use, take a look at the various printer  		classes that ship with ruby-prof).</p>
<p>Enjoy, and all feedback is welcome.</p>

        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/502</id>
    <published>2008-11-11T01:31:03-07:00</published>
    <updated>2008-11-12T23:19:31-07:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/11/11/so-this-is-what-100k-people-look-like"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">So This is What 100k People Look Like </title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>No doubt this post is two weeks past its prime, but better late than  		never, right? On Sunday, October 26th, Yue and I headed downtown to check  		out Barak Obama's campaign rally at Civic Center park in the heart of Denver.</p>
<p>By the time we arrived the place was packed. In fact, it turned out that  		over <a href="http://www.denverpost.com/breakingnews/ci_10821877">100,000</a>  		of our closest friends were there, making it Obama's largest crowd in the  		United States up to that point. And I think the second largest crowed I've  		ever been in, surpassed only by watching fireworks on the 4th of July from  		the National Mall in Washington, DC).</p>
<p>Wanting to at least be able to see Obama, we managed to be the last two  		people allowed into the center of the park (versus around the periphery).  		Once inside, we squirreled our way about half way to the stage. As you can  		see in the pictures, that wasn't all that close, but close enough to catch  		a glimpse of Obama. The first picture is looking west towards Denver's City  		hall. If you're interested, click the picture to get a bigger version, then  		find the tree in the center of the stage under the Colorado flag, and look  		right 3.5 columns to see Obama working the crowd:</p>
<p><a href="http://cfis.savagexi.com/files/Obama_Denver.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Obama_Denver_Small.jpg" alt="Obama Denver Rally 2008" /></a>]</p>
<p>And here's the view looking back east, back towards the Colorado State  		Capital (supposedly Denver is the only city where the city hall faces the  		state Capital building, but I've never verified if that's true).</p>
<p><img src="http://cfis.savagexi.com/files/Crowd_Capital_Small.jpg" alt="Obama Denver Rally Capital" /></p>
<p>For the most part Obama stuck to his standard stump speech, but what  		struck me was its optimism and focus on working together.  		Nice words no doubt, but it was a nice change of pace from typical campaign  		bashing.</p>
<p>On the way out, there was a table for all the poor souls who lost their  		keys and cell phones that day:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Lost_Keys.jpg" alt="Lost Keys" /></p>
<p>And a couple pictures of Yue for good measure, that show what a beautiful day it was:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_City_Hall.jpg" alt="Yue City Hall" /></p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_Capital.jpg" alt="Yue Capital" /></p>
<p>Update: If you can't see Obama, check out Paul's <a href="http://blog.cleverelephant.ca/2008/11/on-guard.html">post</a>.  Paul also points out the snipers that are visible on top of City Hall.  And they weren't the only ones, there were plenty more to the north where Denver's taller buildings are located.</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>No doubt this post is two weeks past its prime, but better late than  		never, right? On Sunday, October 26th, Yue and I headed downtown to check  		out Barak Obama's campaign rally at Civic Center park in the heart of Denver.</p>
<p>By the time we arrived the place was packed. In fact, it turned out that  		over <a href="http://www.denverpost.com/breakingnews/ci_10821877">100,000</a>  		of our closest friends were there, making it Obama's largest crowd in the  		United States up to that point. And I think the second largest crowed I've  		ever been in, surpassed only by watching fireworks on the 4th of July from  		the National Mall in Washington, DC).</p>
<p>Wanting to at least be able to see Obama, we managed to be the last two  		people allowed into the center of the park (versus around the periphery).  		Once inside, we squirreled our way about half way to the stage. As you can  		see in the pictures, that wasn't all that close, but close enough to catch  		a glimpse of Obama. The first picture is looking west towards Denver's City  		hall. If you're interested, click the picture to get a bigger version, then  		find the tree in the center of the stage under the Colorado flag, and look  		right 3.5 columns to see Obama working the crowd:</p>
<p><a href="http://cfis.savagexi.com/files/Obama_Denver.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Obama_Denver_Small.jpg" alt="Obama Denver Rally 2008" /></a>]</p>
<p>And here's the view looking back east, back towards the Colorado State  		Capital (supposedly Denver is the only city where the city hall faces the  		state Capital building, but I've never verified if that's true).</p>
<p><img src="http://cfis.savagexi.com/files/Crowd_Capital_Small.jpg" alt="Obama Denver Rally Capital" /></p>
<p>For the most part Obama stuck to his standard stump speech, but what  		struck me was its optimism and focus on working together.  		Nice words no doubt, but it was a nice change of pace from typical campaign  		bashing.</p>
<p>On the way out, there was a table for all the poor souls who lost their  		keys and cell phones that day:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Lost_Keys.jpg" alt="Lost Keys" /></p>
<p>And a couple pictures of Yue for good measure, that show what a beautiful day it was:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_City_Hall.jpg" alt="Yue City Hall" /></p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_Capital.jpg" alt="Yue Capital" /></p>
<p>Update: If you can't see Obama, check out Paul's <a href="http://blog.cleverelephant.ca/2008/11/on-guard.html">post</a>.  Paul also points out the snipers that are visible on top of City Hall.  And they weren't the only ones, there were plenty more to the north where Denver's taller buildings are located.</p>

        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/501</id>
    <published>2008-11-10T20:24:50-07:00</published>
    <updated>2008-11-13T15:47:07-07:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/11/10/rafting-down-the-grand-canyon"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Rafting Down the Grand Canyon</title>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Rafting down the Grand Canyon has been on my todo list for a long time.  		Over the years, I've rafted or canoed the James, Potomac, Rappahannock,  		Shenandoah, Arkansas, Taylor (well that's mostly a creek), Green and Colorado  		rivers. But never the Grand Canyon.</p>
<p>So this summer it was time. Seven of us - Haydon, Dave, Natasha, Brian,  		Lauren, Yue and myself - took the plunge and paddled down the 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">upper  		part</a> of the Grand Canyon from Marble Canyon to the Bright Angel Trail.  		We went with 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">Outdoors  		Unlimited</a>, which I highly recommend. They not only provided equipment,  		but also knowledgeable guides and great food.</p>
<p>Here's all of us by a grotto a few hundred feet above the Colorado River  		(from left to right is Dave, Haydon, Yue, myself, Brian, Natasha and Lauren  		- click the picture for a bigger version):</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Grotto.jpg"> 		<img height="431" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Grotto_Small.jpg" alt="Group" /></a></p>
<p>There are several different types of trips you can take down the canyon  		- we opted for a paddle trip. A paddle trip is just like it sounds - you  		get to paddle your way down the canyon using yellow, rubber boats, with  		six people per boat plus a guide. Depending on how much you like thrills,  		the best seats in the boat are the front two, where you get really wet from  		waves breaking over the bow when you hit a big rapid.</p>
<p>Yue, who isn't much of a camper, was a good sport about the whole thing  		once she discovered she could sleep in a tent versus sleeping under the  		stars. Here is our campground ffrom the third night, with yours truly sleeping  		outside:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Tent.jpg"> 		<img height="337" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Tent_Small.jpg" alt="Tent" /></a></p>
<p>It took five days and ninety five miles to get to our drop-off point  		- the deepest part of the canyon at the bottom of the 		<a href="http://en.wikipedia.org/wiki/Bright_Angel_Trail">Bright Angel Trail</a>..  		From there its an eight mile hike, and 4,380 feet up, to get to the visitor  		center on the South Rim. I had hiked the very top bit of the trail twenty  		years ago, but hadn't been back since.</p>
<p>Its an absolutely beautiful trail, surprisingly cool on the bottom half  		(well, we did start at 7am) as it climbs up along a small creek. Here is  		what it looks like once you've hiked about two miles and reached the top  		of the inner gorge - the picture is looking south with the<a href="http://en.wikipedia.org/wiki/Great_Unconformity">  		Great Unconformity</a> in the foreground and the towering south wall in  		the background:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail_Small.jpg" alt="Bright Angel Trail" /></a></p>
<p>Dave took the prize, hiking up in an amazing time of 2:45, followed by  		Lauren and Natasha at 3:15, and the rest of us at 3:45 (which by the way  		I was quite proud of).</p>
<p>Here the obligatory picture from the top:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View_Small.jpg" alt="Rim View" /></a></p>
<p>And here's Lauren, Natasha, Haydon and Brian a enjoying some well-deserved  		ice cream.</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top_Small.jpg" alt="At the Top" /></a></p>
<p>And some of our better pictures:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_1.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_Small.jpg" alt="Group" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue_Small.jpg" alt="Yue and Brian" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave_Small.jpg" alt="Dave and Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp_Small.jpg" alt="Brian's Camp" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat.jpg"> 		<img height="430" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat_Small.jpg" alt="Haydon on Boat" /></a></p>
<p>&amp;</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha_Small.jpg" alt="Yue and Natasha" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie_Small.jpg" alt="Lauren Brian Yue Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren_Small.jpg" alt="Haydon Brian Lauren" /></a></p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>Rafting down the Grand Canyon has been on my todo list for a long time.  		Over the years, I've rafted or canoed the James, Potomac, Rappahannock,  		Shenandoah, Arkansas, Taylor (well that's mostly a creek), Green and Colorado  		rivers. But never the Grand Canyon.</p>
<p>So this summer it was time. Seven of us - Haydon, Dave, Natasha, Brian,  		Lauren, Yue and myself - took the plunge and paddled down the 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">upper  		part</a> of the Grand Canyon from Marble Canyon to the Bright Angel Trail.  		We went with 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">Outdoors  		Unlimited</a>, which I highly recommend. They not only provided equipment,  		but also knowledgeable guides and great food.</p>
<p>Here's all of us by a grotto a few hundred feet above the Colorado River  		(from left to right is Dave, Haydon, Yue, myself, Brian, Natasha and Lauren  		- click the picture for a bigger version):</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Grotto.jpg"> 		<img height="431" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Grotto_Small.jpg" alt="Group" /></a></p>
<p>There are several different types of trips you can take down the canyon  		- we opted for a paddle trip. A paddle trip is just like it sounds - you  		get to paddle your way down the canyon using yellow, rubber boats, with  		six people per boat plus a guide. Depending on how much you like thrills,  		the best seats in the boat are the front two, where you get really wet from  		waves breaking over the bow when you hit a big rapid.</p>
<p>Yue, who isn't much of a camper, was a good sport about the whole thing  		once she discovered she could sleep in a tent versus sleeping under the  		stars. Here is our campground ffrom the third night, with yours truly sleeping  		outside:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Tent.jpg"> 		<img height="337" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Tent_Small.jpg" alt="Tent" /></a></p>
<p>It took five days and ninety five miles to get to our drop-off point  		- the deepest part of the canyon at the bottom of the 		<a href="http://en.wikipedia.org/wiki/Bright_Angel_Trail">Bright Angel Trail</a>..  		From there its an eight mile hike, and 4,380 feet up, to get to the visitor  		center on the South Rim. I had hiked the very top bit of the trail twenty  		years ago, but hadn't been back since.</p>
<p>Its an absolutely beautiful trail, surprisingly cool on the bottom half  		(well, we did start at 7am) as it climbs up along a small creek. Here is  		what it looks like once you've hiked about two miles and reached the top  		of the inner gorge - the picture is looking south with the<a href="http://en.wikipedia.org/wiki/Great_Unconformity">  		Great Unconformity</a> in the foreground and the towering south wall in  		the background:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail_Small.jpg" alt="Bright Angel Trail" /></a></p>
<p>Dave took the prize, hiking up in an amazing time of 2:45, followed by  		Lauren and Natasha at 3:15, and the rest of us at 3:45 (which by the way  		I was quite proud of).</p>
<p>Here the obligatory picture from the top:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View_Small.jpg" alt="Rim View" /></a></p>
<p>And here's Lauren, Natasha, Haydon and Brian a enjoying some well-deserved  		ice cream.</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top_Small.jpg" alt="At the Top" /></a></p>
<p>And some of our better pictures:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_1.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_Small.jpg" alt="Group" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue_Small.jpg" alt="Yue and Brian" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave_Small.jpg" alt="Dave and Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp_Small.jpg" alt="Brian's Camp" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat.jpg"> 		<img height="430" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat_Small.jpg" alt="Haydon on Boat" /></a></p>
<p>&amp;</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha_Small.jpg" alt="Yue and Natasha" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie_Small.jpg" alt="Lauren Brian Yue Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren_Small.jpg" alt="Haydon Brian Lauren" /></a></p>

        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/500</id>
    <published>2008-08-27T13:05:16-06:00</published>
    <updated>2008-11-13T15:47:48-07:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/08/27/dnc-event-map"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">DNC Event Map</title>
    <category term="design" scheme="http://cfis.savagexi.com/category/design" label="Design"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>One of the projects we've been working on for <a href="http://www.mapbuzz.com">MapBuzz </a>the last few weeks is building an interactive <a href="http://www.politicswest.com/mapbuzz">map </a>that shows all the events going on in Denver during the Democratic National Convention. Users can pick the event type and date they are interested in, and the map refreshes with icons for relevant events. By clicking on a given event, the user can see exactly where and when the event is taking place. I think the map turned out pretty well - its a good example of mashup pulling data from different sources.  In this case, base maps from Google, event information from Zvents, and all rendering/styling/page from MapBuzz.</p>
<p>It did clarify my thinking on a few points. First, Rails built-in page caching is really limited - it ignores query parameters and only works for html. So we had to hack around that, more info coming in a later post. Second, for building mashups xml really is superior to JSON simply because it supports namespaces (for all their pain points, namespaces really do facilitate merging of data from multiple sources). Third, when you need it, xslt is invaluable. Zvents serves its data using RSS, but our client only supports Atom. The simple solution was a quick xsl transformation to convert Zvent's rss feed over to Atom using libxslt (and thus MapBuzz's contribution back to the Ruby community to get the libxml and libxslt bindings back into good shape).</p>      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>One of the projects we've been working on for <a href="http://www.mapbuzz.com">MapBuzz </a>the last few weeks is building an interactive <a href="http://www.politicswest.com/mapbuzz">map </a>that shows all the events going on in Denver during the Democratic National Convention. Users can pick the event type and date they are interested in, and the map refreshes with icons for relevant events. By clicking on a given event, the user can see exactly where and when the event is taking place. I think the map turned out pretty well - its a good example of mashup pulling data from different sources.  In this case, base maps from Google, event information from Zvents, and all rendering/styling/page from MapBuzz.</p>
<p>It did clarify my thinking on a few points. First, Rails built-in page caching is really limited - it ignores query parameters and only works for html. So we had to hack around that, more info coming in a later post. Second, for building mashups xml really is superior to JSON simply because it supports namespaces (for all their pain points, namespaces really do facilitate merging of data from multiple sources). Third, when you need it, xslt is invaluable. Zvents serves its data using RSS, but our client only supports Atom. The simple solution was a quick xsl transformation to convert Zvent's rss feed over to Atom using libxslt (and thus MapBuzz's contribution back to the Ruby community to get the libxml and libxslt bindings back into good shape).</p>

        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/499</id>
    <published>2008-07-16T10:38:30-06:00</published>
    <updated>2008-07-17T02:18:27-06:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Resurrecting libxml-ruby</title>
    <category term="ruby" scheme="http://cfis.savagexi.com/category/ruby" label="Ruby"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
          <p>There is general discontent with the state of XML processing in Ruby - see for example  <a href="http://www.tbray.org/ongoing/When/200x/2006/08/22/REXML">here</a> or <a href="http://enfranchisedmind.com/blog/2008/03/24/rexml-dynamic-typing-lose/">here</a>. An obvious solution is to use <a href="http://xmlsoft.org/">libxml</a>. However that has been a non-starter since the  <a href="http://libxml.rubyforge.org/">libxml</a> Ruby bindings have historically caused numerous segementation faults, don't run on  Windows and recently lost their current maintainer, Dan Janowski. Making it even more frustrating is that Dan had spent  the last year rearchitecting the bindings, successfully fixing the segmentation faults.</p>
          <p>Since <a href="http://www.mapbuzz.com">MapBuzz</a> heavily depends on libxml, it seemed time to step in and contribute.  Over the last two weeks  I've added support for Windows, cleaned out the bug database and patch list, resolved the few remaining segmentation issues, greatly improved the RDocs and  refactored large portions of the code base to conform with modern Ruby extension standards.</p>
          <p>After iterating through a couple of releases over the last two weeks, the Ruby libxml community is happy to announce the availability of  version 0.8.0,  which we believe is ready for prime time. It offers a great combination of speed, functionality and conformance (libxml  <a href="http://xmlsoft.org/">passes</a> all 1800+  tests in the <a href="http://www.oasis-open.org/committees/xml-conformance/">OASIS XML Tests  Suite</a>).</p>
          <p>So  give it a try - its as easy to install as: </p>
          <pre><tt></tt>gem install libxml-ruby</pre>
<p>If you're on Windows there may be an extra step if you haven't already installed libxml2.  If not, then the libxml-ruby distribution includes a prebuilt libxml2 dll in the libxml-ruby/mingw directory.  Copy the dll to libxml-ruby/lib, your Ruby bin directory, or somewhere on your path (basically put it someplace where Windows can find it). </p>
<p>Undoubtedly there are still some bugs left, so please  <a href="http://rubyforge.org/tracker/?atid=1971&amp;group_id=494&amp;func=browse">report</a> anything you find, so we can fix them in future releases. </p>
<h3>Blindingly Fast</h3>
<p>The major reason people consider using libxml-ruby is performance. Here are the results from running (on my laptop) a few simple benchmarks that have recently been blogged about on the Web (you can find them in the benchmark directory of  the libxml distribution).</p>
<p>From <a href="http://depixelate.com/2008/4/23/ruby-xml-parsing-benchmarks">Zack Chandler</a>:</p>
<pre><tt>              user     system      total        real
libxml    0.032000   0.000000   0.032000 (  0.031000)
Hpricot   0.640000   0.031000   0.671000 (  0.890000)
REXML     1.813000   0.047000   1.860000 (  2.031000)</tt></pre>
From <a href="https://svn.concord.org/svn/projects/trunk/common/ruby/xml_benchmarks/">Stephen Bannasch:</a>
<pre>
              user     system      total        real
libxml    0.641000   0.031000   0.672000 (  0.672000)
hpricot   5.359000   0.062000   5.421000 (  5.516000)
rexml    22.859000   0.047000  22.906000 ( 23.203000)
</pre>
<p>From <a href="http://yomi.at/archives/19">Andreas Meingast</a>: </p>
<pre><tt>LIBXML THROUGHPUT:
	10.2570516817665 MB/s
	10.2570830340359 MB/s
	12.6992253283934 MB/s
  10.2570516817665 MB/s
	8.51116888387252 MB/s
	10.2570830340359 MB/s

HPRICOT THROUGHPUT:
	0.211597647822036 MB/s
	0.202390771964726 MB/s
	0.180272812529665 MB/s
	0.198474511420818 MB/s
	0.198474499681793 MB/s
  0.180925089981179 MB/s

REXML THROUGHPUT:
	0.130301425548982 MB/s
	0.131630590068325 MB/s
	0.128316078417727 MB/s
	0.125203555921636 MB/s
	0.120181872867636 MB/s
	0.115330940074107 MB/s</tt></pre>
<p>I can't vouch for the appropriateness of the tests, but they show libxml clocking in at 10x hpricot and 30x to 60x REXML. I'd be happy to accept additional tests or more appropriate tests if you have any.</p>

<h3>An Embarrassment of Riches</h3>
          <p>In addition to performance, the libxml-ruby  bindings provide impressive  coverage of libxml's functionality. Goodies include:          </p>
          <ul>
            <li>SAX</li>
            <li>DOM</li>
            <li>XMLReader (streaming interface) </li>
            <li> XPath</li>
            <li>XPointer</li>
            <li>XML Schema</li>
            <li>DTDs </li>
            <li>XSLT (split into the <a href="http://rubyforge.org/projects/libxsl/">libxslt-ruby</a> bindings) </li>
        </ul>
          <p>Now, your first reaction might be that SAX, DOM and XPath are all you need, but validating parsers make it a whole lot easier to <a href="http://cfis.savagexi.com/articles/2007/02/08/a-sane-way-of-sanitizing-html">sanitize</a> user contributed content on web sites. And the XMLReader  offers a clever way of combining the DOM's ease of use (well, ok, compared to SAX at least) with SAX's memory and speed advantages. </p>
          <p>Better yet, most of this functionality is exposed via an easy-to-use, Ruby like API. There are still of course  some warts lurking in the code, where libxml's C api leaks through to Ruby, but they are being removed one by one. And for those of you who aren't C hackers, much of this work can be done in good old Ruby. </p>
          <h3>A Long History </h3>
          <p>For such a useful, and full-featured library, the libxml-ruby bindings have a star-crossed history. Out of curiosity, I went back and traced their  lineage. <a href="http://sean.chittenden.org/">Sean Chittenden</a> originally <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/7b946bfb42564929/0f92dfeb951ed7d0?lnk=gst&amp;amp;q=libxml#0f92dfeb951ed7d0">wrote</a> them back in 2002. At the start of 2005,  Trans Onoma <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/3bf6b57ec81198c/746badd2919c859b?lnk=gst&amp;q=trans+libxml#746badd2919c859b">adopted</a> the project after Sean had moved on, and at the end of 2005 the bindings found their current <a href="http://libxml.rubyforge.org/">home</a> on Ruby Forge. At that point Ross Bamford took <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/50c380881c5faff8/21e98aa900a96ef0?lnk=gst&amp;amp;q=libxml#">over</a> maintenance and  worked on the bindings for roughly a year, until early 2007, when then the bindings  again became unmaintained. Dan Janowski <a href="http://rubyforge.org/pipermail/libxml-devel/2007-August/000430.html">picked</a> up the ball in 2007 and completely overhauled the binding's memory model. Sadly,  Dan had to <a href="http://rubyforge.org/pipermail/libxml-devel/2008-March/000744.html">give</a> up active support this spring. </p>
          <p>But on the bright side, Trans, Dan and Sean are all once again active on the mailing list, providing valuable experience and insight. From my point of view, with the renewed push towards a production quality release, and bringing in new users, the libxml-ruby community is as healthy as it has been in a long while.</p>
      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>There is general discontent with the state of XML processing in Ruby - see for example  <a href="http://www.tbray.org/ongoing/When/200x/2006/08/22/REXML">here</a> or <a href="http://enfranchisedmind.com/blog/2008/03/24/rexml-dynamic-typing-lose/">here</a>. An obvious solution is to use <a href="http://xmlsoft.org/">libxml</a>. However that has been a non-starter since the  <a href="http://libxml.rubyforge.org/">libxml</a> Ruby bindings have historically caused numerous segementation faults, don't run on  Windows and recently lost their current maintainer, Dan Janowski. Making it even more frustrating is that Dan had spent  the last year rearchitecting the bindings, successfully fixing the segmentation faults.</p>
          <p>Since <a href="http://www.mapbuzz.com">MapBuzz</a> heavily depends on libxml, it seemed time to step in and contribute.  Over the last two weeks  I've added support for Windows, cleaned out the bug database and patch list, resolved the few remaining segmentation issues, greatly improved the RDocs and  refactored large portions of the code base to conform with modern Ruby extension standards.</p>
          <p>After iterating through a couple of releases over the last two weeks, the Ruby libxml community is happy to announce the availability of  version 0.8.0,  which we believe is ready for prime time. It offers a great combination of speed, functionality and conformance (libxml  <a href="http://xmlsoft.org/">passes</a> all 1800+  tests in the <a href="http://www.oasis-open.org/committees/xml-conformance/">OASIS XML Tests  Suite</a>).</p>
          <p>So  give it a try - its as easy to install as: </p>
          <pre><tt></tt>gem install libxml-ruby</pre>
<p>If you're on Windows there may be an extra step if you haven't already installed libxml2.  If not, then the libxml-ruby distribution includes a prebuilt libxml2 dll in the libxml-ruby/mingw directory.  Copy the dll to libxml-ruby/lib, your Ruby bin directory, or somewhere on your path (basically put it someplace where Windows can find it). </p>
<p>Undoubtedly there are still some bugs left, so please  <a href="http://rubyforge.org/tracker/?atid=1971&amp;group_id=494&amp;func=browse">report</a> anything you find, so we can fix them in future releases. </p>
<h3>Blindingly Fast</h3>
<p>The major reason people consider using libxml-ruby is performance. Here are the results from running (on my laptop) a few simple benchmarks that have recently been blogged about on the Web (you can find them in the benchmark directory of  the libxml distribution).</p>
<p>From <a href="http://depixelate.com/2008/4/23/ruby-xml-parsing-benchmarks">Zack Chandler</a>:</p>
<pre><tt>              user     system      total        real
libxml    0.032000   0.000000   0.032000 (  0.031000)
Hpricot   0.640000   0.031000   0.671000 (  0.890000)
REXML     1.813000   0.047000   1.860000 (  2.031000)</tt></pre>
From <a href="https://svn.concord.org/svn/projects/trunk/common/ruby/xml_benchmarks/">Stephen Bannasch:</a>
<pre>
              user     system      total        real
libxml    0.641000   0.031000   0.672000 (  0.672000)
hpricot   5.359000   0.062000   5.421000 (  5.516000)
rexml    22.859000   0.047000  22.906000 ( 23.203000)
</pre>
<p>From <a href="http://yomi.at/archives/19">Andreas Meingast</a>: </p>
<pre><tt>LIBXML THROUGHPUT:
	10.2570516817665 MB/s
	10.2570830340359 MB/s
	12.6992253283934 MB/s
  10.2570516817665 MB/s
	8.51116888387252 MB/s
	10.2570830340359 MB/s

HPRICOT THROUGHPUT:
	0.211597647822036 MB/s
	0.202390771964726 MB/s
	0.180272812529665 MB/s
	0.198474511420818 MB/s
	0.198474499681793 MB/s
  0.180925089981179 MB/s

REXML THROUGHPUT:
	0.130301425548982 MB/s
	0.131630590068325 MB/s
	0.128316078417727 MB/s
	0.125203555921636 MB/s
	0.120181872867636 MB/s
	0.115330940074107 MB/s</tt></pre>
<p>I can't vouch for the appropriateness of the tests, but they show libxml clocking in at 10x hpricot and 30x to 60x REXML. I'd be happy to accept additional tests or more appropriate tests if you have any.</p>

<h3>An Embarrassment of Riches</h3>
          <p>In addition to performance, the libxml-ruby  bindings provide impressive  coverage of libxml's functionality. Goodies include:          </p>
          <ul>
            <li>SAX</li>
            <li>DOM</li>
            <li>XMLReader (streaming interface) </li>
            <li> XPath</li>
            <li>XPointer</li>
            <li>XML Schema</li>
            <li>DTDs </li>
            <li>XSLT (split into the <a href="http://rubyforge.org/projects/libxsl/">libxslt-ruby</a> bindings) </li>
        </ul>
          <p>Now, your first reaction might be that SAX, DOM and XPath are all you need, but validating parsers make it a whole lot easier to <a href="http://cfis.savagexi.com/articles/2007/02/08/a-sane-way-of-sanitizing-html">sanitize</a> user contributed content on web sites. And the XMLReader  offers a clever way of combining the DOM's ease of use (well, ok, compared to SAX at least) with SAX's memory and speed advantages. </p>
          <p>Better yet, most of this functionality is exposed via an easy-to-use, Ruby like API. There are still of course  some warts lurking in the code, where libxml's C api leaks through to Ruby, but they are being removed one by one. And for those of you who aren't C hackers, much of this work can be done in good old Ruby. </p>
          <h3>A Long History </h3>
          <p>For such a useful, and full-featured library, the libxml-ruby bindings have a star-crossed history. Out of curiosity, I went back and traced their  lineage. <a href="http://sean.chittenden.org/">Sean Chittenden</a> originally <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/7b946bfb42564929/0f92dfeb951ed7d0?lnk=gst&amp;amp;q=libxml#0f92dfeb951ed7d0">wrote</a> them back in 2002. At the start of 2005,  Trans Onoma <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/3bf6b57ec81198c/746badd2919c859b?lnk=gst&amp;q=trans+libxml#746badd2919c859b">adopted</a> the project after Sean had moved on, and at the end of 2005 the bindings found their current <a href="http://libxml.rubyforge.org/">home</a> on Ruby Forge. At that point Ross Bamford took <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/50c380881c5faff8/21e98aa900a96ef0?lnk=gst&amp;amp;q=libxml#">over</a> maintenance and  worked on the bindings for roughly a year, until early 2007, when then the bindings  again became unmaintained. Dan Janowski <a href="http://rubyforge.org/pipermail/libxml-devel/2007-August/000430.html">picked</a> up the ball in 2007 and completely overhauled the binding's memory model. Sadly,  Dan had to <a href="http://rubyforge.org/pipermail/libxml-devel/2008-March/000744.html">give</a> up active support this spring. </p>
          <p>But on the bright side, Trans, Dan and Sean are all once again active on the mailing list, providing valuable experience and insight. From my point of view, with the renewed push towards a production quality release, and bringing in new users, the libxml-ruby community is as healthy as it has been in a long while.</p>


        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/498</id>
    <published>2008-06-22T19:52:39-06:00</published>
    <updated>2008-06-23T16:34:02-06:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/06/22/a-new-take-on-transparent-pngs-in-ie6-performance-and-vml"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">A New Take on Transparent PNGs in IE6 - Performance and VML</title>
    <category term="design" scheme="http://cfis.savagexi.com/category/design" label="Design"/>
    <category term="web" scheme="http://cfis.savagexi.com/category/web" label="Web"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
          <p>The web is full of <a href="http://24ways.org/2007/supersleight-transparent-png-in-ie6">articles</a> discussing how to render transparent 24-bit png images in IE6 - so why write  another one?</p>
          <p>Three reasons. First, although the long hoped for demise of IE6 is finally showing  some progress, IE6 still has a 20% to 40% market share, which is still more than Firefox. Second, none of the existing articles talk about the terrible performance degradations caused by the most common solutions proposed to display png files and  how to avoid them. Third, I discovered an alternate solution using VML that I've never seen documented.</p>
          <h3>AlphaImageLoader is Slow</h3>
          <p>Let's start with the performance issues. Most websites recommend enabling transparent png's in IE6 by running  javascript code when the page loads. The javascript finds all png images on a page and applies Microsoft's proprietary <a href="http://msdn.microsoft.com/en-us/library/ms532969(VS.85).aspx">AlphaImageLoader</a> filter. </p>
          <p>What almost no article mentions (the one I linked to above being an exception) is how badly this degrades page load performance. But don't take my word for it - I've setup an <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page that loads sea-level rise data from Peter Black's excellent climate atlas <a href="http://environmentaldefenseblogs.org/climateatlas/">blog</a>.</p>
          <p>At the top of the page are several buttons - click the far left one, titled <strong>Slow</strong>, to see how the typical png solution performs. Go ahead, <a href="http://cfis.savagexi.com/transparent_png_ie6.html">try</a> it now (using IE6 of course). Notice how the browser freezes for over 10 seconds and doesn't display any images until the very end? Not very good, is it?</p>
          <p>But if you <a href="http://www.climateatlas.org/usslr.html">view</a> the same files using Google maps, the performance is much better. And you can also see each tile as it loads, instead of waiting for the end. So how did Google achieve this sleight of hand? A bit of digging shows the trick - instead of fixing all the images at once, Google fixes them one at a time. This is done by attaching an onload event handler to each image that needs to be fixed. When the image is loaded, the onload event applies the AlphaImageLoader filter. This avoids IE freezing. And to avoid the annoying flashing caused by applying the filter,  images start off &quot;hidden&quot; and are only made visible when  their onload events are fired. Clever, isn't it?</p>
          <p>Now go back to the <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page and click the second button, titled  <strong>Fast</strong>. The difference is amazing - like night and day. As an extra bonus, the onload event for image elements that point to invalid or non-existent images never fires, meaning that they are never made visible. That neat trick avoids  IE displaying an annoying red x (<img src="http://cfis.savagexi.com/i_dont_exist" alt="Invalid image" />) for invalid images. </p>
          <h3>A New Approach - VML </h3>
          <p>A couple of years ago I discovered an entirely new way of displaying 24-bit transparent png images in IE - use VML. Somehow I've never managed to put it down on paper (wrong metaphor I know, but humor me). I figure I'd better do it now before this tidbit of knowledge becomes  irrelevant. </p>
          <p>It's little known that VML supports not only vector graphics, but also raster images via its <a href="Thankfully IE6 is finally on its way out, but it still has a market share somewhere between 20% to 40%. I've meant to post this for years, but I figure I better do it know before this knowledge becomes totally irrelevant. ">image</a> element. And I've never seen it mentioned that the vml:image element supports transparent 24-bit pngs. </p>
          <p>To see VML in action,  go back to the <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page and click the third button, titled <strong>VML</strong>. The first time you click the button, the performance won't be very good since all the images are first downloaded. But once the page is loaded, click the <strong>Clear</strong> button and then click the <strong>VML</strong> button. From my testing, the performance is noticeably better than using the AlphaImageLoader.</p>
          <p>There are several things to note about the VML code that took me  hours to figure out:</p>
					<ul>
						<li>The setupVml function enables VML via Javascript - its two lines of code are barely documented on the web and thus took hours of fiddling to get working</li>
						<li>You must set the width and height of the VML images, otherwise nothing is displayed</li>
						<li>You must set the coordsize of the  VML images - otherwise they will be randomly one pixel to short or wide</li>
					</ul>
					<p>Sadly, the VML solution suffers three problems that make in unsuitable most of the time. First, notice the images are a bit fuzzy when displayed with VML. I haven't a clue as to why. </p>
					<p>Second, images that don't load are shown with IE's annoying red x mentioned above. The problem is that VML  images don't seem to support the onload event (or onreadystate), so there is now way to start them off as hidden and then make them visible once the image has loaded.</p>
					<p>Third,  IE6 doesn't  cache VML images across page loads. To see this, reload the example page and press the <strong>VML</strong> button again. Notice the long delay? If you watch IE's http traffic (say using <a href="http://www.fiddlertool.com/fiddler/">Fiddler</a>), you'll see that IE6 requests each image again. It does not do that for html image elements, which you can verify by running the same experiment but clicking the <strong>Fast</strong> button instead.</p>
					<p>Together, these three issues make the VML solution inferior to the AlphaImageLoader solution, but I thought I'd write it down in case someone ever needs to know about it. </p>
      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>The web is full of <a href="http://24ways.org/2007/supersleight-transparent-png-in-ie6">articles</a> discussing how to render transparent 24-bit png images in IE6 - so why write  another one?</p>
          <p>Three reasons. First, although the long hoped for demise of IE6 is finally showing  some progress, IE6 still has a 20% to 40% market share, which is still more than Firefox. Second, none of the existing articles talk about the terrible performance degradations caused by the most common solutions proposed to display png files and  how to avoid them. Third, I discovered an alternate solution using VML that I've never seen documented.</p>
          <h3>AlphaImageLoader is Slow</h3>
          <p>Let's start with the performance issues. Most websites recommend enabling transparent png's in IE6 by running  javascript code when the page loads. The javascript finds all png images on a page and applies Microsoft's proprietary <a href="http://msdn.microsoft.com/en-us/library/ms532969(VS.85).aspx">AlphaImageLoader</a> filter. </p>
          <p>What almost no article mentions (the one I linked to above being an exception) is how badly this degrades page load performance. But don't take my word for it - I've setup an <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page that loads sea-level rise data from Peter Black's excellent climate atlas <a href="http://environmentaldefenseblogs.org/climateatlas/">blog</a>.</p>
          <p>At the top of the page are several buttons - click the far left one, titled <strong>Slow</strong>, to see how the typical png solution performs. Go ahead, <a href="http://cfis.savagexi.com/transparent_png_ie6.html">try</a> it now (using IE6 of course). Notice how the browser freezes for over 10 seconds and doesn't display any images until the very end? Not very good, is it?</p>
          <p>But if you <a href="http://www.climateatlas.org/usslr.html">view</a> the same files using Google maps, the performance is much better. And you can also see each tile as it loads, instead of waiting for the end. So how did Google achieve this sleight of hand? A bit of digging shows the trick - instead of fixing all the images at once, Google fixes them one at a time. This is done by attaching an onload event handler to each image that needs to be fixed. When the image is loaded, the onload event applies the AlphaImageLoader filter. This avoids IE freezing. And to avoid the annoying flashing caused by applying the filter,  images start off &quot;hidden&quot; and are only made visible when  their onload events are fired. Clever, isn't it?</p>
          <p>Now go back to the <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page and click the second button, titled  <strong>Fast</strong>. The difference is amazing - like night and day. As an extra bonus, the onload event for image elements that point to invalid or non-existent images never fires, meaning that they are never made visible. That neat trick avoids  IE displaying an annoying red x (<img src="http://cfis.savagexi.com/i_dont_exist" alt="Invalid image" />) for invalid images. </p>
          <h3>A New Approach - VML </h3>
          <p>A couple of years ago I discovered an entirely new way of displaying 24-bit transparent png images in IE - use VML. Somehow I've never managed to put it down on paper (wrong metaphor I know, but humor me). I figure I'd better do it now before this tidbit of knowledge becomes  irrelevant. </p>
          <p>It's little known that VML supports not only vector graphics, but also raster images via its <a href="Thankfully IE6 is finally on its way out, but it still has a market share somewhere between 20% to 40%. I've meant to post this for years, but I figure I better do it know before this knowledge becomes totally irrelevant. ">image</a> element. And I've never seen it mentioned that the vml:image element supports transparent 24-bit pngs. </p>
          <p>To see VML in action,  go back to the <a href="http://cfis.savagexi.com/transparent_png_ie6.html">example</a> page and click the third button, titled <strong>VML</strong>. The first time you click the button, the performance won't be very good since all the images are first downloaded. But once the page is loaded, click the <strong>Clear</strong> button and then click the <strong>VML</strong> button. From my testing, the performance is noticeably better than using the AlphaImageLoader.</p>
          <p>There are several things to note about the VML code that took me  hours to figure out:</p>
					<ul>
						<li>The setupVml function enables VML via Javascript - its two lines of code are barely documented on the web and thus took hours of fiddling to get working</li>
						<li>You must set the width and height of the VML images, otherwise nothing is displayed</li>
						<li>You must set the coordsize of the  VML images - otherwise they will be randomly one pixel to short or wide</li>
					</ul>
					<p>Sadly, the VML solution suffers three problems that make in unsuitable most of the time. First, notice the images are a bit fuzzy when displayed with VML. I haven't a clue as to why. </p>
					<p>Second, images that don't load are shown with IE's annoying red x mentioned above. The problem is that VML  images don't seem to support the onload event (or onreadystate), so there is now way to start them off as hidden and then make them visible once the image has loaded.</p>
					<p>Third,  IE6 doesn't  cache VML images across page loads. To see this, reload the example page and press the <strong>VML</strong> button again. Notice the long delay? If you watch IE's http traffic (say using <a href="http://www.fiddlertool.com/fiddler/">Fiddler</a>), you'll see that IE6 requests each image again. It does not do that for html image elements, which you can verify by running the same experiment but clicking the <strong>Fast</strong> button instead.</p>
					<p>Together, these three issues make the VML solution inferior to the AlphaImageLoader solution, but I thought I'd write it down in case someone ever needs to know about it. </p>


        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/496</id>
    <published>2008-06-16T23:56:32-06:00</published>
    <updated>2008-06-23T16:34:48-06:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/06/16/rails-super-simple-asynchronous-processing"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Rails - Simple Asynchronous Processing</title>
    <category term="design" scheme="http://cfis.savagexi.com/category/design" label="Design"/>
    <category term="rails" scheme="http://cfis.savagexi.com/category/rails" label="Rails"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
          <p>Sooner or later, for most large websites you have to bite the bullet and implement some form of asynchronous processing to deal with long-running tasks. For example, with <a href="http://www.mapbuzz.com">MapBuzz</a>  we have a several long-running tasks:</p>
          <ul>
            <li>Importing data</li>
            <li>Batch geodcoding</li>
            <li>Emailing event notifications to users </li>
          </ul>
          <p>If you're developing a Facebook application, moving long-running tasks to a background process or thread is critical since Facebook times out requests to your server within ten to twelve seconds.</p>
          <h3>So Many Choices</h3>
          <p>Having decided you need asynchronous processing, the next question is how to do it. And this is where things get complicated - there are a myriad of approaches, each applicable for certain problem domains. Let's look at some possibilities:</p>
          <ul>
            <li><strong>Spawn/Fork</strong> - Create  processes  on demand to perform  background tasks</li>
            <li><strong>Distributed Objects</strong> - Use a distributed object protocol (RMI, Corba, DCOM, DrB, etc) to communicate with another process to perform  background tasks </li>
            <li><strong>Job Queue</strong> - Persist tasks in shared files or databases and execute them using background processes</li>
            <li><strong>Messaging Processing</strong> - Send messages to another process  via a message bus </li>
          </ul>
          <p>In the Ruby world, there are a number of  implementations for each approach - a few examples include:</p>
          <ul>
            <li><strong>Spawn/Fork</strong> - <a href="http://rubyforge.org/projects/spawn/">Spawn</a></li>
            <li><strong>Distributed Objects</strong> - <a href="http://backgroundrb.rubyforge.org/index.html">BackgroundDRb</a></li>
            <li><strong>Job Queue</strong> - <a href="http://github.com/tobi/delayed_job/tree/master">Delayed Job (DJ)</a>, <a href="http://codeforpeople.rubyforge.org/svn/bj/trunk/README">BackgroundJob (BJ)</a>, <a href="http://rubyforge.org/projects/spawn/"></a><a href="http://github.com/ncr/background-fu/tree/master">BackgroundFu</a>, <a href="http://rubyforge.org/projects/starling/">Starling, </a><a href="http://xph.us/software/beanstalkd/">Beanstalkd</a>, <a href="http://code.google.com/p/sparrow/">Sparrow</a> </li>
            <li><strong>Message Sending </strong> - <a href="http://code.google.com/p/sparrow/"></a><a href="http://ap4r.rubyforge.org/wiki/wiki.pl?HomePage">AP4R</a></li>
          </ul>
          <p>Not surprisingly, most of these solutions are designed to work with Rails, since there's no need to speed up processing if its just another machine on the other end instead of an impatient human.</p>
          <p> Selecting the best one for your application is totally dependent on your use cases. Having said that, its still possible to reach some broad conclusions. Spawning or forking processes makes it impossible to offload processing to additional machines, so you'll quickly run into scalability limits. Distributed objects solve that problem, but experience has shown distributed object protocols are very brittle because they bind clients and servers so tightly together - thus I would never use them. Job queues are more reliable because tasks are represented in a standard  format (usually text based, such as xml) that is persisted to files or database tables. Message queues are similar, but add significantly more functionality such as message routing, transformation, prioritization, etc.</p>
          For many websites, a job queue is  the best solution. Job queues are relatively light weight and let you distribute processing across multiple machines. However, the ruby based solutions listed above require installing and managing additional software as well as writing the job processing code itself. They also make it more difficult to develop and test software since you know have to debug multiple processes at once.
          <h3>A Simple HTTP Based Solution</h3>
          <p>So what's a simpler solution? Reuse what you already have. Most Rails applications are divided into multiple instances, distributed across one or more machines, that embed an http server (mongrel, thin, ebb) for requests. Thus we already have our background processes and an easy way to communicate with them - http (of course!). And if your using mongrel or a proxy server (<a href="http://www.apsis.ch/pound">Pound</a>, <a href="http://lighttpd.org">Lighttpd</a>, <a href="http://nginx.net/">Nginx</a>, <a href="http://www.apache.org">Apache</a>, etc.), then you also get a built-in request queue.</p>
          <p>In other words:</p>
          <pre><tt>simple background queue = HTTP + Load Balancer + Rails instances </tt></pre>
          <p>Besides simplicity, a  big advantage to this approach is that  background tasks run within the Rails environment, giving you access to ActiveRecord, your models, etc. </p>
          <h3>Worker Plugin </h3>
          <p>Thus enters a new Rails plugin called worker (yeah the name leaves something to be desired). Let's look at an example:</p>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> ImportController <span style="color: #990000">&lt;</span> ApplicationController
  <span style="font-style: italic"><span style="color: #9A1900"># Add support for using workers</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">include</span></span> Worker

  <span style="font-style: italic"><span style="color: #9A1900"># Incoming requests are handled by this method</span></span>
  resource <span style="color: #990000">:</span>Geodata <span style="font-weight: bold"><span style="color: #0000FF">do</span></span><span class="style1">
    </span><span style="font-weight: bold"><span style="color: #0000FF">def</span></span> post
      <span style="font-weight: bold"><span style="color: #000000">read_file</span></span><span style="color: #990000">(</span>params<span style="color: #990000">)</span><span class="style1">
    </span><span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  
  <span style="font-style: italic"><span style="color: #9A1900"># This method handles requests in a worker process</span></span>
  resource <span style="color: #990000">:</span>process <span style="font-weight: bold"><span style="color: #0000FF">do</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">def</span></span> post
    <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">
</span></span>  private 
  
  <span style="font-weight: bold"><span style="color: #0000FF">def</span></span> <span style="font-weight: bold"><span style="color: #000000">read_file</span></span><span style="color: #990000">(</span>params<span style="color: #990000">)</span>
    worker_params <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #990000">:</span>file_name <span style="color: #990000">=&gt;</span> file_name<span style="color: #990000">,</span> 
      <span style="color: #990000">               :</span>tags <span style="color: #990000">=&gt;</span> params<span style="color: #990000">[</span><span style="color: #FF0000">'tags'</span><span style="color: #990000">],</span>
                     <span style="color: #990000">:</span>controller <span style="color: #990000">=&gt;</span> <span style="color: #FF0000">'import'</span><span style="color: #990000">,</span>
                     <span style="color: #990000">:</span>resource <span style="color: #990000">=&gt;</span> <span style="color: #FF0000">'process'</span><span style="color: #990000">,
                     </span><span style="color: #990000">:</span>map_id <span style="color: #990000">=&gt;</span> <span style="color: #009900">@map</span><span style="color: #990000">.</span>id<span style="color: #FF0000">}</span>

    <span style="font-style: italic"><span style="color: #9A1900"># Create worker request</span></span>
    create_worker<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">post</span></span><span style="color: #990000">(</span>worker_params<span style="color: #990000">)</span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span><span class="style1">
</span><span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
</tt></pre>
          <p>So how does this work? A user POSTs a file to  http://myserver/import/geodata. That method does various checks (deleted for brevity) and then sends a request to http://myserver/import/process which runs in a separate Rails instance. Although this  controller delegates back to itself (in  a separate process) it could call any controller it wishes.</p>
          <p>The worker plugin will pass a session key, if available, to the background process. That turns out to be very useful since it allows sharing session information between the foreground process and background process if you're storing session information since in memcached or a background database. That means you can use the same authentication and authorization mechanisms in the background process as you do in the foreground process.</p>
          <p>In addition, all worker requests are signed with a MD5 hash to verify that no-one in the middle is spoofing requests.</p>
          <h3>Environments and Configuration </h3>
          <p>By default, Rails applications use three environments - testing, development and production. Each environment is quite different, which affects how you want to use worker processes. To deal with these differences, the worker plugin uses a strategy pattern to invoke requests.</p>
          <p>In a test environment, there are no background running Rails instances. More importantly, you need to be able to check that worker requests  correctly complete. Thus you want worker requests to happen synchronously and within the test process. This is the  Worker::Controller strategy, and works similarly to how Rails render_component functionality works. To set this up, add the following lines to your test environment file:</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::Controller
end </tt></pre>
          <p>In development mode, you have one Rails instance running. In this case, you want worker requests to happen asynchronously but within the single development process. This is the Worker::HttpAsync strategy. To set this up, add the following lines to your  development environment file:</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::HttpAsync
end </tt></pre>
          <p>Note this assumes that your development process is running on the standard port 3000. </p>
          <p>Finally, in production mode, you'll have multiple Rails instances running. To be on the safe side, some of these instances should be dedicated to only fulfilling worker requests. The easiest way to do this is put them on an internally accessible IP address, say 8500, that outsides cannot access.  Thus the port, and perhaps IP address, of the user-facing Rails instances will be different than worker instances.  To set this up, add an additional line to your config file that globally sets the host and port number of workers.  Note this assumes that there is either one worker or a pool or workers at the given host and port.</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::HttpAsync 
  Worker::HttpAsync.options = {:host =&gt; 'some_other_host',
                               :port =&gt; '8500'}
end </tt></pre>
          <h3>The Code </h3>
          <p>We're <a href="http://cfis.savagexi.com/files/worker.zip">releasing</a> the worker plugin under an MIT license. If there is sufficient interest, we're happy to setup a RubyForge project.</p>
      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
          <p>Sooner or later, for most large websites you have to bite the bullet and implement some form of asynchronous processing to deal with long-running tasks. For example, with <a href="http://www.mapbuzz.com">MapBuzz</a>  we have a several long-running tasks:</p>
          <ul>
            <li>Importing data</li>
            <li>Batch geodcoding</li>
            <li>Emailing event notifications to users </li>
          </ul>
          <p>If you're developing a Facebook application, moving long-running tasks to a background process or thread is critical since Facebook times out requests to your server within ten to twelve seconds.</p>
          <h3>So Many Choices</h3>
          <p>Having decided you need asynchronous processing, the next question is how to do it. And this is where things get complicated - there are a myriad of approaches, each applicable for certain problem domains. Let's look at some possibilities:</p>
          <ul>
            <li><strong>Spawn/Fork</strong> - Create  processes  on demand to perform  background tasks</li>
            <li><strong>Distributed Objects</strong> - Use a distributed object protocol (RMI, Corba, DCOM, DrB, etc) to communicate with another process to perform  background tasks </li>
            <li><strong>Job Queue</strong> - Persist tasks in shared files or databases and execute them using background processes</li>
            <li><strong>Messaging Processing</strong> - Send messages to another process  via a message bus </li>
          </ul>
          <p>In the Ruby world, there are a number of  implementations for each approach - a few examples include:</p>
          <ul>
            <li><strong>Spawn/Fork</strong> - <a href="http://rubyforge.org/projects/spawn/">Spawn</a></li>
            <li><strong>Distributed Objects</strong> - <a href="http://backgroundrb.rubyforge.org/index.html">BackgroundDRb</a></li>
            <li><strong>Job Queue</strong> - <a href="http://github.com/tobi/delayed_job/tree/master">Delayed Job (DJ)</a>, <a href="http://codeforpeople.rubyforge.org/svn/bj/trunk/README">BackgroundJob (BJ)</a>, <a href="http://rubyforge.org/projects/spawn/"></a><a href="http://github.com/ncr/background-fu/tree/master">BackgroundFu</a>, <a href="http://rubyforge.org/projects/starling/">Starling, </a><a href="http://xph.us/software/beanstalkd/">Beanstalkd</a>, <a href="http://code.google.com/p/sparrow/">Sparrow</a> </li>
            <li><strong>Message Sending </strong> - <a href="http://code.google.com/p/sparrow/"></a><a href="http://ap4r.rubyforge.org/wiki/wiki.pl?HomePage">AP4R</a></li>
          </ul>
          <p>Not surprisingly, most of these solutions are designed to work with Rails, since there's no need to speed up processing if its just another machine on the other end instead of an impatient human.</p>
          <p> Selecting the best one for your application is totally dependent on your use cases. Having said that, its still possible to reach some broad conclusions. Spawning or forking processes makes it impossible to offload processing to additional machines, so you'll quickly run into scalability limits. Distributed objects solve that problem, but experience has shown distributed object protocols are very brittle because they bind clients and servers so tightly together - thus I would never use them. Job queues are more reliable because tasks are represented in a standard  format (usually text based, such as xml) that is persisted to files or database tables. Message queues are similar, but add significantly more functionality such as message routing, transformation, prioritization, etc.</p>
          For many websites, a job queue is  the best solution. Job queues are relatively light weight and let you distribute processing across multiple machines. However, the ruby based solutions listed above require installing and managing additional software as well as writing the job processing code itself. They also make it more difficult to develop and test software since you know have to debug multiple processes at once.
          <h3>A Simple HTTP Based Solution</h3>
          <p>So what's a simpler solution? Reuse what you already have. Most Rails applications are divided into multiple instances, distributed across one or more machines, that embed an http server (mongrel, thin, ebb) for requests. Thus we already have our background processes and an easy way to communicate with them - http (of course!). And if your using mongrel or a proxy server (<a href="http://www.apsis.ch/pound">Pound</a>, <a href="http://lighttpd.org">Lighttpd</a>, <a href="http://nginx.net/">Nginx</a>, <a href="http://www.apache.org">Apache</a>, etc.), then you also get a built-in request queue.</p>
          <p>In other words:</p>
          <pre><tt>simple background queue = HTTP + Load Balancer + Rails instances </tt></pre>
          <p>Besides simplicity, a  big advantage to this approach is that  background tasks run within the Rails environment, giving you access to ActiveRecord, your models, etc. </p>
          <h3>Worker Plugin </h3>
          <p>Thus enters a new Rails plugin called worker (yeah the name leaves something to be desired). Let's look at an example:</p>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> ImportController <span style="color: #990000">&lt;</span> ApplicationController
  <span style="font-style: italic"><span style="color: #9A1900"># Add support for using workers</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">include</span></span> Worker

  <span style="font-style: italic"><span style="color: #9A1900"># Incoming requests are handled by this method</span></span>
  resource <span style="color: #990000">:</span>Geodata <span style="font-weight: bold"><span style="color: #0000FF">do</span></span><span class="style1">
    </span><span style="font-weight: bold"><span style="color: #0000FF">def</span></span> post
      <span style="font-weight: bold"><span style="color: #000000">read_file</span></span><span style="color: #990000">(</span>params<span style="color: #990000">)</span><span class="style1">
    </span><span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  
  <span style="font-style: italic"><span style="color: #9A1900"># This method handles requests in a worker process</span></span>
  resource <span style="color: #990000">:</span>process <span style="font-weight: bold"><span style="color: #0000FF">do</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">def</span></span> post
    <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">
</span></span>  private 
  
  <span style="font-weight: bold"><span style="color: #0000FF">def</span></span> <span style="font-weight: bold"><span style="color: #000000">read_file</span></span><span style="color: #990000">(</span>params<span style="color: #990000">)</span>
    worker_params <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #990000">:</span>file_name <span style="color: #990000">=&gt;</span> file_name<span style="color: #990000">,</span> 
      <span style="color: #990000">               :</span>tags <span style="color: #990000">=&gt;</span> params<span style="color: #990000">[</span><span style="color: #FF0000">'tags'</span><span style="color: #990000">],</span>
                     <span style="color: #990000">:</span>controller <span style="color: #990000">=&gt;</span> <span style="color: #FF0000">'import'</span><span style="color: #990000">,</span>
                     <span style="color: #990000">:</span>resource <span style="color: #990000">=&gt;</span> <span style="color: #FF0000">'process'</span><span style="color: #990000">,
                     </span><span style="color: #990000">:</span>map_id <span style="color: #990000">=&gt;</span> <span style="color: #009900">@map</span><span style="color: #990000">.</span>id<span style="color: #FF0000">}</span>

    <span style="font-style: italic"><span style="color: #9A1900"># Create worker request</span></span>
    create_worker<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">post</span></span><span style="color: #990000">(</span>worker_params<span style="color: #990000">)</span>
  <span style="font-weight: bold"><span style="color: #0000FF">end</span></span><span class="style1">
</span><span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
</tt></pre>
          <p>So how does this work? A user POSTs a file to  http://myserver/import/geodata. That method does various checks (deleted for brevity) and then sends a request to http://myserver/import/process which runs in a separate Rails instance. Although this  controller delegates back to itself (in  a separate process) it could call any controller it wishes.</p>
          <p>The worker plugin will pass a session key, if available, to the background process. That turns out to be very useful since it allows sharing session information between the foreground process and background process if you're storing session information since in memcached or a background database. That means you can use the same authentication and authorization mechanisms in the background process as you do in the foreground process.</p>
          <p>In addition, all worker requests are signed with a MD5 hash to verify that no-one in the middle is spoofing requests.</p>
          <h3>Environments and Configuration </h3>
          <p>By default, Rails applications use three environments - testing, development and production. Each environment is quite different, which affects how you want to use worker processes. To deal with these differences, the worker plugin uses a strategy pattern to invoke requests.</p>
          <p>In a test environment, there are no background running Rails instances. More importantly, you need to be able to check that worker requests  correctly complete. Thus you want worker requests to happen synchronously and within the test process. This is the  Worker::Controller strategy, and works similarly to how Rails render_component functionality works. To set this up, add the following lines to your test environment file:</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::Controller
end </tt></pre>
          <p>In development mode, you have one Rails instance running. In this case, you want worker requests to happen asynchronously but within the single development process. This is the Worker::HttpAsync strategy. To set this up, add the following lines to your  development environment file:</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::HttpAsync
end </tt></pre>
          <p>Note this assumes that your development process is running on the standard port 3000. </p>
          <p>Finally, in production mode, you'll have multiple Rails instances running. To be on the safe side, some of these instances should be dedicated to only fulfilling worker requests. The easiest way to do this is put them on an internally accessible IP address, say 8500, that outsides cannot access.  Thus the port, and perhaps IP address, of the user-facing Rails instances will be different than worker instances.  To set this up, add an additional line to your config file that globally sets the host and port number of workers.  Note this assumes that there is either one worker or a pool or workers at the given host and port.</p>
          <pre><tt>config.after_initialize do
  Worker::Config.strategy = Worker::HttpAsync 
  Worker::HttpAsync.options = {:host =&gt; 'some_other_host',
                               :port =&gt; '8500'}
end </tt></pre>
          <h3>The Code </h3>
          <p>We're <a href="http://cfis.savagexi.com/files/worker.zip">releasing</a> the worker plugin under an MIT license. If there is sufficient interest, we're happy to setup a RubyForge project.</p>


<p class="extended">Update - The code examples previously showed the wrong worker strategy for development and production modes - thanks for the catch Noel (see comments).</p>

<p class="extended">Update 2 - One thing I forgot to mention in the original article is that the user facing Rails instances make worker requests via HTTP using background threads.  That allows the main thread, which is fulfilling the user request, to immediately return.  Each background thread simply sends an HTTP request to a worker, waits for it to finish, and then terminates itself.  In most programming languages, this wouldn't warrant a second thought.  However, Ruby has lousy threading so we weren't sure this would work.  But based on our experience so far, we haven't run into any problems.  Of course, you should verify that it works in your environment by monitoring http requests (via log files).  If this becomes a problem, then a background thread pool could be used or threads could be eliminated by using something like EventMachine.</p>        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/494</id>
    <published>2008-04-02T17:39:30-06:00</published>
    <updated>2008-04-11T01:18:47-06:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/04/10/facebook-follies-setting-the-stage"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Facebook Follies - Setting the Stage</title>
    <category term="mapbuzz" scheme="http://cfis.savagexi.com/category/mapbuzz" label="MapBuzz"/>
    <category term="facebook" scheme="http://cfis.savagexi.com/category/facebook" label="Facebook"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<img alt="MapNotes" style="float: left; margin: 0.25em 1em 0.5em 0" src="http://www.mapbuzz.com/images/facebook/map_notes/map_notes_note.gif" />
         <p>Hearing about the latest and greatest Facebook application reminds me of reading FastCompany or Business 2.0, before it went bust. The typical story goes like this - a couple of ninja developers spend every waking moment for a year coding up the Web's next killer site. Launched with little fanfare, the website quickly goes viral, and starts to generate huge amounts of traffic. In no time, the  company is worth millions of dollars (with our without revenue is optional), and everyone is rich and happy.</p>
          <p>The rise of Facebook hyper-charges this narrative. Facebook has dramatically compressed the time between an idea and fortune and fame. We've left      &quot;<a href="http://searchsoa.techtarget.com/sDefinition/0,,sid26_gci853845,00.html">web years</a>&quot; in the dust by moving into the parallel universe of &quot;Facebook time.&quot; This go-round, the prototypical story goes like this - Stanford student whips up a Facebook app over the weekend and releases it on Monday. By the end of the week it has half  a million users and by the end of the month the student  flips the application, neatly  paying for this year's tuition. </p>
          <p>Just as  some of the women you see on the covers of women's magazines really do exist, some of these stories are surely true. But for  the rest of us, success is not so easy. It usually comes the way it has always come, through insight, perseverance, hard work and a bit of luck.</p>
          <p>Which   gets us to the point of this blog - telling the technical story behind the development of <a href="http://www.facebook.com/apps/application.php?id=13303100606">MapNotes</a> - MapBuzz's first Facebook application. MapNotes is a simple application - it makes it easy to put PostIt notes on a map and share them with friends.</p>
          <p> Our naive thinking behind MapNotes was too quickly develop a Facebook application to get familiar with the platform, and then roll out a series of applications quickly thereafter. We soon discovered that a number of technical gremlins lay behind MapNote's apparent simplicity. Above all was our desire to deeply integrate MapBuzz with Facebook, so that what users do on MapBuzz is available on Facebook and what users do on Facebook is available on MapBuzz.</p>
          <p>Although there is plenty of information on the Web about developing one-off Facebook application,  precious little exists describing the challenges of integrating a destination website with Facebook and how to support multiple facebook applications. </p>
          <p>To share what we've learned, I'm kicking off a new series of posts over the coming weeks that will dive deep into the technical details of developing for Facebook. I'll link to the articles from this page, so consider it both an introduction and Table of Contents rolled into one.  Some things  I'll cover are:</p>
          <ul>
            <li>Login and installation</li>
            <li>Session management</li>
            <li>Account and link management</li>
            <li>Asynchronous processing</li>
            <li>Notifications and newsfeeds</li>
            <li>Using Ajax</li>
          </ul>
<p>If you're more into usability issues and nice looking screenshots, then head over to the MapBuzz <a href="http://blog.mapbuzz.com">blog</a> for more info.  Enjoy!</p>
      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<img alt="MapNotes" style="float: left; margin: 0.25em 1em 0.5em 0" src="http://www.mapbuzz.com/images/facebook/map_notes/map_notes_note.gif" />
         <p>Hearing about the latest and greatest Facebook application reminds me of reading FastCompany or Business 2.0, before it went bust. The typical story goes like this - a couple of ninja developers spend every waking moment for a year coding up the Web's next killer site. Launched with little fanfare, the website quickly goes viral, and starts to generate huge amounts of traffic. In no time, the  company is worth millions of dollars (with our without revenue is optional), and everyone is rich and happy.</p>
          <p>The rise of Facebook hyper-charges this narrative. Facebook has dramatically compressed the time between an idea and fortune and fame. We've left      &quot;<a href="http://searchsoa.techtarget.com/sDefinition/0,,sid26_gci853845,00.html">web years</a>&quot; in the dust by moving into the parallel universe of &quot;Facebook time.&quot; This go-round, the prototypical story goes like this - Stanford student whips up a Facebook app over the weekend and releases it on Monday. By the end of the week it has half  a million users and by the end of the month the student  flips the application, neatly  paying for this year's tuition. </p>
          <p>Just as  some of the women you see on the covers of women's magazines really do exist, some of these stories are surely true. But for  the rest of us, success is not so easy. It usually comes the way it has always come, through insight, perseverance, hard work and a bit of luck.</p>
          <p>Which   gets us to the point of this blog - telling the technical story behind the development of <a href="http://www.facebook.com/apps/application.php?id=13303100606">MapNotes</a> - MapBuzz's first Facebook application. MapNotes is a simple application - it makes it easy to put PostIt notes on a map and share them with friends.</p>
          <p> Our naive thinking behind MapNotes was too quickly develop a Facebook application to get familiar with the platform, and then roll out a series of applications quickly thereafter. We soon discovered that a number of technical gremlins lay behind MapNote's apparent simplicity. Above all was our desire to deeply integrate MapBuzz with Facebook, so that what users do on MapBuzz is available on Facebook and what users do on Facebook is available on MapBuzz.</p>
          <p>Although there is plenty of information on the Web about developing one-off Facebook application,  precious little exists describing the challenges of integrating a destination website with Facebook and how to support multiple facebook applications. </p>
          <p>To share what we've learned, I'm kicking off a new series of posts over the coming weeks that will dive deep into the technical details of developing for Facebook. I'll link to the articles from this page, so consider it both an introduction and Table of Contents rolled into one.  Some things  I'll cover are:</p>
          <ul>
            <li>Login and installation</li>
            <li>Session management</li>
            <li>Account and link management</li>
            <li>Asynchronous processing</li>
            <li>Notifications and newsfeeds</li>
            <li>Using Ajax</li>
          </ul>
<p>If you're more into usability issues and nice looking screenshots, then head over to the MapBuzz <a href="http://blog.mapbuzz.com">blog</a> for more info.  Enjoy!</p>


        </div>
      </div>
    </content>
  </entry>
  <entry>
    <id>tag:cfis.savagexi.com,2005:Article/493</id>
    <published>2008-04-02T13:07:53-06:00</published>
    <updated>2008-04-02T13:07:53-06:00</updated>
    <link rel="alternate" type="text/html" href="http://cfis.savagexi.com/2008/03/30/daylight-savings-time"/>
    <author>
      <name>Charlie</name>
    </author>
    <title type="html">Daylight Savings Time</title>
    <category term="colorado" scheme="http://cfis.savagexi.com/category/colorado" label="Colorado"/>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>Its a funny thing when things that you wish would happen do happen, but then you realize they aren't so great after all. Take for example the change this year in daylight savings time. Not being a morning person, I love daylight savings time - it means an extra hour of sun every day. And if it was up to me, I would abolish  standard time.</p>
<p>But now that daylight savings time has been moved up a month, I've found it  disappointing. Why? Because is still winter in Denver. The extra hour of sunlight a day is just a tease - its still chilly outside and its still snowing. At least when its dark and cold outside I don't feel like I'm missing out by being locked up inside working.</p>
      </div>
    </summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
<p>Its a funny thing when things that you wish would happen do happen, but then you realize they aren't so great after all. Take for example the change this year in daylight savings time. Not being a morning person, I love daylight savings time - it means an extra hour of sun every day. And if it was up to me, I would abolish  standard time.</p>
<p>But now that daylight savings time has been moved up a month, I've found it  disappointing. Why? Because is still winter in Denver. The extra hour of sunlight a day is just a tease - its still chilly outside and its still snowing. At least when its dark and cold outside I don't feel like I'm missing out by being locked up inside working.</p>


        </div>
      </div>
    </content>
  </entry>
</feed>
