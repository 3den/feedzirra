<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en-US">
  <title>GIANT ROBOTS SMASHING INTO OTHER GIANT ROBOTS - Home</title>
  <id>tag:giantrobots.thoughtbot.com,2009:mephisto/</id>
  <generator version="0.8.0" uri="http://mephistoblog.com">Mephisto Drax</generator>
  
  <link href="http://giantrobots.thoughtbot.com/" rel="alternate" type="text/html" />
  <updated>2009-01-12T20:13:30Z</updated>
  <link rel="self" href="http://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots" type="application/atom+xml" /><feedburner:browserFriendly>This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.</feedburner:browserFriendly><entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2009-01-12:7863</id>
    <published>2009-01-12T20:12:00Z</published>
    <updated>2009-01-12T20:13:30Z</updated>
    <category term="Development" />
    <category term="boston" />
    <category term="heroku" />
    <category term="Rails" />
    <category term="rails" />
    <category term="Ruby" />
    <category term="ruby" />
    <category term="training" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/510127763/heroku-wearing-suspenders" rel="alternate" type="text/html" />
    <title>Heroku wearing Suspenders</title>
<content type="html">
            &lt;p&gt;For our &lt;a href="http://thoughtbot.com/services/training/beginning-ruby-on-rails-boston"&gt;Beginning Ruby on Rails&lt;/a&gt; training course in Boston, January 29-30, all attendees will be:&lt;/p&gt;


&lt;div&gt;&lt;strong&gt;&lt;span class="caps"&gt;DEVELOPING ON&lt;/span&gt; &lt;a href="http://heroku.com"&gt;&lt;span class="caps"&gt;HEROKU&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;

	&lt;h2&gt;Heroku handles headaches&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2009/1/12/skull_xray_with_headache.jpg" /&gt;Have you ever tried to teach Rails to a friend? You want them to feel web development with Rails.&lt;/p&gt;


	&lt;p&gt;However, consider the following issues:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Your student may have never used the command line.&lt;/li&gt;
		&lt;li&gt;Your student may be on Windows, Mac, Ubuntu, or another operating system.&lt;/li&gt;
		&lt;li&gt;Your student may not have SQLite, MySQL, Ruby, Rubygems, or Rails installed correctly.&lt;/li&gt;
		&lt;li&gt;Your student may have never used a text editor such as &lt;a href="http://giantrobots.thoughtbot.com/2008/12/19/thoughtbot-is-filled-with-vim-and-vigor"&gt;Vim&lt;/a&gt;, Emacs, Textmate, or gedit.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;I believe Heroku elegantly solves these problems. Get your friends excited about Rails development without boring or confusing them with ancillary information.&lt;/p&gt;


	&lt;p&gt;Matt Knox of &lt;a href="http://sermo.com"&gt;Sermo&lt;/a&gt; has been teaching Rails to other members of &lt;a href="http://bostonrb.org"&gt;Boston.rb&lt;/a&gt; using Heroku. This is really a great idea so we’re stealing it.&lt;/p&gt;


	&lt;h2&gt;Heroku instructions&lt;/h2&gt;


	&lt;h3&gt;Prerequisites&lt;/h3&gt;


	&lt;ul&gt;
	&lt;li&gt;an internet connection&lt;/li&gt;
		&lt;li&gt;a &lt;a href="http://heroku.com/beta"&gt;Heroku account&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Create new app&lt;/h3&gt;


	&lt;p&gt;On the &lt;a href="http://heroku.com/myapps"&gt;My Apps&lt;/a&gt; page, click the “Create new app” button. You’ll see the following:&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2009/1/12/Picture_2.png" /&gt;&lt;/p&gt;


	&lt;p&gt;Your Rails app is &lt;strong&gt;immediately up and running&lt;/strong&gt; on Heroku, which runs on top of &lt;a href="http://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt;. It displays the default Rails public page with modified instructions.&lt;/p&gt;


	&lt;h3&gt;Suspenders&lt;/h3&gt;


	&lt;p&gt;Clicking on the “import a tarball” link displays:&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2009/1/12/Picture_9.png" /&gt;&lt;/p&gt;


	&lt;p&gt;Save this &lt;a href="http://giantrobots.thoughtbot.com/2008/10/21/suspenders"&gt;Suspenders&lt;/a&gt; tarball:&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://dev.thoughtbot.com/training/blog.tar.gz"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2009/1/12/tar.png" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Now import it into Heroku using the form.&lt;/p&gt;


	&lt;h3&gt;Use the online editor&lt;/h3&gt;


	&lt;p&gt;After importing, you’ll see your app’s view again.&lt;/p&gt;


	&lt;p&gt;Now click on the “Edit your app” link. An &lt;strong&gt;in-browser text editor&lt;/strong&gt; displays:&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2009/1/12/Picture_12.png" /&gt;&lt;/p&gt;


	&lt;p&gt;You can see Suspenders is now installed, giving us access to the latest &lt;a href="http://thoughtbot.com/projects/shoulda"&gt;Shoulda&lt;/a&gt;, &lt;a href="http://thoughtbot.com/projects/factory_girl"&gt;Factory Girl&lt;/a&gt;, rake tasks, &lt;a href="http://hoptoadapp.com"&gt;Hoptoad&lt;/a&gt; Notifier, and much, much more.&lt;/p&gt;


	&lt;p&gt;That’s it! We’ve got “Heroku wearing Suspenders”, an excellent, standardized environment to teach Rails wherein students can learn &lt;strong&gt;the important stuff&lt;/strong&gt; first, such as actual &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt; with Rails, instead of fiddling with their OS, gems, or text editor.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2009/1/12/heroku-wearing-suspenders</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Matt Jankowski</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-31:7840</id>
    <published>2008-12-31T16:08:00Z</published>
    <updated>2008-12-31T16:39:07Z</updated>
    <category term="Business" />
    <category term="Design" />
    <category term="Development" />
    <category term="Technology" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/499571674/happy-new-year" rel="alternate" type="text/html" />
    <title>Happy New Year</title>
<content type="html">
            &lt;p&gt;Here at thoughtbot, we think that ending the year without wishing everyone &lt;a href="http://thoughtbot.com/newsletters/holiday-card-2008"&gt;happy holidays&lt;/a&gt; and a happy new year should be considered harmful….&lt;/p&gt;


	&lt;p&gt;Enter this blog post.&lt;/p&gt;


	&lt;p&gt;Early this year we launched &lt;a href="http://teebot.thoughtbot.com"&gt;teebot&lt;/a&gt;, an online store that sells t-shirts we think are amusing to ruby programmers and other web/geek types.  We had a lot of fun designing these shirts, giving them away at conferences, and wearing them.  We plan on adding more shirts that are less ruby-specific during 2009, mainly because of how awesome &lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/31/steak.png"&gt;this image&lt;/a&gt; is.&lt;/p&gt;


	&lt;p&gt;We also launched &lt;a href="http://widgetfinger.com"&gt;widgetfinger&lt;/a&gt;, our first hosted software product, and learned a lot about how many times it’s possible to redesign one application in the process, and how important it is to stop adding features and Just Launch.&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/31/nye_ralph.jpg" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;In July we launched &lt;a href="http://hoptoadapp.com"&gt;hoptoad&lt;/a&gt; – the app error app.  Building on what we learned during the widgetfinger product development, the hoptoad development and release process has been so much smoother.  We’ve had great support from Engine Yard on the hosting front, great feedback from the community and our users (and now customers!), and will continue to give the toad a ton of attention in 2009.&lt;/p&gt;


	&lt;p&gt;In September we launched &lt;a href="http://umbrellatoday.com"&gt;umbrella today&lt;/a&gt;, and announced that we were offering ruby on rails &lt;a href="http://thoughtbot.com/services/training"&gt;training services&lt;/a&gt;.  Umbrella Today has probably had the most refactoring-per-line-of-code of any application we’ve ever built, for what we can only hope is a productive purpose (simple weather reports!).  The training sessions we’ve held thus far have been successful, and we’ve already announced the first few for 2009.  Thanks to everyone who attended a 2008 session and gave us feedback on the training.&lt;/p&gt;


	&lt;p&gt;Earlier this month we announced our &lt;a href="http://thoughtbot.com/services/kickstart"&gt;kickstart&lt;/a&gt; service for new web applications built by growing teams, and we expect to formally begin our first kickstart-style projects early in 2009.&lt;/p&gt;


	&lt;p&gt;Various thoughtbot developers spoke at and attended RailsConf, RubyConf, &lt;span class="caps"&gt;VTM&lt;/span&gt; Boston, Scotland on Rails, Mountain West RubyConf, Acts As Conference, GoRuCo, LittleItalyNYCRubyConf, and more.  We really enjoy being part of the positive culture found within the ruby community, and love learning and relaxing with everyone at these events.  We even sent Joe and Tammer down to Florida for a week to work on a “3-2-1 launch” project with the polite folks at &lt;a href="http://hashrocket.com"&gt;Hashrocket&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Our open source plugin work continued to get a lot of love in 2008 – we continued to maintain and release new versions of &lt;a href="http://thoughtbot.com/projects/shoulda"&gt;Shoulda&lt;/a&gt; – and we introduced &lt;a href="http://thoughtbot.com/projects/factory_girl"&gt;Factory Girl&lt;/a&gt; and &lt;a href="http://thoughtbot.com/projects/paperclip"&gt;Paperclip&lt;/a&gt;.  It’s great to see this combination of tools getting so much adoption and appreciation from the ruby community (and even more great to continue to see a generally positive – bordering on zealous – attitude toward software testing coming out of that community).&lt;/p&gt;


	&lt;p&gt;The product development, community involvement and open source work is a great source of pride and fun for us, but the core of our business and most of our focus continues to go to our client &lt;a href="http://thoughtbot.com/work"&gt;work&lt;/a&gt;.  We’d like to thank all of our clients from 2008 for giving us the opportunity to work with them – and we look forward to continue delivering great web applications for our clients during 2009.&lt;/p&gt;


	&lt;p&gt;In terms of employee head count, we intentionally slowed down during 2008 (we went from 4 to 8 in 2006 and from 8 to 16 in 2007), and we’ll end the year at a comfortable size of 12.  As business owners running a service business, we know that our biggest asset is our own employees – and we’d like to thank the entire thoughtbot &lt;a href="http://thoughtbot.com/about/people"&gt;team&lt;/a&gt; for working hard this year, and growing with us.  We think 2009 is going to be even more exciting, and you’re a big part of why that continues to be possible.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/31/happy-new-year</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Jon Yurek</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-30:7843</id>
    <published>2008-12-30T20:19:00Z</published>
    <updated>2008-12-30T20:23:59Z</updated>
    <category term="activerecord" />
    <category term="attachments" />
    <category term="paperclip" />
    <category term="Rails" />
    <category term="rails" />
    <category term="upload" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/498892668/what-good-is-a-flexible-paperclip" rel="alternate" type="text/html" />
    <title>What good is a flexible paperclip?</title>
<content type="html">
            &lt;p&gt;&lt;img title="Originally found at http://flickr.com/photos/toofarnorth/9984261" src="http://giantrobots.thoughtbot.com/assets/2008/12/30/9984261_a175c25c62_m.jpg" alt="Originally found at http://flickr.com/photos/toofarnorth/9984261" /&gt;&lt;/p&gt;


	&lt;p&gt;Since it’s the Holidays, I’ve been spending a bit more time than normal on &lt;a href="http://thoughtbot.com/projects/paperclip/"&gt;Paperclip&lt;/a&gt;. And since that time has been particularly fruitful and there’s been a release or two, I figured I should probably tell someone about it before I friggin’ explode. It’s all about making Paperclip more flexible, more adaptable, and more friendly to use. Can you believe there’s more to file uploads than avatars?&lt;/p&gt;


	&lt;h3&gt;Newer, more sensible defaults.&lt;/h3&gt;


	&lt;p&gt;Overall, this is actually a bit small on the change meter, but it may affect some of you, so it’s up front. The :path and :url defaults have changed. By default now, files will be saved to &lt;code&gt;:rails_root/public/system/:attachments/:id/:style/:basename/:extension&lt;/code&gt;. It’s the “system” part of that that’s important, because now it means that if you’re deploying with Capistrano, you don’t have to do anything and your attachments will survive deployments. This was not previously the case, regrettably, but it is now!&lt;/p&gt;


	&lt;h3&gt;Callbacks and such.&lt;/h3&gt;


	&lt;p&gt;Thanks to the callback methods pioneered by ActiveRecord itself with the fantastic &lt;code&gt;before_save&lt;/code&gt; and family, Paperclip now defines a &lt;code&gt;before_post_process&lt;/code&gt; and &lt;code&gt;after_post_process&lt;/code&gt; callback, which can be used exactly like all the AR callbacks. Not only that, if you’re the kind of person who likes to have more than one attachment on a model, there are per-attachment callbacks as well, called &lt;code&gt;before_&amp;lt;attachment&amp;gt;_post_process&lt;/code&gt; and &lt;code&gt;after_&amp;lt;attachment&amp;gt;_post_process&lt;/code&gt;. The &lt;code&gt;before_&lt;/code&gt; callbacks are fully capable of stopping processing if they need to, simply by returning &lt;code&gt;false&lt;/code&gt; (not &lt;code&gt;nil&lt;/code&gt;, but &lt;code&gt;false&lt;/code&gt;, which is a distinction ActiveRecord makes, as well). Thus, if you are uploading images that have “E” in the name, you can write a &lt;code&gt;before_post_process&lt;/code&gt; that looks like this:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="co"&gt;Base&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  has_attached_file &lt;span class="sy"&gt;:avatar&lt;/span&gt;, &lt;span class="sy"&gt;:styles&lt;/span&gt; =&amp;gt; {&lt;span class="sy"&gt;:tiny&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;32x32#&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }&lt;tt&gt;
&lt;/tt&gt;  before_post_process &lt;span class="sy"&gt;:check_avatar_name_for_capital_e&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;check_avatar_name_for_capital_e&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;not&lt;/span&gt; &lt;span class="pc"&gt;self&lt;/span&gt;.avatar.original_filename.match(&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="k"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This will prevent the image from being thumbnailed. It will &lt;strong&gt;not&lt;/strong&gt; prevent the attachment from being saved, though. Just from being processed. As a bonus, something else that will prevent attachments from being processed is failing validation. If you have a size, content_type, or presence validation that fails, the attachment will not go through processing (which means ImageMagick won’t try to convert that Word Doc into a &lt;span class="caps"&gt;PNG&lt;/span&gt; if you don’t want it to).&lt;/p&gt;


	&lt;h3&gt;Expanded Post-Processing.&lt;/h3&gt;


	&lt;p&gt;I realize that there’s more to image uploads than thumbnailing. And there’s more to file uploads than images. But until now, all you could do was thumbnail your images. What gives! Well, starting now you can define your own processors that can do whatever you want to your uploads.  &lt;strong&gt;You can:&lt;/strong&gt;&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;add rounded corners&lt;/li&gt;
		&lt;li&gt;invert&lt;/li&gt;
		&lt;li&gt;rotate&lt;/li&gt;
		&lt;li&gt;&lt;span class="caps"&gt;OCR&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;pick out every third word of your text docs&lt;/li&gt;
		&lt;li&gt;run spellcheck&lt;/li&gt;
		&lt;li&gt;automatically print them out&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;... well, you can if you can write code, since none of those exist yet. The only one that’s written is still the thumbnailer/format converter.&lt;/p&gt;


	&lt;p&gt;But the point is that now you can have Paperclip do whatever you want. Check out the &lt;a href="http://dev.thoughtbot.com/paperclip/classes/Paperclip/Processor.html"&gt;Paperclip::Processor class&lt;/a&gt; documentation for more info on exactly what you need to do to make a Processor, but the gist is that you’ll take in a file and some options, and you spit back out a file. That’s pretty much it, and Paperclip places no limits on what you can do, say, or call during that time (so if you spend 30 seconds rendering a POVRay scene, that’s your fault for making your users wait).&lt;/p&gt;


	&lt;p&gt;Paperclip will automatically detect files in your Rails app’s lib/paperclip_processors directory, so just drop them there and you’ll be running in no time.&lt;/p&gt;


	&lt;h3&gt;The Code!&lt;/h3&gt;


	&lt;p&gt;As always, the code is &lt;a href="http://github.com/thoughtbot/paperclip"&gt;available for forking and cloning on GitHub&lt;/a&gt;, and &lt;a href="http://dev.thoughtbot.com/paperclip/"&gt;the documentation is available on our site&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;If you’d like to contribute to paperclip with a patch, bug report, or feature request, don’t hesitate to get on over to &lt;a href="http://groups.google.com/group/paperclip-plugin"&gt;the Paperclip Google group&lt;/a&gt;, or &lt;a href="http://thoughtbot.lighthouseapp.com/projects/8794-paperclip/overview"&gt;our Paperclip Lighthouse&lt;/a&gt;. As much as we like GitHub, we don’t really work well with pull requests from there. Creating a LH ticket with a link to the branch you want us to pull works much better.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/30/what-good-is-a-flexible-paperclip</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Chad Pytel</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-29:7837</id>
    <published>2008-12-29T17:24:00Z</published>
    <updated>2008-12-29T17:24:40Z</updated>
    <category term="hoptoad" />
    <category term="iphone" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/497916602/access-hoptoad-on-your-iphone" rel="alternate" type="text/html" />
    <title>Access Hoptoad on Your iPhone</title>
<content type="html">
            &lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/29/iPhoneTemplate-02---3-iphon.png" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;As our holiday present to you, we’ve just deployed a new iPhone interface to Hoptoad.&lt;/p&gt;


	&lt;p&gt;Now, when you visit Hoptoad on your iPhone (for example, following a link to an error in an email you receive from Hoptoad) you’ll be presented with a nice view formatted specifically for iPhone.&lt;/p&gt;


	&lt;p&gt;While this interface is specifically tested on iPhone, it also works on Android.  So, if you go to Hoptoad on an Android phone, you’ll be given this new interface as well.&lt;/p&gt;


	&lt;p&gt;Enjoy!&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/29/access-hoptoad-on-your-iphone</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-23:7799</id>
    <published>2008-12-23T16:30:00Z</published>
    <updated>2008-12-23T16:54:36Z</updated>
    <category term="Development" />
    <category term=".irbrc" />
    <category term="autocompletion" />
    <category term="bruce springsteen" />
    <category term="flickr" />
    <category term="irb" />
    <category term="kevin garnett" />
    <category term="ruby" />
    <category term="Ruby" />
    <category term="script/console" />
    <category term="tips" />
    <category term="wirble" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/493278266/script-console-tips" rel="alternate" type="text/html" />
    <title>irb &amp; script/console tips</title>
<content type="html">
            &lt;p&gt;Let’s get interactive. You can learn a lot about your application from irb &amp; by extension, script/console.&lt;/p&gt;


	&lt;h3&gt;Wirble: colors&lt;/h3&gt;


	&lt;p&gt;Color matters. You’re picky about your &lt;a href="http://alternateidea.com/blog/articles/2006/1/3/textmate-vibrant-ink-theme-and-prototype-bundle"&gt;text editor syntax highlighting&lt;/a&gt; and maybe you use the excellent &lt;a href="https://rubyforge.org/projects/redgreen/"&gt;redgreen&lt;/a&gt; gem for colors in your test backtraces. Gotta have it in irb, too.&lt;/p&gt;


	&lt;p&gt;First, install Wirble:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;sudo gem install wirble&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Then, in your ~/.irbrc:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;rubygems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;wirble&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;Wirble&lt;/span&gt;.init&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;Wirble&lt;/span&gt;.colorize&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;h3&gt;Wirble: history&lt;/h3&gt;


	&lt;p&gt;Wirble has an added bonus: history.&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;irb(main):&lt;span class="i"&gt;001&lt;/span&gt;:&lt;span class="i"&gt;0&lt;/span&gt;&amp;gt; history = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;History?&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;History?&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;irb(main):&lt;span class="i"&gt;002&lt;/span&gt;:&lt;span class="i"&gt;0&lt;/span&gt;&amp;gt; exit&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Without Wirble, if you drop back into irb, you can’t arrow up to your previous commands. With Wirble, you can.&lt;/p&gt;


	&lt;h3&gt;Wirble: auto-completion&lt;/h3&gt;


	&lt;p&gt;As if that’s not enough, Wirble gives you auto-completion, too. In irb:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt;&amp;gt; un_momento = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Spanish for like, 'hold the phone!'&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Spanish for like, 'hold the phone!'&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Type, “un”, then tab:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt;&amp;gt; un&lt;tt&gt;
&lt;/tt&gt;un_momento   &lt;span class="r"&gt;undef&lt;/span&gt;        &lt;span class="fu"&gt;unless&lt;/span&gt;       untaint      untrace_var  &lt;span class="r"&gt;until&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;h3&gt;Local methods&lt;/h3&gt;


	&lt;p&gt;Stick this in your ~/.irbrc:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Easily print methods local to an object's class&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;Object&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;local_methods&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    (methods - &lt;span class="co"&gt;Object&lt;/span&gt;.instance_methods).sort&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Use the #local_methods method like this:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt;&amp;gt; &lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;BasketballPlayer&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt;   attr_accessor &lt;span class="sy"&gt;:name&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; &lt;tt&gt;
&lt;/tt&gt;&lt;span class="i"&gt;?&amp;gt;&lt;/span&gt;   &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;champion?&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt;     name == &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Kevin Garnett&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt;   &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="pc"&gt;nil&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; kevin_garnett = &lt;span class="co"&gt;BasketballPlayer&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="c"&gt;#&amp;lt;BasketballPlayer:0x11988f8&amp;gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; kevin_garnett.name = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Kevin Garnett&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Kevin Garnett&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; kevin_garnett.champion?&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; &lt;span class="pc"&gt;true&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&amp;gt;&amp;gt; kevin_garnett.local_methods&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; [&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;champion?&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;name=&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;div&gt;&amp;lt;object height="344" width="425"&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;embed src="http://www.youtube.com/v/6dk7Il3EqI0&amp;amp;#38;hl=en&amp;amp;#38;fs=1" height="344" width="425"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;/div&gt;

	&lt;h3&gt;Aliases&lt;/h3&gt;


	&lt;p&gt;Don’t forget you can alias in irb. The only one I have is:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;alias&lt;/span&gt; q exit&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;It makes irb feel more &lt;a href="http://giantrobots.thoughtbot.com/2008/12/19/thoughtbot-is-filled-with-vim-and-vigor"&gt;Vim-ish&lt;/a&gt;.&lt;/p&gt;


	&lt;h3&gt;Create test fixtures for a third party service&lt;/h3&gt;


	&lt;p&gt;Your app uses the Flickr &lt;span class="caps"&gt;API&lt;/span&gt;. You want your test suite to use legitimate data but not hit the service.&lt;/p&gt;


	&lt;p&gt;Given the actual call to the service is:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;FlickrClient&lt;/span&gt;.search(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Bruce Springsteen&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
 

	&lt;p&gt;Run the query in script/console and convert the data into yaml:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yaml = &lt;span class="co"&gt;FlickrClient&lt;/span&gt;.search(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Bruce Springsteen&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).to_yaml&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
 

	&lt;p&gt;Then use your old Ruby friend, File.open with the write option (“w”) to dump it to a file:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;File&lt;/span&gt;.open(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;test/fixtures/flickr/springsteen.yml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) { |file| file &amp;lt;&amp;lt; yaml }&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
 

	&lt;p&gt;Add this to your test_helper.rb:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;load_yaml_fixture&lt;/span&gt;(path)&lt;tt&gt;
&lt;/tt&gt;  absolute_path = &lt;span class="co"&gt;File&lt;/span&gt;.join(&lt;span class="co"&gt;RAILS_ROOT&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fixtures&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, path)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;YAML&lt;/span&gt;::load_file absolute_path&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Voila, when you need to mock out calls to the third party service, you can now use this in your test code:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;load_yaml_fixture(&lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;springsteen.yml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This pattern is repeatable for any third party service. Just replace the actual call with whatever you’re working on, and name the fixture something intention-revealing.&lt;/p&gt;


&lt;div&gt;&amp;lt;object height="344" width="425"&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;embed src="http://www.youtube.com/v/gC7hanPld7A&amp;amp;#38;hl=en&amp;amp;#38;fs=1" height="344" width="425"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;/div&gt;

	&lt;h3&gt;Print &lt;span class="caps"&gt;SQL&lt;/span&gt; to standard out&lt;/h3&gt;


Oftentimes script/console is used for debugging, and what better way to do that
than to get the &lt;span class="caps"&gt;SQL&lt;/span&gt; generated by each method call. Stick this in your ~/.irbrc:

 &lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Log to STDOUT if in Rails&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; &lt;span class="r"&gt;if&lt;/span&gt; &lt;span class="co"&gt;ENV&lt;/span&gt;.include?(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp; !&lt;span class="co"&gt;Object&lt;/span&gt;.const_defined?(&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;RAILS_DEFAULT_LOGGER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;   require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;   &lt;span class="co"&gt;RAILS_DEFAULT_LOGGER&lt;/span&gt; = &lt;span class="co"&gt;Logger&lt;/span&gt;.new(&lt;span class="co"&gt;STDOUT&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt; &lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This gets you:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt;&amp;gt; videos = &lt;span class="co"&gt;Video&lt;/span&gt;.limited(&lt;span class="i"&gt;3&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;Video&lt;/span&gt; &lt;span class="co"&gt;Load&lt;/span&gt; (&lt;span class="fl"&gt;0.4&lt;/span&gt;ms)   &lt;span class="co"&gt;SELECT&lt;/span&gt; * &lt;span class="co"&gt;FROM&lt;/span&gt; &lt;span class="sh"&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;span class="k"&gt;videos&lt;/span&gt;&lt;span class="dl"&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class="co"&gt;LIMIT&lt;/span&gt; &lt;span class="i"&gt;3&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;=&amp;gt; [&lt;span class="c"&gt;#&amp;lt;Video id: 1, ...&amp;gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Without the ~/.irbrc love, you’d be missing:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;Video Load (0.4ms)   SELECT * FROM `videos` LIMIT 3&lt;/code&gt;&lt;/pre&gt;

	&lt;h3&gt;pp&lt;/h3&gt;


	&lt;p&gt;After you’ve required rubygems for Wirble, require pretty print, too:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;pp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This is just a nice way to have better formatting at your fingertips. It’s especially helpful when dealing with an Array of ActiveRecord objects:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt;&amp;gt; pp videos&lt;tt&gt;
&lt;/tt&gt;[&lt;span class="c"&gt;#&amp;lt;Video id: 1, youtube_id: &amp;quot;TcMklv40YMY&amp;quot;, name: &amp;quot;Merb, Rubinius and the Engine Yard Stack&amp;quot;, upload_time: nil, view_count: 6171, description: &amp;quot;Google Tech Talks\nOctober 20, 2008\n\nABSTRACT\n\nIn th...&amp;quot;, created_at: &amp;quot;2008-12-21 00:32:33&amp;quot;, updated_at: &amp;quot;2008-12-21 00:32:33&amp;quot;&amp;gt;,&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; &lt;span class="c"&gt;#&amp;lt;Video id: 2, youtube_id: &amp;quot;JySmT-dGOj0&amp;quot;, name: &amp;quot;MERB SPORTS Team-Vorstellung 2008&amp;quot;, upload_time: nil, view_count: 495, description: &amp;quot;MERB SPORTS stellt sich für die VDRM-Saison 2008 v...&amp;quot;, created_at: &amp;quot;2008-12-21 00:32:33&amp;quot;, updated_at: &amp;quot;2008-12-21 00:32:33&amp;quot;&amp;gt;,&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt; &lt;span class="c"&gt;#&amp;lt;Video id: 3, youtube_id: &amp;quot;6bc-FNNWIsM&amp;quot;, name: &amp;quot;Merb &amp;amp;&amp;amp; Moi&amp;quot;, upload_time: nil, view_count: 58, description: &amp;quot;Amusing yes?&amp;quot;, created_at: &amp;quot;2008-12-21 00:32:33&amp;quot;, updated_at: &amp;quot;2008-12-21 00:32:33&amp;quot;&amp;gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/23/script-console-tips</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Mike Burns</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-22:7805</id>
    <published>2008-12-22T18:53:00Z</published>
    <updated>2008-12-22T18:55:32Z</updated>
    <category term="Development" />
    <category term="actionmailer" />
    <category term="email" />
    <category term="exceptions" />
    <category term="ruby" />
    <category term="Ruby" />
    <category term="smtp" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/492461891/i-accidentally-the-whole-smtp-exception" rel="alternate" type="text/html" />
    <title>I accidentally the whole SMTP exception</title>
<content type="html">
            &lt;p&gt;You have a slick, exclusive, invite-only Web app for sharing Tor URLs, with
  an Android client and specialty hardware. You use &lt;a href="http://code.dunae.ca/validates_email_format_of.html"&gt;validates_email_format_of&lt;/a&gt;
  in the &lt;code&gt;Invitation&lt;/code&gt; model, but still something slips through and
  your &lt;a href="http://hoptoadapp.com/"&gt;Hoptoad&lt;/a&gt; errors pile up, showing
  your user the beautifully-designed 500 page instead of an error
  explanation.&lt;/p&gt;

&lt;p&gt;There are two types of exceptions that &lt;code&gt;ActionMailer&lt;/code&gt; will raise
 when you attempt to deliver an email: user input problems and server
  problems.&lt;/p&gt;

&lt;p&gt;User input problems are those such as incorrect or invalid email addresses;
  the exceptions raised are &lt;code&gt;Net::SMTPFatalError&lt;/code&gt; and
  &lt;code&gt;Net::SMTPSyntaxError&lt;/code&gt;. These are issues that the user can fix and as such the error message should indicate that everything's fine, nothing is ruined.&lt;/p&gt;

&lt;p&gt;Server problems could be anything from a non-existent server to an
  authentication issue; the exceptions raised are: &lt;code&gt;TimeoutError&lt;/code&gt;,
  &lt;code&gt;IOError&lt;/code&gt;, &lt;code&gt;Net::SMTPUnknownError&lt;/code&gt;,
  &lt;code&gt;Net::SMTPServerBusy&lt;/code&gt;, and
  &lt;code&gt;Net::SMTPAuthenticationError&lt;/code&gt;. These issues are outside the power of the user and should indicate that we screwed up.&lt;/p&gt;

&lt;p&gt;So in &lt;code&gt;config/initializers/errors.rb&lt;/code&gt;:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;SMTP_SERVER_ERRORS&lt;/span&gt; = [&lt;span class="co"&gt;TimeoutError&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;                          &lt;span class="co"&gt;IOError&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;                          &lt;span class="co"&gt;Net&lt;/span&gt;::&lt;span class="co"&gt;SMTPUnknownError&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;                          &lt;span class="co"&gt;Net&lt;/span&gt;::&lt;span class="co"&gt;SMTPServerBusy&lt;/span&gt;,&lt;tt&gt;
&lt;/tt&gt;                          &lt;span class="co"&gt;Net&lt;/span&gt;::&lt;span class="co"&gt;SMTPAuthenticationError&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;SMTP_CLIENT_ERRORS&lt;/span&gt; = [&lt;span class="co"&gt;Net&lt;/span&gt;::&lt;span class="co"&gt;SMTPFatalError&lt;/span&gt;, &lt;span class="co"&gt;Net&lt;/span&gt;::&lt;span class="co"&gt;SMTPSyntaxError&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;SMTP_ERRORS&lt;/span&gt; = &lt;span class="co"&gt;SMTP_SERVER_ERRORS&lt;/span&gt;.concat(&lt;span class="co"&gt;SMTP_CLIENT_ERRORS&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;SMTP_CLIENT_ERROR_FLASH&lt;/span&gt; = &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;The email address supplied is invalid.  Please check for spelling mistakes.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="co"&gt;SMTP_SERVER_ERROR_FLASH&lt;/span&gt; = &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;We encountered an internal issue while attempting to deliver this email.  Please try again in a few minutes.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;We can test it with &lt;code&gt;invitations_controller_test.rb&lt;/code&gt;:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;InvitationsController&lt;/span&gt;; &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;rescue_action&lt;/span&gt;(e) raise e &lt;span class="r"&gt;end&lt;/span&gt;; &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;InvitationsControllerTest&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;Test&lt;/span&gt;::&lt;span class="co"&gt;Unit&lt;/span&gt;::&lt;span class="co"&gt;TestCase&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;SMTP_CLIENT_ERRORS&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |exn|&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;handle &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;exn&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="co"&gt;InvitationsMailer&lt;/span&gt;.expects(&lt;span class="sy"&gt;:deliver_invitation&lt;/span&gt;).raises(exn)&lt;tt&gt;
&lt;/tt&gt;      post &lt;span class="sy"&gt;:create&lt;/span&gt;, &lt;span class="sy"&gt;:invitation&lt;/span&gt; =&amp;gt; {&lt;span class="sy"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;invalid email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}&lt;tt&gt;
&lt;/tt&gt;      assert_match &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;&lt;span class="co"&gt;SMTP_CLIENT_ERROR_FLASH&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="mod"&gt;i&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@response&lt;/span&gt;.flash[&lt;span class="sy"&gt;:warning&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;      assert_template &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="co"&gt;SMTP_SERVER_ERRORS&lt;/span&gt;.each &lt;span class="r"&gt;do&lt;/span&gt; |exn|&lt;tt&gt;
&lt;/tt&gt;    should &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;handle &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;exn&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="co"&gt;InvitationsMailer&lt;/span&gt;.expects(&lt;span class="sy"&gt;:deliver_invitation&lt;/span&gt;).raises(exn)&lt;tt&gt;
&lt;/tt&gt;      post &lt;span class="sy"&gt;:create&lt;/span&gt;, &lt;span class="sy"&gt;:invitation&lt;/span&gt; =&amp;gt; {&lt;span class="sy"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;invalid email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;}&lt;tt&gt;
&lt;/tt&gt;      assert_match &lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;&lt;span class="co"&gt;SMTP_SERVER_ERROR_FLASH&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="mod"&gt;i&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@response&lt;/span&gt;.flash[&lt;span class="sy"&gt;:warning&lt;/span&gt;]&lt;tt&gt;
&lt;/tt&gt;      assert_template &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;And in &lt;code&gt;invitations_controller.rb&lt;/code&gt;:&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;InvitationsController&lt;/span&gt; &amp;lt; &lt;span class="co"&gt;ApplicationController&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;create&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@invitation&lt;/span&gt;.new(params[&lt;span class="sy"&gt;:invitation&lt;/span&gt;])&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;if&lt;/span&gt; &lt;span class="iv"&gt;@invitation&lt;/span&gt;.save&lt;tt&gt;
&lt;/tt&gt;      redirect_to root_url&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;else&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      render &lt;span class="sy"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;rescue&lt;/span&gt; *&lt;span class="co"&gt;SMTP_CLIENT_ERRORS&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    flash[&lt;span class="sy"&gt;:warning&lt;/span&gt;] = &lt;span class="co"&gt;SMTP_CLIENT_ERROR_FLASH&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="sy"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;rescue&lt;/span&gt; *&lt;span class="co"&gt;SMTP_SERVER_ERRORS&lt;/span&gt; =&amp;gt; error&lt;tt&gt;
&lt;/tt&gt;    notify_hoptoad error&lt;tt&gt;
&lt;/tt&gt;    flash[&lt;span class="sy"&gt;:warning&lt;/span&gt;] = &lt;span class="co"&gt;SMTP_SERVER_ERROR_FLASH&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    render &lt;span class="sy"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;If you use &lt;a href="https://github.com/thoughtbot/suspenders/tree"&gt;Suspenders&lt;/a&gt; you'll be pleased to find that we've included &lt;a href="http://github.com/thoughtbot/suspenders/tree/master/config/initializers/errors.rb"&gt;&lt;code&gt;config/initializers/errors.rb&lt;/code&gt;&lt;/a&gt; for you pre-populated with both SMTP and &lt;a href="http://tammersaleh.com/posts/rescuing-net-http-exceptions"&gt;HTTP exceptions&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/22/i-accidentally-the-whole-smtp-exception</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Mike Burns</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-19:7785</id>
    <published>2008-12-19T22:16:00Z</published>
    <updated>2008-12-20T02:42:46Z</updated>
    <category term="Development" />
    <category term="Rails" />
    <category term="rails" />
    <category term="Ruby" />
    <category term="ruby" />
    <category term="tips" />
    <category term="vim" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/490080636/thoughtbot-is-filled-with-vim-and-vigor" rel="alternate" type="text/html" />
    <title>thoughtbot is filled with vim and vigor</title>
<content type="html">
            &lt;p&gt;Slowly over the past year thoughtbot has turned from an all-TextMate (and one
 Emacs) group into a mostly-vim group. Here are some tips, tricks, and scripts we've mastered along the way:&lt;/p&gt;

&lt;h2&gt;From Mike Burns&lt;/h2&gt;

&lt;p&gt;I've been a vim user for six years, and brought the vim fever to thoughtbot. I tend to rely more on the built-in commands than on scripts and plugins. My favorite commands start with &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; (think first and 'till - see &lt;code&gt;:help f &lt;/code&gt; or &lt;code&gt;:help t&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;Finding characters with &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; rocks. For example, if you're at the beginning of:&lt;/p&gt;

 &lt;pre&gt;{:foo =&gt; 1, :bar =&gt; 3, :baz =&gt; 8, :barney =&gt; -1}&lt;/pre&gt; 

&lt;p&gt;And you want to put a newline after the comma, you can do:&lt;/p&gt;

 &lt;pre&gt;f,a&amp;lt;ENTER&amp;gt;&lt;/pre&gt; 

&lt;p&gt;To jump to the next comma and repeat the prior action you can do:&lt;/p&gt;

 &lt;pre&gt;;.&lt;/pre&gt;

&lt;p&gt;This is because ; repeats the prior &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt; repeats the prior modification.
If you have to do this a lot in a row, you could make a macro from it:&lt;/p&gt;

  &lt;pre&gt;qa0f,a&amp;lt;ENTER&amp;gt;&amp;lt;ESC&amp;gt;q&lt;/pre&gt;

&lt;p&gt;This sets the macro named '&lt;code&gt;a&lt;/code&gt;' as: go to the beginning of the line, find the first comma, and append a newline after it. You can then repeat this macro with &lt;code&gt;@a&lt;/code&gt; and repeat that macro (the one you just did) with &lt;code&gt;@@&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; as a motion for, say, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;. Like if you're at the beginning of:&lt;/p&gt;

 &lt;pre&gt;&amp;lt;img src="/images/michaelphelpssupersaiyan.gif" /&amp;gt;&lt;/pre&gt;

&lt;p&gt;And you need to change the image source to "/images/giant_french_spider.jpg". It goes like this:&lt;/p&gt;

 &lt;pre&gt;2f/ ct"giant_french_spider.jpg&amp;lt;ESC&amp;gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;2&lt;/code&gt; in front of &lt;code&gt;f&lt;/code&gt; finds the second &lt;code&gt;/&lt;/code&gt;; the space immediately after moves to the next character (could also use &lt;code&gt;l&lt;/code&gt; (lowercase L) instead). Then change the text up to (but not including) the doublequote with &lt;code&gt;ct"&lt;/code&gt;; type the text and hit escape to get back to command mode.&lt;/p&gt;

&lt;h2&gt;From Jason Morrison&lt;/h2&gt;
&lt;p&gt;
Three of my favorite things in Vim are the rails.vim plugin, the ack.vim plugin, and visual block mode.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="http://rails.vim.tpope.net/"&gt;rails.vim&lt;/a&gt; plugin does an excellent job of
syntax highlighting, navigating from one file to another (type &lt;code&gt;:help :RT&lt;/code&gt; for a description of
how to quickly jump between e.g. models and tests or a controller action and its view), and a slew of other things.
&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://blog.ant0ine.com/2007/03/ack_and_vim_integration.html"&gt;Ack plugin for Vim&lt;/a&gt; nicely
integrates &lt;a href="http://petdance.com/ack/"&gt;Ack&lt;/a&gt; search results into a new buffer.  For example,&lt;/p&gt;

&lt;pre&gt;:Ack delete app/&lt;/pre&gt;

&lt;p&gt;gives you:&lt;/p&gt;

&lt;img src="/assets/2008/12/19/Picture_3.png" /&gt;


&lt;p&gt;
Finally, visual block mode, a killer feature available in several editors, comes in handy when changing
swaths of similar code.  Let's say you start with this:
&lt;/p&gt;

&lt;pre&gt;
{
 :first_name    =&gt; (primary_contact &amp;&amp; primary_contact.first_name),
 :last_name     =&gt; (primary_contact &amp;&amp; primary_contact.last_name),
 :organization  =&gt; (primary_contact &amp;&amp; primary_contact.company)
}
&lt;/pre&gt;

&lt;p&gt;
and then you:
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Place the cursor after the first "primary_contact"&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;control-v&lt;/code&gt; to enter visual block mode&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;f.&lt;/code&gt; to move onto the first period&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;jj&lt;/code&gt; to move down twice&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;c&lt;/code&gt; to change the highlighted text&lt;/li&gt;
&lt;li&gt;Type an underscore, and hit &lt;code&gt;escape&lt;/code&gt; to apply the change to all selected lines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
then you end up with:
&lt;/p&gt;

&lt;pre&gt;
{
 :first_name    =&gt; (primary_contact_first_name),
 :last_name     =&gt; (primary_contact_last_name),
 :organization  =&gt; (primary_contact_company)
}
&lt;/pre&gt;

&lt;p&gt;
Often this can be done with a search/replace, but this is the technique I usually favor due to its brevity.
&lt;/p&gt;

&lt;h2&gt;From Chad Pytel&lt;/h2&gt;



&lt;p&gt;vim was my first programming text editor, and its been fun to come back to it after all this time.  It fits like an old glove.&lt;/p&gt;



&lt;p&gt;I haven't gotten used to visual editing mode yet, so I tend to use line numbers to quickly do things.  for example, to move lines 40 through 50 to line 30, you can do:&lt;/p&gt;



&lt;pre&gt;40,50m30&lt;/pre&gt;



&lt;p&gt;Many of the commands you'd use with visual mode, work with line numbers too, for example:&lt;/p&gt;

&lt;pre&gt;35,70=&lt;/pre&gt;
&lt;pre&gt;14,16y&lt;/pre&gt;
&lt;pre&gt;16,20d&lt;/pre&gt;

&lt;h2&gt;From Jon Yurek&lt;/h2&gt;
&lt;p&gt;Getting around in vim is way quicker than just holding down the arrow keys. If you're checking a bit of code and moving between it and somewhere else, you should set a mark. &lt;code&gt;m&amp;lt;letter&amp;gt;&lt;/code&gt; sets a mark, which you can jump to with &lt;code&gt;'&amp;lt;letter&amp;gt;&lt;/code&gt;. Likewise, jumping to a specific line is as simple as &lt;code&gt;:&amp;lt;line-number&amp;gt;&lt;/code&gt;. Got a failing test on line 146? &lt;code&gt;:146&lt;/code&gt; and you're there. So you can set a mark for the line you're on with &lt;code&gt;ma&lt;/code&gt;, jump to line 20 with &lt;code&gt;:20&lt;/code&gt;, fix your typo, then jump back with &lt;code&gt;'a&lt;/code&gt;, and you don't have to remember exactly what line you're on. Even better &lt;code&gt;`&lt;/code&gt; instead of &lt;code&gt;'&lt;/code&gt; will jump to the column you were on, not just the line. Also cool is &lt;code&gt;`.&lt;/code&gt; which jumps to the last place you edited.&lt;/p&gt;



&lt;p&gt;Thing is, when you do that, you may find your cursor is at the bottom of the screen, making further code hard to read. Fix that with &lt;code&gt;z.&lt;/code&gt;, which will zip the line the cursor is on to the middle of the window. You can also snap it to the top (&lt;code&gt;z&amp;lt;ENTER&amp;gt;&lt;/code&gt;) or bottom (&lt;code&gt;z-&lt;/code&gt;) just as easily.&lt;/p&gt;



&lt;p&gt;When you cut a line with &lt;code&gt;d&lt;/code&gt; (or yank it with &lt;code&gt;y&lt;/code&gt;), the text you paste goes into a register. You can control the register it goes into by hitting &lt;code&gt;"&amp;lt;letter&amp;gt;&lt;/code&gt; first. For example, &lt;code&gt;"gyy&lt;/code&gt; will copy the current line into the &lt;code&gt;g&lt;/code&gt; buffer. You can paste this text back by specifying the register before your &lt;code&gt;p&lt;/code&gt; command: &lt;code&gt;"gp&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;From Dan Croak&lt;/h2&gt;



&lt;p&gt;I'm a casual vim user, mostly when pairing with Joe. My favorite commands are basic, but nice:&lt;/p&gt;



&lt;pre&gt;:AV&lt;/pre&gt;



&lt;p&gt;Say I'm in &lt;code&gt;app/models/user.rb&lt;/code&gt;. This opens the *Alternate* file (unit test) in a *Vertical* window split next to the model.&lt;/p&gt;



&lt;pre&gt;gf&lt;/pre&gt;
&lt;p&gt;From Tim Pope's &lt;a href="http://rails.vim.tpope.net/"&gt;rails.vim&lt;/a&gt;:. When I put my cursor over a piece of text and type &lt;code&gt;gf&lt;/code&gt; in a Rails app, I *go* to the *file* I'd expect. It works for partials, requires, and more.&lt;/p&gt;



&lt;p&gt;My configuration comes directly from &lt;a href="http://github.com/jferris/config_files"&gt;Joe's dotfiles&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/19/thoughtbot-is-filled-with-vim-and-vigor</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-17:7767</id>
    <published>2008-12-17T15:30:00Z</published>
    <updated>2008-12-17T15:31:31Z</updated>
    <category term="Business" />
    <category term="2009" />
    <category term="beginning rails" />
    <category term="boston" />
    <category term="january" />
    <category term="training" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/487718723/ruby-on-rails-training-in-boston" rel="alternate" type="text/html" />
    <title>Ruby on Rails training in Boston</title>
<content type="html">
            &lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/16/icon-training.gif" /&gt;
We’re pleased to continue offering &lt;a href="http://thoughtbot.com/services/training"&gt;Ruby on Rails training&lt;/a&gt; in Boston. The next two classes have been scheduled:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://thoughtbot.com/services/training/beginning-ruby-on-rails-boston"&gt;Beginning Ruby on Rails&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://thoughtbot.com/services/training/advanced-ruby-on-rails-boston"&gt;Advanced Ruby on Rails&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;&lt;a href="http://umbrellatoday.com"&gt;Umbrella Today?&lt;/a&gt; is used as a case study for all courses, for which attendees get access to the full source.&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/16/john_wayne_green_beret.jpg" /&gt;&lt;/p&gt;


	&lt;h3&gt;Beginning Ruby on Rails&lt;/h3&gt;


	&lt;p&gt;&lt;em&gt;January 29th-30th, 2009&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;This course is meant for &lt;strong&gt;programmers with a background in &lt;span class="caps"&gt;PHP&lt;/span&gt;, Java, or .NET&lt;/strong&gt;. The course includes a section on “enough Ruby programming to understand Rails”. We’re opinionated about &lt;a href="http://c2.com/cgi/wiki?TestDrivenDevelopment"&gt;Test Driven Development&lt;/a&gt; as a critical part of Rails development, and are integrating &lt;span class="caps"&gt;TDD&lt;/span&gt; lessons into the course.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.eventwax.com/beginning-ruby-on-rails-boston"&gt;Sign up now!&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;Advanced Ruby on Rails&lt;/h3&gt;


	&lt;p&gt;&lt;em&gt;February 13th, 2009&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;This course is meant for &lt;strong&gt;intermediate Rails developers who have done testing&lt;/strong&gt; with Ruby or the &lt;a href="http://xunitpatterns.com/"&gt;xUnit&lt;/a&gt; family (JUnit, NUnit). It is focused on Rails best practices and applying &lt;a href="http://c2.com/cgi/wiki?WhatIsRefactoring"&gt;refactoring&lt;/a&gt; and other skills.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.eventwax.com/advanced-ruby-on-rails-boston"&gt;Sign up now!&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;Testimonials&lt;/h3&gt;


	&lt;blockquote&gt;
		&lt;p&gt;“After the training session my code style is so fresh, Vogue wants to publish my tests.” – Greg Sterndale&lt;/p&gt;
	&lt;/blockquote&gt;


	&lt;blockquote&gt;
		&lt;p&gt;“If you’re a freelance developer you owe it to your clients to come and learn Rails development &amp; delivery from the team at Thoughtbot.” – Mike Breen&lt;/p&gt;
	&lt;/blockquote&gt;


	&lt;blockquote&gt;
		&lt;p&gt;“Now it feels like I’m looking at the world through test-tinted glasses!” – Josh Nichols&lt;/p&gt;
	&lt;/blockquote&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/17/ruby-on-rails-training-in-boston</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Matt Jankowski</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-16:7766</id>
    <published>2008-12-16T20:11:00Z</published>
    <updated>2008-12-16T20:13:04Z</updated>
    <category term="Business" />
    <category term="Design" />
    <category term="Development" />
    <category term="Technology" />
    <category term="today" />
    <category term="umbrella" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/486917411/umbrella-today-winter-edition" rel="alternate" type="text/html" />
    <title>Umbrella Today, Winter edition</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://www.umbrellatoday.com/"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/16/ut-snow.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;Umbrella Today now has snow support!&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;If you subscribe to &lt;a href="http://www.umbrellatoday.com/"&gt;umbrella today&lt;/a&gt;, we will do one of the following things…&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;On days where there is no precipitation in your area, we will continue to not send you any text messages at all.&lt;/li&gt;
		&lt;li&gt;If it’s going to rain, we’ll send you a message suggesting you bring an umbrella&lt;/li&gt;
		&lt;li&gt;If it’s going to snow (ie, going to rain plus it’s &amp;lt; than 32˚F where you are), we’ll tell you that it’s going to snow.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;In addition, the messages that tell you to bring your umbrella now include the percentage chance of precipitation for your area.  That way you don’t have to rely purely on our threshold (40%) for notifying you, and you can make some more informed decisions about whether to bring your umbrella or not.&lt;/p&gt;


	&lt;p&gt;We also have a new handsome results page for when there is snow (pictured to the right).&lt;/p&gt;


	&lt;p&gt;Future stuff we’re planning…&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;We want to add International support, and are still looking for the correct library to do this with.&lt;/li&gt;
		&lt;li&gt;We want to add the ability to notify on the :15 or :30 or :45 rather than just on the hour, and will probably allow this in the next release.&lt;/li&gt;
	&lt;/ul&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/16/umbrella-today-winter-edition</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Tammer Saleh</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-15:7762</id>
    <published>2008-12-15T21:39:00Z</published>
    <updated>2008-12-15T21:39:59Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/485948744/we-re-gonna-be-rich" rel="alternate" type="text/html" />
    <title>Hoptoad Gets Paid Accounts and SSL</title>
<content type="html">
            &lt;p&gt;It’s been a little over five months since we launched Hoptoad, and we’ve caught over 13 million application errors from people “riding the toad”.  Now we’re taking it to the next level and &lt;a href="http://hoptoadapp.com/account/new"&gt;rolling out paid plans&lt;/a&gt; along with some new features.&lt;/p&gt;


	&lt;h2&gt;When I Ride The Toad, I Ride Him with a Saddle.&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/12/Hoptoad-4.jpg" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;Hoptoad has been an incredible success since its launch.  The people using the service so far have absolutely proven our original assumption that a lot of the things we were feeling pain with in our consulting business are things felt by a lot of other web application developers too.&lt;/p&gt;


	&lt;p&gt;As more and more people have signed up, we’ve had a great relationship with EngineYard from an infrastructure perspective as both the data storage and bandwidth needs of the service have continued to grow (most recently we moved onto a dedicated MySQL cluster to account for future growth).&lt;/p&gt;


	&lt;p&gt;This usage growth has been fantastic to watch, and doing frequent production deploys to satisfy feature requests and feedback from actual users of the service has been a great motivation to keep improving the service for ourselves as well.&lt;/p&gt;


	&lt;p&gt;Today we’re excited to introduce paid plans for hoptoad – but first we want to make it clear how much we’ve appreciated the feedback from our current users – &lt;strong&gt;as long as you stay at your current project and user usage, you will never be charged.&lt;/strong&gt;  Right now 75% of our users fall into the “Egg” plan, which is completely free.  Finally, we decided that (just like new accounts) when current users decide to upgrade to any of the paid plans, they’ll get a 30 day free trial at the new plan level.&lt;/p&gt;


&lt;div&gt;&lt;/div&gt;

	&lt;h2&gt;Lock that Toad Up!!&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/12/Hoptoad_Now_has_Paid_Plans_and_SSL_—_GIANT_ROBOTS_SMASHING_INTO_OTHER_GIANT_ROBOTS.jpg" alt="" /&gt;&lt;/p&gt;


	&lt;p&gt;The Hoptoad Notifier plugin does its best to strip out sensitive data (like passwords in the post parameters) before sending the exception along.  But we’ve always felt just a little funny about sending even the rest of the exception data in the clear.  &lt;strong&gt;That’s why we’re now introducing &lt;a href="http://en.wikipedia.org/wiki/SSL"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/a&gt; support.&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Enabling &lt;span class="caps"&gt;SSL&lt;/span&gt; is as simple as upgrading your account to either the Toad or Bullfrog plans, and adding the &lt;code&gt;secure&lt;/code&gt; option to your Hoptoad Notifier configuration:&lt;/p&gt;


&lt;div&gt;&lt;/div&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="co"&gt;HoptoadNotifier&lt;/span&gt;.configure &lt;span class="r"&gt;do&lt;/span&gt; |config|&lt;tt&gt;
&lt;/tt&gt;  config.api_key = &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;1234567890abcdef&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  config.secure  = &lt;span class="pc"&gt;true&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;h2&gt;Halp!&lt;/h2&gt;


	&lt;p&gt;Finally, in order to better serve the existing users in the Hoptoad community – and what we hope will be a new group of hoptoad customers – we’ve installed the &lt;a href="http://tenderapp.com/"&gt;tender&lt;/a&gt; support actually, from &lt;span class="caps"&gt;ENTP&lt;/span&gt;.  Tender gives a much more friendly experience than dropping a tired, downtrodden user in front of a cold, silent lighthouse page.  So use the new &lt;a href="http://hoptoad.tenderapp.com/"&gt;Hoptoad support&lt;/a&gt; area for leaving feedback and asking questions.&lt;/p&gt;


	&lt;h2&gt;Thanks&lt;/h2&gt;


	&lt;p&gt;So thanks again to the businesses, hobbyists and other developers that have tried out hoptoad and told us that you find value in the service.  If you’re an existing customer,  you’ll find the plan details in the account edit area of your existing account.  If you create a new account, the details are right there on the &lt;a href="http://hoptoadapp.com/account/new"&gt;new account&lt;/a&gt; page.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/15/we-re-gonna-be-rich</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-10:7756</id>
    <published>2008-12-10T23:01:00Z</published>
    <updated>2008-12-12T14:44:53Z</updated>
    <category term="Business" />
    <category term="kickstart" />
    <category term="training" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/481047556/kickstart" rel="alternate" type="text/html" />
    <title>Kickstart</title>
<content type="html">
            &lt;p&gt;We do work for some companies with their own &lt;strong&gt;in-house development team&lt;/strong&gt;. They often don’t have much Ruby experience. Others are &lt;strong&gt;startups&lt;/strong&gt;. They need to hire developers but don’t know how to &lt;strong&gt;interview potential Rubyists&lt;/strong&gt;. Neither want to &lt;strong&gt;delay development&lt;/strong&gt; of their projects while they wait to build their team.&lt;/p&gt;


	&lt;p&gt;In response to their needs, we’re pleased to announce our new consulting service:&lt;/p&gt;


&lt;div&gt;&lt;a href="http://thoughtbot.com/services/kickstart"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/11/title-kickstart.gif" /&gt;&lt;/a&gt;&lt;/div&gt;

	&lt;h2&gt;In a nutshell&lt;/h2&gt;


&lt;div&gt;&amp;lt;object height="175" width="285"&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;param&gt;&amp;lt;/param&gt;&amp;lt;embed src="http://www.youtube.com/v/jKMK3XGO27k&amp;amp;#38;hl=en&amp;amp;#38;fs=1" height="175" width="285"&gt;&amp;lt;/embed&gt;&amp;lt;/object&gt;&lt;/div&gt;

	&lt;ol&gt;
	&lt;li&gt;We begin &lt;a href="http://thoughtbot.com/work"&gt;work&lt;/a&gt; on your Rails app immediately. &lt;/li&gt;
		&lt;li&gt;We help hire (if needed) and &lt;a href="http://thoughtbot.com/training"&gt;train&lt;/a&gt; your in-house team. &lt;/li&gt;
		&lt;li&gt;We pair program with your team at &lt;a href="http://blog.railsrumble.com/workshare#tb"&gt;our office&lt;/a&gt; or yours. &lt;/li&gt;
		&lt;li&gt;When your team is self-sufficient, you take the reins.&lt;/li&gt;
		&lt;li&gt;We quietly back away.&lt;/li&gt;
	&lt;/ol&gt;


	&lt;h2&gt;Hiring&lt;/h2&gt;


	&lt;p&gt;Software is a team sport. You need good people whom you trust and whose company you enjoy. Additionally, the ideal Kickstart client understands the value of &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt;. Your team members should be willing and able to pair regularly.&lt;/p&gt;


	&lt;p&gt;We will help you hire by &lt;strong&gt;pairing with interviewees&lt;/strong&gt; on real Ruby code. This even works with developers coming to Ruby from other languages. In this case, the interviewee dictates what should be done, and the thoughtbot developer implements it in Ruby.&lt;/p&gt;


	&lt;h2&gt;Training&lt;/h2&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/10/rocky4strain2.JPG" /&gt;&lt;/p&gt;


	&lt;p&gt;We are &lt;a href="http://thoughtbot.com/training"&gt;experienced trainers&lt;/a&gt; of Ruby, Rails, and related software practices such as &lt;a href="http://en.wikipedia.org/wiki/Code_refactoring"&gt;refactoring&lt;/a&gt;, version control, and &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Transitioning to &lt;strong&gt;a new toolset can be scary&lt;/strong&gt;, but it doesn’t have to be. Internally at thoughtbot, we have a proven track record of making great Ruby developers out of &lt;strong&gt;Java, .NET, Python, or &lt;span class="caps"&gt;PHP&lt;/span&gt; developers&lt;/strong&gt;. We all came from other technology backgrounds and know how to take you down the same path.&lt;/p&gt;


	&lt;h2&gt;Programming&lt;/h2&gt;


	&lt;p&gt;We have consulted on dozens of &lt;a href="http://thoughtbot.com/work"&gt;Rails projects&lt;/a&gt; for the last three years. We’ve &lt;strong&gt;made the mistakes&lt;/strong&gt; your Ruby team is about to make.&lt;/p&gt;


	&lt;p&gt;Imagine your developers sitting at their keyboard, source code in one window, tests flying by in another, with a thoughtbot developer sitting right there, stepping in immediately when a mistake is about to happen.&lt;/p&gt;


	&lt;h2&gt;Self-sufficiency&lt;/h2&gt;


	&lt;p&gt;We believe this is the fastest way to impart Ruby skills to other developers. Our greatest triumph will be when you say:&lt;/p&gt;


	&lt;blockquote&gt;
		&lt;p&gt;“We don’t need thoughtbot anymore. We have a maintainable app with clean code that works. We have an expert development team with a unified vision of where to the app goes next.”&lt;/p&gt;
	&lt;/blockquote&gt;


	&lt;p&gt;&lt;a href="http://thoughtbot.com/contact"&gt;Let’s get started&lt;/a&gt;.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/10/kickstart</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Tammer Saleh</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-08:7755</id>
    <published>2008-12-08T14:50:00Z</published>
    <updated>2008-12-09T14:52:35Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/478544048/voices-that-matter-and-rubyconf-2008" rel="alternate" type="text/html" />
    <title>Voices that Matter and RubyConf 2008</title>
<content type="html">
            &lt;p&gt;We’ve been busy this past few months, having been asked to present at both &lt;a href="http://rubyconf.org/"&gt;RubyConf 2008 in Orlando&lt;/a&gt;, and at &lt;a href="http://www.voicesthatmatter.com/ruby2008/"&gt;Voices that Matter&lt;/a&gt; (aka “Obieconf”) in our home town of Boston.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/sd/3041195771/"&gt;&lt;img src="http://farm4.static.flickr.com/3165/3041195771_cfba8ecb97.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Matt Jankowski shows a slide asking who the people whose voices matter are, exactly&lt;/em&gt;&lt;/p&gt;


	&lt;h2&gt;Voices that Matter&lt;/h2&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/sd/3041399471/"&gt;&lt;img src="http://farm4.static.flickr.com/3181/3041399471_76bfa491d1.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Pat Maddox, Tammer Saleh, Brian Liles, Sandy Metz discuss how you test whether your voice matters&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;The most recent conference was Voices that Matter, in good ol’ Beantown.  This was one of the best conferences we’d been to, for a few different reasons.&lt;/p&gt;


	&lt;p&gt;Obie Fernandez chaired the conference, and did a great job of keeping it focused and dense.  The talks were limited to 30 minutes each, and mostly dealt with practical business matters: how to run an agile ruby shop; what technologies are ready for wide-spread use; building strong teams; etc.&lt;/p&gt;


	&lt;p&gt;Some of the main themes included &lt;a href="http://smartic.us/2008/8/15/tatft-i-feel-a-revolution-coming-on"&gt;&lt;span class="caps"&gt;TATFT&lt;/span&gt;&lt;/a&gt;, pair programming, and &lt;a href="http://blog.l4rk.com/2008/11/pro-ruby-conference-wrap-up.html"&gt;maintaining a friendly and inviting Rails culture&lt;/a&gt;. 
We were also very surprised by the amount of thoughtbot love we encountered.  We participated in two round table discussions, and presented both &lt;a href="http://www.voicesthatmatter.com/ruby2008/sessions.aspx#nature"&gt;Agile in the Enterprise&lt;/a&gt; and &lt;a href="http://www.voicesthatmatter.com/ruby2008/sessions.aspx#antipatterns"&gt;Rails AntiPatterns&lt;/a&gt;, and we were mentioned in a handful of the other presentations.  We can’t express how happy we are to know that people are getting real value from our tools and philosophies.  You can download our talks here…&lt;/p&gt;


	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/VOICES-THAT-MATTER-Agile-Enterprise.pdf"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/agile-enterprise.jpg" height="225" alt="Agile in the Enterprise" width="300"&gt;&lt;/a&gt;&lt;/td&gt;
			&lt;td&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/antipatterns.pdf"&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/antipatterns.jpg" height="225" alt="Rails AntiPatterns" width="300"&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;




	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;p&gt;Chad and I were very pleased that the AntiPatterns talk (which was a sample from our upcoming &lt;a href="http://my.safaribooksonline.com/9780321620293"&gt;Rails AntiPatterns&lt;/a&gt; book) got a 5-star rating across the board!&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://flickr.com/photos/jcn/3051724907/"&gt;&lt;img src="http://farm4.static.flickr.com/3135/3051724907_3de4296a44.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Chad Pytel speculating about whose voice will matter in The New Economy&lt;/em&gt;&lt;/p&gt;


	&lt;h2&gt;RubyConf 2008&lt;/h2&gt;


	&lt;p&gt;&lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/5/coding-for-failure.pdf"&gt; &lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/5/coding-for-failure.jpg" height="225" alt="Coding for Failure" width="300"&gt; &lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;We also presented at RubyConf on &lt;a href="http://www.rubyconf.org/talks/37" title="in 45 minutes"&gt;Coding For Failure: All you need to know for building rock solid applications&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;I’m not sure what to say about RubyConf that hasn’t already been said.  Except that I would be greatly disappointed, and take it as a personal insult to me, and everyone I love, if it’s not held in exactly the same location next year.&lt;/p&gt;


	&lt;p&gt;As alluded to, RubyConf featured the laziest of rivers, the most full RV rides, the dirtiest go-cart racing, and a water slide that was strangely difficult to climb up from the bottom to the top despite one’s personal interest in achieving such a feat.&lt;/p&gt;


	&lt;p&gt;Note to future conference organizers – if the talks could somehow be projected onto a screen that you could see &lt;strong&gt;from the hot tub&lt;/strong&gt; you probably would not get any complaints.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/danbenjamin/3012061271/"&gt;&lt;img src="http://farm4.static.flickr.com/3013/3012061271_53d873f259.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;&lt;em&gt;Jason Morrison wondering – “when a voice that matters is spoken in a forest but no one hears it, does it make a noise?”&lt;/em&gt;&lt;/p&gt;


	&lt;p&gt;(And thanks to &lt;a href="http://danbenjamin.com/"&gt;Dan Benjamin&lt;/a&gt;, &lt;a href="http://www.jessechannorris.com"&gt;Jesse Chan Norris&lt;/a&gt;, and &lt;a href="http://www.notsostupid.com/"&gt;Sebastian Delmont&lt;/a&gt; for the use of their photos.)&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/8/voices-that-matter-and-rubyconf-2008</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Matt Jankowski</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-12-01:7752</id>
    <published>2008-12-01T16:51:00Z</published>
    <updated>2008-12-01T17:14:00Z</updated>
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/471531249/sweet-tea" rel="alternate" type="text/html" />
    <title>Sweet tea</title>
<content type="html">
            &lt;p&gt;Hey!  Remember when we &lt;a href="http://giantrobots.thoughtbot.com/2008/5/28/funny-shirts-your-friends-won-t-understand-at-railsconf"&gt;launched teebot&lt;/a&gt; right before RailsConf this past May?  Well since then we’ve run out of stock on some of the initial shirt sizes, and we’ve been handing out some previously unsold shirt designs at various ruby events and conferences throughout the year.&lt;/p&gt;


	&lt;p&gt;If you attended any of our &lt;a href="http://thoughtbot.com/training"&gt;training&lt;/a&gt; events, or if you saw us at a conference, we may have thrown a tee shirt at you.  We looked into &lt;a href="http://www.tshirtgun.com/sabre.htm"&gt;t shirt launchers&lt;/a&gt; but they’re prohibitively expensive for something which would primarily just amuse us.&lt;/p&gt;


	&lt;p&gt;So if you didn’t get your fill of Black Friday shopping and your itching to clothe your loved ones in thoughtbot designed tees, why not check out teebot, which has been restocked with sizes of &lt;a href="http://teebot.thoughtbot.com/products/do-or-do-not"&gt;do or do not&lt;/a&gt;, &lt;a href="http://teebot.thoughtbot.com/products/script-runner"&gt;script/runner&lt;/a&gt; and &lt;a href="http://teebot.thoughtbot.com/products/has_many-shoes"&gt;has many shoes&lt;/a&gt; and now features two new shirts…&lt;/p&gt;


	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/1/ralph_head_thumb.gif" alt="" /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/12/1/hoes_thumb.gif" alt="" /&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;&lt;a href="http://teebot.thoughtbot.com/products/red-ralph"&gt;Red ralph teebot logo shirt&lt;/a&gt; &lt;br /&gt;You can tell people this is actually a muxtape shirt if it makes you more likely to buy it.&lt;/td&gt;
			&lt;td&gt;&lt;a href="http://teebot.thoughtbot.com/products/has-many-hoes"&gt;has_many :hoes, :through =&amp;gt; :area_codes&lt;/a&gt; &lt;br /&gt; Frequently spotted but never before sold. &lt;strong&gt;Until now!&lt;/strong&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;




	&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


	&lt;p&gt;While I have your attention, we’ve put our two presentations from the recent &lt;a href="http://voicesthatmatter.com/ruby2008/"&gt;Voices That Matter&lt;/a&gt; professional ruby conference (great &lt;a href="http://flickr.com/photos/sd/sets/72157609355648746/"&gt;photo set&lt;/a&gt; from Sebastian Delmont on flickr) in Boston online.  Here you are:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Matt Jankowski – &lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/VOICES-THAT-MATTER-Agile-Enterprise.pdf"&gt;Agile in the Enterprise&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Chad Pytel and Tammer Saleh – &lt;a href="http://giantrobots.thoughtbot.com/assets/2008/12/1/antipatterns.pdf"&gt;Rails Antipatterns: Best Practice Refactoring&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/12/1/sweet-tea</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-11-16:7730</id>
    <published>2008-11-16T18:23:00Z</published>
    <updated>2008-11-17T16:02:21Z</updated>
    <category term="Business" />
    <category term="bars" />
    <category term="boston" />
    <category term="entertainment" />
    <category term="restaurants" />
    <category term="voices that matter" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/455129148/boston-guide-for-rubyists" rel="alternate" type="text/html" />
    <title>Boston guide for Rubyists</title>
<content type="html">
            &lt;p&gt;The Voices that Matter &lt;a href="http://www.voicesthatmatter.com/ruby2008/"&gt;Professional Ruby Conference&lt;/a&gt; is this upcoming week in Boston. I’m excited to share our fair city with all of those attending. To make your stay more pleasant, I’ve assembled a little guide.&lt;/p&gt;


	&lt;p&gt;It is meant explicitly for Rubyists visiting town this week, November 2008. If anyone has other Boston tips, please add them to the comments.&lt;/p&gt;


	&lt;h2&gt;Getting around&lt;/h2&gt;


	&lt;h3&gt;The T&lt;/h3&gt;


	&lt;p&gt;The subway system is called “the T”, and has colored lines. &lt;a href="http://www.mbta.com/schedules_and_maps/subway/lines/?route=GREEN#Green%20Line"&gt;The Green Line from Kenmore to Haymarket&lt;/a&gt; is the section of the subway system that you most care about for the part of Boston the conference is being held. If you want to go down to &lt;span class="caps"&gt;MIT&lt;/span&gt;, Central Square, or Harvard Square in Cambridge, take the #1 bus from &lt;a href="http://is.gd/7KWl"&gt;Massachusetts Avenue and Commonwealth Avenue.&lt;/a&gt;&lt;/p&gt;


	&lt;h3&gt;The Sheraton and the Prudential&lt;/h3&gt;


	&lt;p&gt;The conference is at the Sheraton Boston (&lt;a href="http://is.gd/7z5o"&gt;Google Map&lt;/a&gt;), which is attached to the Prudential. The Prudential building is the second-tallest in Boston and has a large, upscale mall that connects Huntington Avenue and Boylston Street, two main thoroughfares in Boston. It has a Starbucks, bunch of clothing stores, a Barnes &amp; Noble, and a few chain restaurants (try the clam chowder at &lt;a href="http://www.legalseafoods.com/"&gt;Legal Seafoods&lt;/a&gt;).&lt;/p&gt;


	&lt;p&gt;The indoor maze is nice bonus if the weather’s not up to Florida/Texas/California standards. There’s a skyway that connects the Prudential to Copley, a larger, more upscale mall. Less important than knowing where the shopping is, however, is knowing this cut-through when you’re trying to find food:&lt;/p&gt;


	&lt;h2&gt;Food&lt;/h2&gt;


	&lt;h3&gt;Food: Tremont Street&lt;/h3&gt;


	&lt;p&gt;These are all walkable from the hotel. Cut through Copley. You’ll end up outside, facing the Back Bay station (Orange Line). Make a right onto Dartmouth Street, walk about five short blocks and you’ll be at Tremont. Most of these restaurants are to your left on Tremont.&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://www.yelp.com/biz/picco-boston-2"&gt;Picco&lt;/a&gt; &lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/the-beehive-boston"&gt;The Beehive&lt;/a&gt; More of a bar. Burger, beer, and live jazz music.&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/masa-boston"&gt;Masa&lt;/a&gt; Southwestern, Tex-Mex.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Food: Asian&lt;/h3&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://www.yelp.com/biz/douzo-boston"&gt;Douzo&lt;/a&gt; is located just through the Copley mall described above. Excellent sushi. &lt;/li&gt;
		&lt;li&gt;&lt;a href="http://www.yelp.com/biz/kaze-shabu-shabu-boston"&gt;Kaze Shabu Shabu&lt;/a&gt; is a fun place. Boiling water in front of you, drop in your chicken, pork, beef, vegetables, etc.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h3&gt;Food: the North End&lt;/h3&gt;


	&lt;p&gt;This is for the adventurous, unafraid to leave the bounds of the hotel, especially for a great dinner. The North End is Boston’s Italian neighborhood. The food over here is amazing. It’s not right next to the hotel but it’s worth the $1.25 on the Green Line to Haymarket or a ~$10 cab ride.&lt;/p&gt;


	&lt;p&gt;You can’t go wrong with &lt;a href="http://is.gd/7zI6"&gt;any of the restaurants&lt;/a&gt; in this neighborhood.&lt;/p&gt;


	&lt;h2&gt;The Bars&lt;/h2&gt;


	&lt;p&gt;Okay, the important stuff. There’s about a dozen good bars within three blocks of the hotel. Mostly on the 900 block of Boylston Street and on Dalton itself (the address of the Sheraton).&lt;/p&gt;


	&lt;h3&gt;King’s&lt;/h3&gt;


	&lt;p&gt;This place is huge with tons of activities.&lt;/p&gt;


	&lt;p&gt;Bowling, tons of pool tables and three bars. Big Buck Hunter, Golden Tee, Ms. Pacman, and Centipede.&lt;/p&gt;


	&lt;p&gt;On tap: Harpoon &lt;span class="caps"&gt;IPA&lt;/span&gt;, Sam Admas Octoberfest. Good pitcher specials.&lt;/p&gt;


	&lt;p&gt;Where: Dalton Street, closest bar to the Sheraton. (&lt;a href="http://www.yelp.com/biz/kings-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/kings_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/kings_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Bukowski&lt;/h3&gt;


	&lt;p&gt;This place is named after a &lt;a href="http://en.wikipedia.org/wiki/Charles_Bukowski"&gt;local writer&lt;/a&gt;. It’s got a Bohemian feel, is tiny (capacity under 50), and is known for having some of the best beer selection in town.&lt;/p&gt;


	&lt;p&gt;On the stereo: folk and country music, John Prine, Bob Dylan.&lt;/p&gt;


	&lt;p&gt;Booze: &lt;a href="http://beeradvocate.com/beer/profile/2743"&gt;Green Flash&lt;/a&gt;, &lt;a href="http://beeradvocate.com/articles/698"&gt;Leatherlips &lt;span class="caps"&gt;IPA&lt;/span&gt;&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/147/4083/"&gt;Stone Ruination&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/162/259"&gt;Ipswich &lt;span class="caps"&gt;IPA&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://beeradvocate.com/beer/profile/162/260"&gt;Oatmeal Stout&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/98"&gt;Harpoon&lt;/a&gt; (local), &lt;a href="http://beeradvocate.com/beer/profile/64/2093"&gt;Dogfish 90&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/4/448/"&gt;Allagash Tripel&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/345/1005"&gt;Victory Hop Devil&lt;/a&gt;, &lt;a href="http://beeradvocate.com/beer/profile/158/12013"&gt;Great Divide Yeti&lt;/a&gt; and about 100 others…&lt;/p&gt;


	&lt;p&gt;Where: Dalton Street, tucked in between a parking garage and the Mass Turnpike… seriously. (&lt;a href="http://www.yelp.com/biz/bukowski-tavern-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/bukowskis_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/bukowskis_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Dillon’s&lt;/h3&gt;


	&lt;p&gt;This place is classy. Dark wood, fans look like they belong in the Bahamas.&lt;/p&gt;


	&lt;p&gt;On tap: Guinness, &lt;span class="caps"&gt;UFO&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;On the stereo: Van Morrison.&lt;/p&gt;


	&lt;p&gt;Where: Boylston street, next to the firehouse. Corner of Boylston and Dalton. (&lt;a href="http://www.yelp.com/biz/dillons-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/dillons_one.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/dillons_two.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;McGreevey’s&lt;/h3&gt;


	&lt;p&gt;This place is a baseball bar. Very &lt;strong&gt;Boston&lt;/strong&gt;. Irish bartenders, Irish food, Irish beer. Owned by &lt;a href="http://www.youtube.com/v/x-64CaD8GXw"&gt;Dropkick Murphys&lt;/a&gt;. Waitress says they’re “bad ass guys” and “come in here all the time.” Filled with superstition and &lt;a href="http://redsox.com"&gt;Red Sox&lt;/a&gt; folklore. “McGreevey’s 3rd Base is the last stop before home.”&lt;/p&gt;


	&lt;p&gt;On tap: Red Hook Long Hammer.&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/mcgreevys-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/mcgreeveys_two.JPG" width="250" /&gt;
&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/mcgreeveys_one.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Pour House&lt;/h3&gt;


	&lt;p&gt;Warm. &lt;span class="caps"&gt;TGI&lt;/span&gt; Friday’s feel (a.k.a. lots of crazy crap on the walls). Lot of musicians from &lt;a href="http://www.berklee.edu/"&gt;Berklee&lt;/a&gt; hang out there. Huge beers of the Bud/Miller/Coors variety.&lt;/p&gt;


	&lt;p&gt;On the stereo: &lt;a href="http://www.youtube.com/watch?v=3m6z1Q2MkVk"&gt;Runaround Sue&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/the-pour-house-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/pour_house.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Lir&lt;/h3&gt;


	&lt;p&gt;On Wednesday night of the conference, head to the second floor of Lir from 9pm-midnight. We’re holding the room for Rubyists only. Go up the spiral staircase to the room with all the bookcases…&lt;/p&gt;


	&lt;p&gt;Where: Boylston Street. (&lt;a href="http://www.yelp.com/biz/lir-irish-pub-and-restaurant-boston"&gt;Yelp&lt;/a&gt;)&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://giantrobots.thoughtbot.com/assets/2008/11/15/lir_one.JPG" width="250" /&gt;&lt;/p&gt;


	&lt;h3&gt;Other bars close by&lt;/h3&gt;


	&lt;p&gt;If you’re more of the college persuasion, or enjoy Southern-style barbecue chicken and ribs, try &lt;a href="http://www.yelp.com/biz/whiskeys-food-and-spirits-boston"&gt;Whiskey’s&lt;/a&gt;. If you want to try to catch a Red Sox player cheating on his wife with a Northeastern student, go to &lt;a href="http://www.yelp.com/biz/daisy-buchanans-boston"&gt;Daisy Buchanan’s&lt;/a&gt;. If you want a breathtaking view of the city, hit the &lt;a href="http://www.yelp.com/biz/top-of-the-hub-boston"&gt;Top of the Hub&lt;/a&gt;, which sits on like the 842nd floor of the Prudential. It’s a very expensive dinner (one of the nicest restaurants in Boston), but you can sit at the bar and get a drink and a snack for under $20 while reflecting on the &lt;a href="http://en.wikipedia.org/wiki/Siege_of_Boston"&gt;Siege of Boston&lt;/a&gt;... at least that’s what I do.&lt;/p&gt;


	&lt;p&gt;We hope your enjoy your stay in the Hub of the Universe.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/11/16/boston-guide-for-rubyists</feedburner:origLink></entry>
  <entry xml:base="http://giantrobots.thoughtbot.com/">
    <author>
      <name>Dan Croak</name>
    </author>
    <id>tag:giantrobots.thoughtbot.com,2008-11-07:7699</id>
    <published>2008-11-07T22:17:00Z</published>
    <updated>2008-11-11T06:49:25Z</updated>
    <category term="Development" />
    <category term="Technology" />
    <category term="bacon" />
    <category term="context" />
    <category term="cucumber" />
    <category term="matchy" />
    <category term="rspec" />
    <category term="shoulda" />
    <category term="testing" />
    <link href="http://feeds.feedburner.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/445951359/a-critical-look-at-the-current-state-of-ruby-testing" rel="alternate" type="text/html" />
    <title>A critical look at the current state of Ruby testing</title>
<content type="html">
            &lt;p&gt;I’ve been feeling lately that there is a splintering in the Ruby community over testing tools. RSpec is very popular. Shoulda, too. context, matchy, bacon &amp; test/spec all have their fans.&lt;/p&gt;


	&lt;p&gt;There’s nothing inherently wrong with experiments. Diversity is a virtue. We all learn from one another.&lt;/p&gt;


	&lt;p&gt;However, standards also have their place. Testing is in the &lt;span class="caps"&gt;DNA&lt;/span&gt; of the Ruby community. Why should I have to ask questions on a mailing list of unknown helpfulness when I can find all my answers in the &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;Ruby Standard Library&lt;/a&gt;?&lt;/p&gt;


	&lt;p&gt;There’s a simple fact that no one seems to be talking about: &lt;strong&gt;all of these testing tools are solutions to non-existant problems.&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;Let’s take a critical look at the current state of Ruby testing.&lt;/p&gt;


	&lt;h2&gt;Why context blocks are bad&lt;/h2&gt;


They look like this in Shoulda:
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;a GET to #index&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="i"&gt;2&lt;/span&gt;.times { Factory(&lt;span class="sy"&gt;:user&lt;/span&gt;) }&lt;tt&gt;
&lt;/tt&gt;    get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  should_respond_with &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  should_assign_to &lt;span class="sy"&gt;:users&lt;/span&gt;, &lt;span class="sy"&gt;:equals&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;User.ordered&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This means:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Two GETs. The second one is unnecessary.&lt;/li&gt;
		&lt;li&gt;Two failure messages if something goes wrong. I only want to deal with the immediate error. One small step at a time.&lt;/li&gt;
		&lt;li&gt;Nine lines of code&lt;/li&gt;
		&lt;li&gt;Four db records created. I need to create two objects to test ordering. With two test runs, I get 4 objects. With more tests, I get many more objects created. This significantly increases my overall test time for the suite, breaking my concentration and losing everyone money.&lt;/li&gt;
		&lt;li&gt;String programming. Some feel stronger about that eval that happens with “User.ordered”. I’m somewhat ambivalent. I don’t like that I lose syntax highlighting. A pragmatic rule of thumb seems to be: if it can be avoided, it should be.&lt;/li&gt;
		&lt;li&gt;Where do I put new tests? Do I find the perfect context with the perfect setup? At a certain point, nested contexts become unwieldy. I don’t want to scroll 100 lines up to find out where I’m declaring a variable. That kind of garbage reminds me of my &lt;a href="http://en.wikipedia.org/wiki/Active_Server_Pages"&gt;Active Server Pages&lt;/a&gt; days.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Let’s compare that to plain old &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;Test::Unit&lt;/a&gt; (you know, that testing library you get for free with Ruby without having to install gems off github and keep track of the latest “features”):&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_GET_to_index_finds_all_users_ordered&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="i"&gt;2&lt;/span&gt;.times { Factory(&lt;span class="sy"&gt;:user&lt;/span&gt;) }&lt;tt&gt;
&lt;/tt&gt;  get &lt;span class="sy"&gt;:index&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_response &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_equal &lt;span class="co"&gt;User&lt;/span&gt;.ordered, assigns(&lt;span class="sy"&gt;:users&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;With Test::Unit, we get:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;One &lt;span class="caps"&gt;GET&lt;/span&gt;.&lt;/li&gt;
		&lt;li&gt;One failure message to address if something goes wrong: the one I actually care about.&lt;/li&gt;
		&lt;li&gt;Seven lines of code.&lt;/li&gt;
		&lt;li&gt;Two db records created.&lt;/li&gt;
		&lt;li&gt;No string programming.&lt;/li&gt;
		&lt;li&gt;No libraries to install or extra dependencies that might break or I might have to debug.&lt;/li&gt;
		&lt;li&gt;Just put the new test at the end of the file.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;Why “one assertion per test” is a false idol&lt;/h2&gt;


	&lt;p&gt;There’s something very Zen about “one assertion per test.” Focusing on just one thing at a time is noble and easy to wrap your mind around.&lt;/p&gt;


	&lt;p&gt;However, this is often taken to the extreme. Let’s look at a typical test for users/:id.xml:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;17&lt;tt&gt;
&lt;/tt&gt;18&lt;tt&gt;
&lt;/tt&gt;19&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;21&lt;tt&gt;
&lt;/tt&gt;22&lt;tt&gt;
&lt;/tt&gt;23&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;context &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;a GET to /users/:id.xml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  setup &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="iv"&gt;@user&lt;/span&gt; = &lt;span class="co"&gt;Factory&lt;/span&gt; &lt;span class="sy"&gt;:user&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    get &lt;span class="sy"&gt;:show&lt;/span&gt;, &lt;span class="sy"&gt;:id&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@user&lt;/span&gt;.to_param, &lt;span class="sy"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;xml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should_respond_with &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  should_render_template &lt;span class="sy"&gt;:show&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;find the correct User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_equal &lt;span class="iv"&gt;@user&lt;/span&gt;, assigns(&lt;span class="sy"&gt;:user&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should_respond_with_xml_for &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;include the user id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.id.to_s&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  should &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;include the user name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.name&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Not bad. That’s fairly easy to read. The problems:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;6 database records created.&lt;/li&gt;
		&lt;li&gt;Cognitive dissonance. Some of the “one assertions per test” are shoulda macros (one line) and some are should blocks (three lines). &lt;strong&gt;There’s no rhythm. No flow.&lt;/strong&gt; TDD should &lt;strong&gt;feel rhythmic.&lt;/strong&gt;&lt;/li&gt;
		&lt;li&gt;Test names are not intention-revealing. “should include the user id” and “should include the user name” are test names I wrote. They suck. They suck because I’m forcing myself to name something that is too fine-grained.&lt;/li&gt;
		&lt;li&gt;If context/describe/should/it blocks want to make things shorter then why aren’t we using a library (Test::Unit) that makes them one line? The very fact they are more than 3 lines is because of these sugary libraries.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Let’s try it with basic Ruby (Test::Unit) and Rails:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_user_show_xml&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="iv"&gt;@user&lt;/span&gt; = &lt;span class="co"&gt;Factory&lt;/span&gt; &lt;span class="sy"&gt;:user&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  get &lt;span class="sy"&gt;:show&lt;/span&gt;, &lt;span class="sy"&gt;:id&lt;/span&gt; =&amp;gt; &lt;span class="iv"&gt;@user&lt;/span&gt;.to_param, &lt;span class="sy"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;xml&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_response &lt;span class="sy"&gt;:success&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_template &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;show&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_equal &lt;span class="iv"&gt;@user&lt;/span&gt;, assigns(&lt;span class="sy"&gt;:user&lt;/span&gt;)&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;user/id&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.id.to_s&lt;tt&gt;
&lt;/tt&gt;  assert_select &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;user/name&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="iv"&gt;@user&lt;/span&gt;.name&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;ul&gt;
	&lt;li&gt;Half the lines.&lt;/li&gt;
		&lt;li&gt;Leverages the framework.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;How “shoulda macros” should work&lt;/h2&gt;


	&lt;p&gt;I love shoulda macros. I think most of them read well, especially some of the newer ones announced in &lt;a href="http://giantrobots.thoughtbot.com/2008/9/30/shoulda-2-0"&gt;shoulda 2.0&lt;/a&gt; They also keep your test suite &lt;span class="caps"&gt;DRY&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;They are not without problems, however:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Most are designed to be their own tests. This encourages the bad behavior discussed above in “Why contexts are bad” and “Why ‘one assertion per test’ is a false idol.” &lt;/li&gt;
		&lt;li&gt;Some make heavy use of eval. I’m convinced eval is the reason &lt;strong&gt;some line numbers are way off in backtraces.&lt;/strong&gt; Hunting for line numbers makes me angry and breaks my rhythm.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Whatever happened to simple, protected Ruby instance methods?&lt;/p&gt;


	&lt;p&gt;This was my process last night at the &lt;a href="http://bostonrb.org"&gt;Boston.rb&lt;/a&gt; hackfest:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_separate_invalids_creates_invalid&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  model             = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  invalid_file      = invalid_file_for model&lt;tt&gt;
&lt;/tt&gt;  invalid_file_path = invalid_file_path_for model&lt;tt&gt;
&lt;/tt&gt;  assert &lt;span class="co"&gt;File&lt;/span&gt;.exists?(invalid_file_path), &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;invalid_file&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; does not exist&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;That worked fine. However, those last four lines are noisy. Plus, I need to test two other models and don’t want to repeat the same lines.&lt;/p&gt;


	&lt;p&gt;Time to wrap up those last four lines in a method with an &lt;a href="http://xunitpatterns.com/Intent%20Revealing%20Name.html"&gt;Intention-Revealing Name&lt;/a&gt;. Since this is very vanilla Ruby, I’ll put it in a protected method in this file. Later on, &lt;strong&gt;if&lt;/strong&gt; I need to test the same behavior in another file, I’ll move the helper to test_helper.rb.&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_separate_invalids_creates_invalid&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobReport&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobView&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;protected&lt;tt&gt;
&lt;/tt&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;assert_create_invalid_file_for&lt;/span&gt;(model)&lt;tt&gt;
&lt;/tt&gt;  invalid_file      = invalid_file_for model&lt;tt&gt;
&lt;/tt&gt;  invalid_file_path = invalid_file_path_for model&lt;tt&gt;
&lt;/tt&gt;  assert &lt;span class="co"&gt;File&lt;/span&gt;.exists?(invalid_file_path), &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;invalid_file&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; does not exist&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;This is bread-and-butter, meat-and-potatoes, &lt;strong&gt;lunch-pail&lt;/strong&gt; programming.&lt;/p&gt;


	&lt;h2&gt;Standards expand the reach of Ruby&lt;/h2&gt;


	&lt;p&gt;Ruby on Rails is still cutting-edge. Most of the people doing Rails are working at small companies and startups. This is fun and exciting.&lt;/p&gt;


	&lt;p&gt;Let’s make more programmers happy by helping Ruby extend its reach. I’d personally love to see new industries, like the budding &lt;a href="http://en.wikipedia.org/wiki/Clean_technology"&gt;clean teach&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Smart_grid"&gt;smart grid&lt;/a&gt; industry pick Ruby as a go-to programming language.&lt;/p&gt;


	&lt;p&gt;However, for Ruby to continue to grow, risk-averse programmers and managers need some reassurances:&lt;/p&gt;


	&lt;p&gt;“How will my current Java or C# skills translate?”&lt;/p&gt;


	&lt;p&gt;Well, you’ll need to learn Ruby first. Then, just spend an hour or two looking at &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html"&gt;the documentation for Test::Unit.&lt;/a&gt; If you’re familiar with JUnit or NUnit, it’s an easy transition. Same interface. Same programming skill-set.&lt;/p&gt;


	&lt;p&gt;On the other hand, if you have a few weeks, check out RSpec. I can’t guarantee a good &lt;span class="caps"&gt;ROI&lt;/span&gt; on that time you spend, however.&lt;/p&gt;


	&lt;h2&gt;Standards make you focus on domain logic&lt;/h2&gt;


	&lt;p&gt;Ruby makes it easy to create DSLs. It makes it easy to create new testing libraries. That’s a wonderful testament to the language.&lt;/p&gt;


	&lt;p&gt;It doesn’t mean you have all the answers. It doesn’t mean you know better how to write a testing framework. “Tests” and “assertions” are fine. They have the added benefit of being a standard, and familiar for programmers coming from other languages.&lt;/p&gt;


	&lt;p&gt;Jeremy McNally’s new &lt;a href="http://github.com/jeremymcanally/context"&gt;context&lt;/a&gt; library is tiny, yet it is trying to be &lt;span class="caps"&gt;API&lt;/span&gt;-compatible with RSpec, shoulda, etc. This blows my mind. I’ve talked to Jeremy and I think he’s a great guy but I don’t understand this as a design goal at all. While it tries to avoid the eval macros, it’s making the same mistakes previously discussed regarding contexts. Hell, it’s &lt;strong&gt;called context&lt;/strong&gt;, which we should consider a test code smell.&lt;/p&gt;


	&lt;p&gt;All this energy on creating new DSLs for testing is energy wasted. Use the standard and get cracking on solving truly innovative problems (note: the smart grid is innovative; social networks are not).&lt;/p&gt;


	&lt;p&gt;Learn from our collective experience in the Rails community with &lt;span class="caps"&gt;REST&lt;/span&gt;: forget about coming up with great names for your controller actions. The interface for testing is well-defined in the xUnit family. Use the standard and focus on your real problems. We’re all spinning our wheels with these new testing syntaxes.&lt;/p&gt;


	&lt;h2&gt;Rails shows excellent judgment once again&lt;/h2&gt;


	&lt;p&gt;Okay, I’ll concede that there’s one problem with Test::Unit: snake_case:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;test_GET_to_index_finds_all_users_ordered&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;That kind of blows. Rails core apparently agrees: check out &lt;a href="http://github.com/rails/rails/tree/master/activesupport/lib/active_support/test_case.rb"&gt;ActiveSupport::TestCase.test&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;For non-Rails projects, this can be simply:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;8&lt;tt&gt;
&lt;/tt&gt;9&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;11&lt;tt&gt;
&lt;/tt&gt;12&lt;tt&gt;
&lt;/tt&gt;13&lt;tt&gt;
&lt;/tt&gt;14&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;16&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="r"&gt;class&lt;/span&gt; &lt;span class="cl"&gt;Test::Unit::TestCase&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;def&lt;/span&gt; &lt;span class="pc"&gt;self&lt;/span&gt;.test(name, &amp;amp;block)&lt;tt&gt;
&lt;/tt&gt;    test_name = &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;test_&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;name.gsub(&lt;span class="rx"&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;span class="ch"&gt;\s&lt;/span&gt;&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;/&lt;/span&gt;&lt;/span&gt;,&lt;span class="s"&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.to_sym&lt;tt&gt;
&lt;/tt&gt;    defined = instance_method(test_name) &lt;span class="r"&gt;rescue&lt;/span&gt; &lt;span class="pc"&gt;false&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    raise &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;test_name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt; is already defined in &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;&lt;span class="pc"&gt;self&lt;/span&gt;&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;if&lt;/span&gt; defined&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;if&lt;/span&gt; block_given?&lt;tt&gt;
&lt;/tt&gt;      define_method(test_name, &amp;amp;block)&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;else&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      define_method(test_name) &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;        flunk &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;No implementation provided for &lt;/span&gt;&lt;span class="il"&gt;&lt;span class="dl"&gt;#{&lt;/span&gt;name&lt;span class="dl"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;      &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;    &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;span class="r"&gt;end&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  &lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;Now our tests look like this:&lt;/p&gt;


&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td title="click to toggle" class="line_numbers"&gt;&lt;pre&gt;1&lt;tt&gt;
&lt;/tt&gt;2&lt;tt&gt;
&lt;/tt&gt;3&lt;tt&gt;
&lt;/tt&gt;4&lt;tt&gt;
&lt;/tt&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;tt&gt;
&lt;/tt&gt;6&lt;tt&gt;
&lt;/tt&gt;7&lt;tt&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;test &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;separate_invalids! creates invalid file for each model&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="r"&gt;do&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  nurse = &lt;span class="co"&gt;Nurse&lt;/span&gt;.new&lt;tt&gt;
&lt;/tt&gt;  nurse.separate_invalids!&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;Job&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobReport&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;  assert_create_invalid_file_for &lt;span class="s"&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;JobView&lt;/span&gt;&lt;span class="dl"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;tt&gt;
&lt;/tt&gt;&lt;span class="r"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


	&lt;p&gt;If you like that style (I think I do), Rails now gives this to you “for free.” &lt;strong&gt;Use the framework, use the standard.&lt;/strong&gt;&lt;/p&gt;


	&lt;h2&gt;Acceptance Test Driven Planning is still a baby&lt;/h2&gt;


	&lt;p&gt;RSpec’s &lt;a href="http://github.com/aslakhellesoy/cucumber"&gt;Cucumber&lt;/a&gt; has the alpha geeks excited. I’ve never used it so I won’t say too much about it except that I’m skeptical. I think any of us would be happy to add anything to our software toolboxes that help us deliver high quality apps faster. I don’t see Acceptance Test Driven Planning adding much value, however, at the expense of more overhead.&lt;/p&gt;


	&lt;p&gt;I’d love to hear “success stories” in the comments, though.&lt;/p&gt;
          </content>  <feedburner:origLink>http://giantrobots.thoughtbot.com/2008/11/7/a-critical-look-at-the-current-state-of-ruby-testing</feedburner:origLink></entry>
</feed>
