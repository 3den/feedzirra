<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" xml:lang="en-US">
  <title>ChadFowler.com - Home</title>
  <id>tag:www.chadfowler.com,2008:mephisto/</id>
  <generator uri="http://mephistoblog.com" version="0.7.3">Mephisto Noh-Varr</generator>
  
  <link href="http://www.chadfowler.com/" rel="alternate" type="text/html" />
  <updated>2008-12-30T16:54:43Z</updated>
  <link rel="self" href="http://feeds.feedburner.com/Chadfowlercom" type="application/atom+xml" /><feedburner:browserFriendly>This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.</feedburner:browserFriendly><entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-30:20320</id>
    <published>2008-12-30T16:47:00Z</published>
    <updated>2008-12-30T16:54:43Z</updated>
    <category term="Rails" />
    <category term="Ruby" />
    <category term="Training" />
    <link href="http://www.chadfowler.com/2008/12/30/rails-studio-in-january" rel="alternate" type="text/html" />
    <title>Rails Studio in January</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://clarkware.com"&gt;Mike&lt;/a&gt; just reminded me that the Early Bird discount is soon to expire for our January &lt;a href="http://pragmaticstudio.com/rails/"&gt;Rails Studio&lt;/a&gt; in Denver. If you’ve been thinking about attending a Rails Studio and work for a big company, here’s a tip I learned the hard way: corporations usually budget for training and then when it’s time to “save some dollars” in later quarters, they cut the training budget first. In my big corporate days, that bit me more than once, stopping me from going to conferences (OOPSLA) and training (XP Immersion, which I later eventually made it to).&lt;/p&gt;


	&lt;p&gt;So if you’re interested in doing &lt;em&gt;any&lt;/em&gt; training this year, I’d recommend that you do it in the first quarter before the budget is pulled out from under you. Unless you work for an enlightened company with a healthy revenue stream.&lt;/p&gt;


	&lt;p&gt;The Rails Studio has the added advantage (for me) of being held at a beautiful, resort-like hotel with a bunch of really nice fitness facilities and excellent food. Last time we taught there, I was actually sad to go back to our full service gym at home.&lt;/p&gt;


	&lt;p&gt;If you’re coming and either into getting in shape or music, let me know. Maybe we can arrange some after-hours activities.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-17:20282</id>
    <published>2008-12-17T16:18:00Z</published>
    <updated>2008-12-17T16:20:08Z</updated>
    <category term="Life" />
    <category term="Software Development" />
    <link href="http://www.chadfowler.com/2008/12/17/go-ahead-and-complain" rel="alternate" type="text/html" />
    <title>Go Ahead and Complain</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://twitter.com"&gt;Twitter&lt;/a&gt; is an excellent service for allowing people to vent. I’d guess a large percentage of the messages that pump through the site are complaints about something (technology, airlines, restaurants, etc.). I know I’ve posted my share of complaints.&lt;/p&gt;


	&lt;p&gt;A couple of days ago, &lt;a href="http://ozmm.org/"&gt;Chris Wanstrath&lt;/a&gt; linked to &lt;a href="http://twitter.com/defunkt/status/112575642"&gt;one of his Twitter complaints&lt;/a&gt; from a year and a half ago:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;failed at setting up a public git repo with working push. giving up for tonight, working on something else.&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;This was probably the first seed that led to the birth of the extremely popular &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;I’m hoping to remember this every time I type in a whiny tweet about something I have the power to fix. Complaining and being critical is great as long as you’re willing to do something about the problem when you can. And, maybe if it’s annoying enough for you to type it into Twitter to share with your followers, it’s annoying enough that a solution could be your next big thing.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-16:20259</id>
    <published>2008-12-16T15:50:00Z</published>
    <updated>2008-12-16T18:09:39Z</updated>
    <category term="Software Development" />
    <link href="http://www.chadfowler.com/2008/12/16/coding-in-sonata-allegro-form" rel="alternate" type="text/html" />
    <title>Coding in Sonata Allegro Form</title>
<content type="html">
            &lt;p&gt;I used to think I would end up as a composer of &lt;a href="http://everything2.com/e2node/20th%2520Century%2520Classical%2520Music"&gt;classical music&lt;/a&gt;. I studied with one of my favorite composers, &lt;a href="http://kamranince.com"&gt;Kamran Ince&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;The process of composing music is very similar to the process of writing software. In fact, my brain has trouble distinguishing between the two disciplines sometimes.  One thing that’s very similar between the two is that they are both abstract and in both cases you start with a blank page (though the “page” for software is typically in an editor on your computer screen).&lt;/p&gt;


	&lt;p&gt;More than once in my careers (music and software), this has led me to a dilemma: I get stuck because I’m overwhelmed by the limitless possibilities.&lt;/p&gt;


	&lt;p&gt;This happened to me once as a composer. I was experiencing a sort of writer’s block. So Kamran suggested something bizarre: write a short piece in &lt;a href="http://en.wikipedia.org/wiki/Sonata_form"&gt;Sonata Allegro form&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;While Sonata Allegro form is an often-used structure for compositions, there aren’t many living composers who use it. It’s old fashioned. So writing New Music in this form is a strange proposition.  Kamran framed it as a one-week exercise to stop the writer’s block, and I figured writing &lt;em&gt;something&lt;/em&gt; would be better than writing nothing, so I went with it.&lt;/p&gt;


	&lt;p&gt;What flowed from there was a  25 minute piece for violin, cello, clarinet, and piano (the same instrumentation as Messiaen’s &lt;a href="http://www-rcf.usc.edu/~echew/performances/messiaen-qtet.html"&gt;Quartet for the End of Time&lt;/a&gt;, which was also an inspiration for the piece) in five movements. As a young composer, this was pretty epic. It was by far the best and most inspired piece of music I had written to date. The whole thing wasn’t in Sonata Allegro, of course. Just one movement (actually just the beginning of the movement). But the constraint had seeded my creativity (how to make it interesting while working in an outdated framework) and had, best of all, removed any &lt;em&gt;fear&lt;/em&gt; I had about starting.&lt;/p&gt;


	&lt;p&gt;I’ve done similar things with software since then. It works just as well.&lt;/p&gt;


	&lt;p&gt;I was reminded of this today while chatting with Alan Francis, when he mentioned writing Java code with the rule that you can use &lt;a href="http://cardboardsoftware.com/2007/5/27/redefining-simple.html"&gt;no braces&lt;/a&gt; except where Java forces you to for class and method definitions.&lt;/p&gt;


	&lt;p&gt;The interesting thing here is that not only does this constraint help to solve the “too abstract” problem but it (arguably) leads to interesting (and maybe better) design choices.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-12:20149</id>
    <published>2008-12-12T18:45:00Z</published>
    <updated>2008-12-13T02:34:29Z</updated>
    <category term="Life" />
    <link href="http://www.chadfowler.com/2008/12/12/twenty-more-days-in-2008" rel="alternate" type="text/html" />
    <title>Twenty More Days in 2008</title>
<content type="html">
            &lt;p&gt;As I &lt;a href="http://chadfowler.com/2008/12/4/develop-a-good-habit-in-20-days"&gt;said recently&lt;/a&gt;, 20 days is the right length for me to develop beneficial habits.  It just so happens that, counting today, there are 20 days left in 2008.&lt;/p&gt;


	&lt;p&gt;So what should we do? I’m thinking about trying to write fiction every day for the rest of the year. Or practice the saxophone.  Or write short pieces of “classical” music.  I’m not sure yet, but I have the rest of the day to decide and put the plan into action.&lt;/p&gt;


	&lt;p&gt;My friend &lt;a href="http://metaatem.net/"&gt;Erik Kastner&lt;/a&gt;  showed me recently that Steve Pavlina posted something &lt;a href="http://www.stevepavlina.com/blog/2005/04/30-days-to-success/"&gt;similar&lt;/a&gt; a few years ago. At the bottom of the article he includes a bunch of ideas of things you could try to do for 30 days. So if you’re interested but don’t know what you want to do yet, have a look at his suggestions. They might trigger an inspiration.&lt;/p&gt;


	&lt;p&gt;Good luck!&lt;/p&gt;


	&lt;p&gt;Update: I chose fiction writing. Time will tell.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-04:19988</id>
    <published>2008-12-04T21:59:00Z</published>
    <updated>2008-12-04T21:59:37Z</updated>
    <link href="http://www.chadfowler.com/2008/12/4/your-customers-aren-t-idiots" rel="alternate" type="text/html" />
    <title>Your Customers Aren't Idiots</title>
<content type="html">
            &lt;p&gt;I was in a customer conference call with &lt;a href="http://boboroshi.com/"&gt;John Athayde&lt;/a&gt; recently, and he did something really smart. He was talking about his in-progress design for the customer’s product and he wanted to explain that we would have reusable snippets of the design which would allow us to consistently provide the same view of an important part of the system whenever it would show up. This being a Rails project, we would do this using ERb partials.&lt;/p&gt;


	&lt;p&gt;So, John said, “We will extract this out into little snippets that I’ll call…partials”.  And so on.&lt;/p&gt;


	&lt;p&gt;He could have made up a metaphor and used a new customer-friendly term for this.  Or he could have explained that we’re using Rails, and Rails supports this thing called “partials” which is…blah blah blah. But the former requires us to learn a dumb new word just for this project, and the latter is too much information. The term “partial” is a pretty good one to describe what it does. In fact, in most well-designed systems, the terms the &lt;em&gt;system&lt;/em&gt; uses to describe concepts are pretty good.  Pretty easy to understand.&lt;/p&gt;


	&lt;p&gt;For some reason we developers feel compelled to hide these terms and concepts from our customers as if they’re children that can’t be trusted with sharp tools. They’re not idiots. They just know different things than we do. Imagine if they tried to hide &lt;em&gt;their&lt;/em&gt; terms and concepts from you because they assumed you were unable to understand them.&lt;/p&gt;


	&lt;p&gt;I saw &lt;a href="http://martinfowler.com"&gt;Martin Fowler&lt;/a&gt; speak at an XP users’ meeting several years ago, and when he got to the practice called “system metaphor”, he said he didn’t really do that practice so much anymore because (paraphrased from iffy memory), “Sometimes the best metaphor for a system is the system itself”. Note to self: keep that in mind more often.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-04:19960</id>
    <published>2008-12-04T04:45:00Z</published>
    <updated>2008-12-04T14:45:44Z</updated>
    <category term="Life" />
    <link href="http://www.chadfowler.com/2008/12/4/develop-a-good-habit-in-20-days" rel="alternate" type="text/html" />
    <title>Develop a Good Habit in 20 Days </title>
<content type="html">
            &lt;p&gt;This is nothing revolutionary, but the number 20 has held special significance for me since I was a young teenager.  I learned that if I started something and was still doing it 20 days later, it &lt;em&gt;stuck&lt;/em&gt;.&lt;/p&gt;


	&lt;p&gt;Since good habits seemed to stick after 20 days, I started to set 20 days as a goal whenever I wanted to get into the habit of doing a good, responsible thing.  Turns out, it works.&lt;/p&gt;


	&lt;p&gt;I think there are two reasons it works. The obvious is that, for me, 20 days is the right amount of time to internalize behavior or get used to a new feeling, thing, taste, activity or what-not.  The less obvious but more important reason is that 20 days is short. It’s easy to commit to doing something for 20 days. It’s hard to commit to doing something forever. So, because I have this short duration which I believe to be like a magic spell, I’m able to convince myself to actually &lt;em&gt;try&lt;/em&gt; to do something hard.  Even if something sucks, I can do it for 20 days.&lt;/p&gt;


	&lt;p&gt;The number 20 probably won’t work for everyone, but I highly recommend trying it out and fine tuning the duration. Want to eat better?  Exercise? Learn Japanese? Practice a musical instrument more responsibly? Try to do it &lt;em&gt;well&lt;/em&gt; for 20 days. That’s it. Don’t worry about whether it’s going to stick. Just promise yourself the 20 days.&lt;/p&gt;


	&lt;p&gt;Even if the magic spell doesn’t work for you, the worst case is that you do something good for you for 20 days.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-02:19873</id>
    <published>2008-12-02T23:44:00Z</published>
    <updated>2008-12-02T23:57:08Z</updated>
    <category term="Software Development" />
    <link href="http://www.chadfowler.com/2008/12/2/the-awkward-structure-of-a-jazz-band-set" rel="alternate" type="text/html" />
    <title>The Awkward Structure of a Jazz Band Set</title>
<content type="html">
            &lt;p&gt;Kelly and I went to &lt;a href="http://www.afterthoughtbar.com/"&gt;The Afterthought&lt;/a&gt; in Little Rock last night for the Monday night jazz show.  They’ve been running Monday night jazz at The Afterthought for 14 years now.  Before that it was at a place called The Oyster Bar (that was when I lived in Little Rock and briefly played jazz music here).&lt;/p&gt;


	&lt;p&gt;The same people were there that were there last time.  They had more gray in their hair, but it was a familiar scene.&lt;/p&gt;


	&lt;p&gt;The striking familiarity wasn’t the people, though.  It was the structure of the event.  I never noticed it before (maybe a case of not seeing the forest for the trees), but jazz gigs typically follow a common structure and share a set of common traits:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;It was scheduled to start at 8. Nobody was there at 8.  It started at 8:30.&lt;/li&gt;
		&lt;li&gt;The band had obviously rehearsed 0 times for the gig. They didn’t know what songs they were going to play until right before each song started. Improvisation to the max.&lt;/li&gt;
		&lt;li&gt;Without rehearsal or a set list, they picked songs that everyone knew. This means they picked the same songs we’ve all played a million times.&lt;/li&gt;
		&lt;li&gt;They started with a bossa nova. They followed that with a waltz. Then (as I felt the same internal strife they apparently did) I heard the band leader say to the drummer, “I’m not sure what we should play next, but it should be a swing tune. We’ve already done a bossa and a waltz.”  Jazz people have an unwritten rule that you have to play a blues, something with a beat, a waltz, a ballad, and a swing tune in a set. It’s as if the set is not properly balanced otherwise and the jazz police will arrest them for producing an unbalanced set.&lt;/li&gt;
		&lt;li&gt;They had someone sit in and played a song nobody else knew, so they all got the fakebooks out and read along.&lt;/li&gt;
		&lt;li&gt;In every song, every band member played a solo in the same order.  In every song at the end of the solos, the saxophone played “traded fours” with the drummer.  Trading fours is when an instrumentalist improvises for four measures and then the band drops out for the drummer to improvise for four measures, until they get once or twice through the form of the tune. I can count the number of instances of trading fours I’ve enjoyed as a listener on the fingers of one hand.&lt;/li&gt;
		&lt;li&gt;After the “last song” before the break, they played the standard set break tune, which is a song originally done by Miles Davis that sounds like the closing tag of a circus show. I can’t remember the name of it, and they probably can’t either. It’s meant to be transitional music over which the band says “thank you and we’ll be right back” but it usually lasts 5 minutes or more. It lasted 5 minutes or more.&lt;/li&gt;
		&lt;li&gt;The entire band ran immediately outside to smoke.&lt;/li&gt;
		&lt;li&gt;We left, but they probably took a break that lasted nearly as long as they had played.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;That’s a whole lot of ritual. And the funny thing is that I bet none of the band members enjoy most of it and I know the audience doesn’t care about any of it. The whole routine is constrained by a set of rules that aren’t done in the name of either the customer (audience) or the supplier (musician). They’re done for no one.&lt;/p&gt;


	&lt;p&gt;I have done all of these things countless times and I have not ever enjoyed the constraints. It’s only now that I’ve been away from it that I realize the constraints even exist.&lt;/p&gt;


	&lt;p&gt;I wonder what sort of things I do now that hindsight will reveal to be pointless ritual.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-12-01:19803</id>
    <published>2008-12-01T22:34:00Z</published>
    <updated>2008-12-01T22:35:33Z</updated>
    <category term="Software Development" />
    <link href="http://www.chadfowler.com/2008/12/1/who-are-your-influences" rel="alternate" type="text/html" />
    <title>Who Are Your Influences?</title>
<content type="html">
            &lt;p&gt;I’ve recently been revisiting my musical roots.  I recently visited the home of my dormant music career (Memphis, TN) and spent time former band-mates and collaborators.  I’ve been also been dipping back into the jazz and classical composition worlds, learning who’s new on the scene and rediscovering old favorites.&lt;/p&gt;


	&lt;p&gt;Something has stood out as I’ve been browsing through online material connecting the dots again.  It’s a part of the culture I took for granted as a musician but which now feels sort of foreign. Musicians often talk about each other (and even themselves) in terms of their influences.&lt;/p&gt;


	&lt;p&gt;An &lt;a href="http://www.musicianguide.com/biographies/1608003182/Eric-Dolphy.html"&gt;example&lt;/a&gt;:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;Among Dolphy's early influences were Charlie Parker and the sounds of nature.&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;It’s also common to talk about who &lt;em&gt;taught&lt;/em&gt; you as a musician.  Here’s a snippet from my &lt;a href="http://www.parkerandersonjazz.com/parker/"&gt;college roommate/bandmate’s bio&lt;/a&gt;:&lt;/p&gt;


&lt;pre&gt;
Chris Parker was born in North Little Rock, Arkansas. He first learned from local Arkansas musicians, most notably:   
Charles Thomas, Art Porter, Sr., Bob Steele, Lee Tomboulian, and Michael Bates. Chris moved to Memphis, TN in 1991. 
There he received his BA degree from the University of Memphis and learned from/ studied with musicians including Gene
 Rush, James Williams, Herman Green, Fred Ford, Calvin Newborn, Bill Mobley, Alvin Fielder, Kidd Jordan, Joe Jennings, and 
Vernel Fournier.
&lt;/pre&gt;

	&lt;p&gt;This creates a strong emphasis on creating a &lt;em&gt;tradition&lt;/em&gt; which is carried forward and evolve generationally.  Jazz is a fairly new genre but here’s an example “family tree” of jazz: Lester Young &lt;a href="http://www.allaboutjazz.com/php/musician_timeline.php?id=11573"&gt;was influenced early on by Frankie Trambauer&lt;/a&gt;.  Dexter Gordon was heavily &lt;a href="http://en.wikipedia.org/wiki/Dexter_Gordon"&gt;influenced by Lester Young&lt;/a&gt;.  Dexter Gordon was in turn the biggest influence on a young &lt;a href="http://www.jazzreview.com/articledetails.cfm?ID=2166"&gt;Virginia Mayhew&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;So we have Frankie -&amp;gt; Lester -&amp;gt; Dexter -&amp;gt; Virginia -&amp;gt; ???&lt;/p&gt;


	&lt;p&gt;This visible passing on of tradition not only conveys a pride in the craft, but it gives listeners an understanding of what to expect when approaching a new artist. Not a completely road map but at least some clues.&lt;/p&gt;


	&lt;p&gt;In &lt;a href="http://www.pragprog.com/titles/mjwti/my-job-went-to-india"&gt;My Job Went to India&lt;/a&gt; I wrote about standing on the shoulders of giants in our industry. Musicians make explicit which giants they’re standing on the shoulders of. It strikes me as a bit of a shame that we don’t do that as programmers.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-11-18:19467</id>
    <published>2008-11-18T04:51:00Z</published>
    <updated>2008-11-18T05:00:19Z</updated>
    <category term="Conferences" />
    <category term="Rails" />
    <link href="http://www.chadfowler.com/2008/11/18/scotland-on-rails-call-for-proposals" rel="alternate" type="text/html" />
    <title>Scotland on Rails Call for Proposals</title>
<content type="html">
            &lt;p&gt;Being an organizers of Ruby conferences myself, I always enjoy going to the regional conferences.  I’ve been to the &lt;a href="http://mtnwestrubyconf.org/"&gt;Mountain West RubyConf&lt;/a&gt;, &lt;a href="http://www.rubyhoedown.com/"&gt;Ruby Hoedown&lt;/a&gt; and &lt;a href="http://site.locaweb.com.br/railssummit/default.asp?language=7"&gt;Rails Summit Latin America&lt;/a&gt;.  Each was excellent in its own unique way. It’s also a great pleasure for me to attend a conference I’m not organizing.&lt;/p&gt;


	&lt;p&gt;So I’m looking forward to the upcoming &lt;a href="http://scotlandonrails.com/"&gt;Scotland on Rails&lt;/a&gt; in March.  &lt;a href="http://marcelmolina.com"&gt;Marcel&lt;/a&gt; and I will be presenting a tutorial for charity at this year’s conference.&lt;/p&gt;


	&lt;p&gt;I’ve heard great things about last year’s Scotland on Rails, and I trust my friends in Scotland to put on an excellent show.  If you haven’t been to Edinburgh, you owe yourself a trip.  It’s an incredibly beautiful city.&lt;/p&gt;


	&lt;p&gt;What better way to explore new lands than to do it by invitation as a speaker?  Scotland on Rails has opened its &lt;a href="http://scotlandonrails.com/proposals.html"&gt;Call for Proposals&lt;/a&gt; (it’s been open for a while, but I’m slow).  The &lt;span class="caps"&gt;CFP&lt;/span&gt; closes in 2 weeks (December 1st), so if you’re interested in speaking don’t be late.  From what &lt;a href="http://www.cardboardsoftware.com/"&gt;Alan&lt;/a&gt; tells me, they are especially interested in hearing how to do &lt;span class="caps"&gt;BIG&lt;/span&gt; projects with Ruby and Rails.&lt;/p&gt;


	&lt;p&gt;Hope to see you there.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-10-21:19350</id>
    <published>2008-10-21T15:13:00Z</published>
    <updated>2008-10-21T15:18:16Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/10/21/rubyconf-speaker-interview-ben-bleything" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Ben Bleything</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt; is only a little over 2 weeks away. Time flies!&lt;/p&gt;


	&lt;p&gt;I’ve been doing a &lt;a href="http://chadfowler.com/rubyconf-speaker-interviews"&gt;series of interviews with speakers&lt;/a&gt; leading up to the conference.&lt;/p&gt;


	&lt;p&gt;This time is &lt;a href="http://blog.bleything.net/"&gt;Ben Bleything&lt;/a&gt;.  Ben is going to be speaking at RubyConf about &lt;a href="http://rubyconf.org/talks/83"&gt;Ruby and Music&lt;/a&gt;&lt;/p&gt;


	&lt;h2&gt;What are you currently doing with Ruby and music?&lt;/h2&gt;


	&lt;p&gt;This is going to be a recurring theme, so I’ll get it out of the way
here.  I think of myself more as a toolsmith than an actual creator.
I’m not doing anything with Ruby and music per se… I’m trying to
create tools for other people to use.&lt;/p&gt;


	&lt;p&gt;My creativity manifests in such a way that I’m actually pretty bad at
creating “art”.  I’m a semi-failed musician, and I don’t have any
illusions about programming being the path to making sweet, sweet music.
I just think it’s an interesting problem to solve.&lt;/p&gt;


	&lt;p&gt;I have this vision of showing up at RubyConf in 2010 and having people
using the stuff that Giles and Yossef and myself and others create to
make some rad music.&lt;/p&gt;


	&lt;h2&gt;You spoke about Ruby and electronics last year.  How did you get into electronics?  What got you excited about it?&lt;/h2&gt;


	&lt;p&gt;I’ve been into electronics since I was 12 or 13.  I was the kid who
always took stuff apart.  I started frequenting my neighborhood Radio
Shack around 14, building little lighty-uppy things and noisemakers and
the like.  I grew bored of that pretty quickly, but I got back into it
after college around the time that the Arduino came out.&lt;/p&gt;


	&lt;p&gt;One of the things that draws me to programming in general is the feeling
of empowerment.  It’s really cool to be able to make a computer do
your nefarious bidding.  Now apply that feeling to a physical device
and you’re talking about a whole different level of that empowerment.&lt;/p&gt;


	&lt;p&gt;I’ve said before that I feel like I was born 40 years too late… that I
should have been hacking in the ‘60s.  Programming for microcontrollers
is, in a lot of ways, as close as I can get to that.  Starting with bare
metal and building an application, even if it’s as simple as blinking a
light (the hello world of electronics) is deeply satisfying.&lt;/p&gt;


	&lt;h2&gt;Being into electronics, have you ever tried to build your own electronic instrument or have the computer play a real instrument with motors?&lt;/h2&gt;


	&lt;p&gt;Not yet, no.  Both are interesting ideas but getting close to requiring
actual musical knowledge, and that’s where I start to get scared :)&lt;/p&gt;


	&lt;p&gt;I am playing around with hooking up video game instruments (think Rock
Band and Guitar Hero) to a computer.  This sounds pretty mundane, and I
guess that it is… but the trick is that I’ll be passing those through
Ruby in order to provide the instruments with a bit more intelligence.&lt;/p&gt;


	&lt;p&gt;I guess the bottom line is that I’m much more interested in building
systems (hardware or software) that more experienced musicians can use
as tools… which brings us back to the toolsmith point above.&lt;/p&gt;


	&lt;h2&gt;Can computers generate beautiful music?  Dance beats seem easy. What about jazz improvisations?  Classical music?  Pop songs?&lt;/h2&gt;


	&lt;p&gt;I’m sure that a computer &lt;strong&gt;can&lt;/strong&gt; generate beautiful music, but I think it
would be mostly coincidental.  I’m still undecided on whether you can
program a computer to &lt;strong&gt;always&lt;/strong&gt; generate beautiful music.  It surely
happens by chance sometimes, though.&lt;/p&gt;


	&lt;p&gt;I suspect that there’s interesting results waiting down the path of
doing things like markov chaining with music instead of text.  Analyzing
and chaining music is a significantly more complex problem than doing it
with words, but my gut says with the right corpus, you could get some
pretty interesting stuff.&lt;/p&gt;


	&lt;p&gt;Fundamentally, though, I think music has to have soul to be truly great.
I want everyone to try to prove me wrong, though!&lt;/p&gt;


	&lt;h2&gt;Ruby, electronics, and music is a lot of ground to cover.  Are you passionate and excited about anything else in particular outside of these?&lt;/h2&gt;


	&lt;p&gt;I’m passionate and excited about everything that catches my interest,
honestly.  I’ve just chosen not to focus any energy on anything else
right now.  I want to find ways to share my experience with others… to
get people excited about doing the things they thought were too hard.&lt;/p&gt;


	&lt;p&gt;My electronics presentation last year is a prime example of that.  This
stuff isn’t difficult, it’s just intimidating.  If I can lower the
barrier to entry, either by educating or providing tools, then I feel
like I’ve done my job.  I’m really hoping that my talk this year will do
the same for the people interested in music.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-10-01:19170</id>
    <published>2008-10-01T04:59:00Z</published>
    <updated>2008-10-01T05:01:28Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/10/1/rubyconf-speaker-interview-glenn-vanderburg" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Glenn Vanderburg</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt; is coming soon!  We’re sold out but you can still get on the waiting list.&lt;/p&gt;


	&lt;p&gt;I’ve been doing a &lt;a href="http://chadfowler.com/rubyconf-speaker-interviews"&gt;series of interviews with speakers&lt;/a&gt; leading up to the conference.&lt;/p&gt;


	&lt;p&gt;This time is &lt;a href="http://vanderburg.org/"&gt;Glenn Vanderburg&lt;/a&gt;.  Glenn is a long time Rubyist and dynamic languages fan. He’s also Chief Scientist  at &lt;a href="http://thinkrelevance.com/"&gt;Relevance&lt;/a&gt;.&lt;/p&gt;


	&lt;h2&gt;There was a time when Java was cool and new like Ruby is now. I remember drawing criticism for thinking it was “ready for the Enterprise”.  You wrote one of the first books about Java. How does the current state of affairs with Ruby and dynamic language adoption differ from what was happening with Java back then?&lt;/h2&gt;


	&lt;p&gt;The objections to Ruby seem a bit more mature than the objections to Java were.  I remember a lot of misunderstanding about Java being “interpreted”, and about GC being “inherently slow”.  I also remember people who were outraged that they couldn’t turn the safety features off, like array bounds checking.  Those are all rather ridiculous arguments, but many people clung to them for years.&lt;/p&gt;


	&lt;p&gt;I’m pleased that almost nobody objects to Ruby being open-source.  It’s also great that so many people understand that “fast enough” is fast enough, and that you get a lot more benefit from architectural choices than you do from raw language speed.  Finally, the Ruby language itself is more mature and stable than Java was then, and that helps a lot.&lt;/p&gt;


	&lt;p&gt;Nevertheless, there’s one big problem Ruby has now that Java had in 1997: the language implementation is too simplistic, and there’s a lot of room for improvement.&lt;/p&gt;


	&lt;h2&gt;What would you say are the top 2 or 3 features the Ruby world could steal from existing VMs?&lt;/h2&gt;


	&lt;p&gt;Two of them are already widely understood:  bytecode interpretation (which all the new VM projects use) and top-notch garbage collection.  But the really big win will come from dynamic optimization based on type feedback, including heavy use of method inlining.  JRuby is already getting some of that benefit from the &lt;span class="caps"&gt;JVM&lt;/span&gt;, and I suspect GemStone is using the same techniques to make MagLev fast.&lt;/p&gt;


	&lt;p&gt;Saying “Ruby is slow, but it’s fast enough” is true for a lot of the things we’re doing today, but it’s also a bit of a cop out.  There are definitely tasks for which we’d love to use Ruby, but it isn’t fast enough.  The primary motivation for my talk is to spread knowledge about type feedback into the Ruby community.  It’s always been a little hard to get information about how the &lt;span class="caps"&gt;JVM&lt;/span&gt; and Strongtalk work, and they have a reputation for being extremely complicated black magic.  Many of the details are quite complex, but the basic principles are actually rather simple.  My hope is that a few people with good C and assembly language skills will have their eyes opened to the possibilities and start making contributions to the Ruby VM projects.&lt;/p&gt;


	&lt;h2&gt;What do you think about Google’s new &lt;span class="caps"&gt;V8 VM&lt;/span&gt;?  Do you think there’s much to learn from it? Will we see a serious Ruby implementation on it?&lt;/h2&gt;


	&lt;p&gt;It’s fascinating technology, but (from what I’ve seen so far) not quite as nice a fit for Ruby as I was hoping for.  The v8 team kept a tight focus on exactly what JavaScript needed.  The result is that it will be harder to implement Ruby on it than I hoped, and the benefits will be less than I was expecting.  It’s a great JavaScript VM, though.&lt;/p&gt;


	&lt;p&gt;What’s actually more interesting to me is that 2008 seems to be the year of JavaScript VMs.  SquirrelFish, TraceMonkey, and v8 are all making big advances in JavaScript performance, using different techniques.  And they seem to have begun a competition similar to the WebKit/Opera Acid3 race from earlier this year.  That kind of thing might seem like a sideshow, but it highlights core technical issues that are usually hidden from view, and that kind of competition ends up raising standards across the board.  JavaScript will certainly benefit from this competition, but it won’t stop there.  In the process, previously obscure technical details (not least of which is the fact that a language can be as dynamic as JavaScript and still be fast) will become widely known, and new tricks may be discovered.  Ruby and other dynamic languages will certainly benefit from that.&lt;/p&gt;


	&lt;h2&gt;Do you think any of the in-progress Ruby implementations is poised to be the big one that takes over the Ruby world? Why or why not?&lt;/h2&gt;


	&lt;p&gt;First of all, I don’t think we have to have a “big one that takes over.”  Having multiple VMs with different tradeoffs seems to me to be a tremendous advantage for our community, as long as they all pass the same, thorough spec suite.  JRuby fills a very important niche and does it really well.  There’s some fantastic work in &lt;span class="caps"&gt;YARV&lt;/span&gt;.  I fully expect IronRuby to be a big success among people with an investment in the .NET platform.  And all the signs are that MagLev will be an awesome option for those who need either commercial support, lots of raw speed, and/or a terrific, scalable persistence system.&lt;/p&gt;


	&lt;p&gt;That said, I’m watching Rubinius with great interest.  I was initially skeptical of the project; it seemed so risky to try to build everything from scratch, from the bottom all the way up through the core libraries.  All of the state-of-the-art dynamic language VMs in existence were done by heavily funded large teams of experts.  I’m more optimistic today.  For one thing, Rubinius has more funding than I realized.  Also, I see now that Evan Phoenix has two advantages those earlier teams didn’t have: &lt;span class="caps"&gt;TDD&lt;/span&gt; (which he’s using even on the C++ part of Rubinius) and &lt;span class="caps"&gt;LLVM&lt;/span&gt;, which already has code generation and optimization support for many different machine architectures.&lt;/p&gt;


	&lt;p&gt;Evan likes to say that because most of Rubinius is written in Ruby, making Rubinius acceptably fast will have to be done in the low-level VM mechanisms, which will benefit all Ruby code, not just the core libraries.  That’s exactly what drove the advances we see today in the Self, Java, and various Smalltalk VMs—the core libraries (and in some cases most of the languages themselves) were written in the target language, so the VM became the only avenue for really speeding things up.&lt;/p&gt;


	&lt;p&gt;But there’s a third advantage Rubinius &lt;strong&gt;could&lt;/strong&gt; have, but doesn’t, at least not yet.  Most of the Rubinius contributors are working in the Ruby parts of the system, which is probably where the priority needs to be right now.  But soon, the focus will need to shift to the C++ VM.  I’m hopeful that others will chip in at that level before too long, and if my talk gets some people started on that, I’ll be thrilled.&lt;/p&gt;


	&lt;h2&gt;What are you passionate about outside of computer programming?&lt;/h2&gt;


	&lt;p&gt;The most truthful answer is rather common, and most people won’t find it too interesting: my family and my faith.&lt;/p&gt;


	&lt;p&gt;I’m constantly reading and enjoying music—in both cases, from many genres.  I read a broad mix of science, history, theology, and literature.  My favorite author is John McPhee, because he explores topics that seem dull and mundane on the surface, and reveals the fascination within.  That’s a great match for me, because I’ve learned that &lt;strong&gt;anything&lt;/strong&gt; is interesting once you begin to understand it.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-09-23:19049</id>
    <published>2008-09-23T14:38:00Z</published>
    <updated>2008-09-23T14:38:44Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/9/23/rubyconf-speaker-interview-nathaniel-talbott" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Nathaniel Talbott</title>
<content type="html">
            &lt;p&gt;In preparation for this year’s &lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt;, I’m doing a &lt;a href="http://chadfowler.com/rubyconf-speaker-interviews"&gt;series of interviews&lt;/a&gt; of some of the speakers.&lt;/p&gt;


	&lt;p&gt;Today’s interview is with &lt;a href="http://terralien.com"&gt;Nathaniel Talbott&lt;/a&gt;, creator of Ruby’s built-in Test::Unit framework and long time Rubyist.  At RubyConf, Nathaniel will be presenting &lt;a href="http://rubyconf.org/talks/24"&gt;Fear of Programming&lt;/a&gt;.&lt;/p&gt;


	&lt;h2&gt;You’ve spoken at 7 out of 7 RubyConfs and you’re about to speak at your 8th. I’ve noticed your topics are veering farther and farther away from programming in Ruby. Is this because you’re afraid?&lt;/h2&gt;


	&lt;p&gt;The primary impetus behind my talk this year is my discovery of two things:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;I get lethargic/depressed/unproductive/unhappy when I’m not spending
a significant portion of my time creating.&lt;/li&gt;
		&lt;li&gt;I often don’t create because I’m afraid to start.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;These realizations grew out of my being the “business guy” for
&lt;a href="http://terralien.com/"&gt;Terralien&lt;/a&gt; for going on three years now, and thus not billing myself
out for development work. While doing sales, marketing, project
management, etc., is creating in some sense, I’m still a developer at
heart and to create I need to &lt;strong&gt;code&lt;/strong&gt;. When I don’t, everything in my
life (including all the business stuff) suffers. And the primary
hurdle to writing code has been fear.&lt;/p&gt;


	&lt;p&gt;So to answer your question, yes and no. Yes, a large part of the
reason I’ve trended away from talking about code has been because fear
kept me from writing code to talk about. No for this year, because
I’ve written more Ruby in the past year than I have in a while, and
have more to talk about, but I think talking about the fear is more
important this year.&lt;/p&gt;


	&lt;p&gt;And if one made the assumption there won’t be any code in my talk,
they might be in for a surprise…&lt;/p&gt;


	&lt;h2&gt;At the first Ruby conference, you spoke about Lapidary, which became Test::Unit.  Are you as zealous about testing as you were when you created Lapidary? Why or why not?&lt;/h2&gt;


	&lt;p&gt;This is actually a big part of my talk, so I don’t want to give away
too much. Suffice it to say that my perspective on testing has changed
significantly over the past six years, and a lot of that change has to
do with fighting fear.&lt;/p&gt;


	&lt;h2&gt;How does it feel having your first Ruby project in ruby’s standard library? As one of the creators of RubyGems, I’m no stranger to harsh criticism of my Open Source code. Have you encountered a lot of this?  Is it worth it?&lt;/h2&gt;


	&lt;p&gt;To answer the last question first, it is &lt;strong&gt;very&lt;/strong&gt; worth it. I don’t
think test/unit has drawn the ire that RubyGems has, since a testing
framework doesn’t have quite the entrenchment that a packaging system
does. This has allowed various competitors and add-ons to spring up,
giving would-be critics an outlet for their “I could do it better” 
ideas, and the cool thing is that they often &lt;strong&gt;can&lt;/strong&gt; do it better and we
all benefit.&lt;/p&gt;


	&lt;p&gt;As far as getting test/unit in to the standard library, it was great
for me but mostly bad for test/unit. It’s a big plus to tell potential
clients that you wrote something in the Ruby stdlib, and it does great
things for your Google juice. At the same time, I was already
struggling with motivation and productivity when working on test/unit
at the time, and what I discovered is that getting a library in the
stdlib is a huge demotivator for working on it, at least for me. It
becomes &lt;strong&gt;much&lt;/strong&gt; easier to stick with the status quo than to change it.&lt;/p&gt;


	&lt;p&gt;So if getting “standardized” was good for me and bad for test/unit,
how was it for the Ruby community? I think in general it was a good
thing. We needed a testing library in the stdlib, and test/unit might
not be brilliant but it is solid and fairly simple. Having it there
really helped the testing culture in Ruby, and that continues through
today. I like to think that Ruby shipping with testing built-in
influenced David to ship Rails with testing built-in, and I think
that’s fantastic.&lt;/p&gt;


	&lt;h2&gt; How can I be more productive? I would love to be one of these people who churns out useful libraries once every few weeks and keeps them maintained.&lt;/h2&gt;


	&lt;p&gt;I’ll have lots to say about this in my talk, but for now I’ll give two
conflicting points of advice: first, you have to &lt;em&gt;defocus&lt;/em&gt;. There’s a
real tendency to get tunnel vision about the things we “need” and to
stop playing with the things we &lt;strong&gt;want&lt;/strong&gt;. Stop worrying about useful and
instead explore fun and interesting.&lt;/p&gt;


	&lt;p&gt;The second piece of advice is to &lt;em&gt;focus&lt;/em&gt;. There are so many projects
and activities that we can spend time on, we have to choose. Review
your list of projects: are they all things you’re excited about
working on and that you’re one of the best people to work on? I handed
off maintainer-ship of test/unit for exactly this reason: it was
distracting me from other things I was more passionate about.&lt;/p&gt;


	&lt;p&gt;Confused and intrigued? Great, now you’re motivated to come listen to
&lt;a href="http://rubyconf.org/talks/24"&gt;Fear of Programming&lt;/a&gt; at &lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt;!&lt;/p&gt;


	&lt;h2&gt;What are you passionate about outside of computer programming?&lt;/h2&gt;


	&lt;p&gt;Well, I have four amazing kids (ages 5, 3, 2 and 1) who I love
watching grow and learn. We’ll be homeschooling all of them when the
times comes, so I have lots of years of learning with them to look
forward to. I’m also really passionate about entrepreneurship, and
have a few things cooking in that sphere, not the least of which is
&lt;a href="http://spreedly.com"&gt;http://spreedly.com&lt;/a&gt;. I also enjoy studying the Bible, and enjoy
teaching at our church every few months. So, life is pretty busy, but
I’m loving every minute of it!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-09-18:18977</id>
    <published>2008-09-18T22:30:00Z</published>
    <updated>2008-09-18T22:31:53Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/9/18/rubyconf-speaker-interview-micah-martin" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Micah Martin</title>
<content type="html">
            &lt;p&gt;In preparation for this year’s &lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt;, I’m doing a &lt;a href="http://chadfowler.com/rubyconf-speaker-interviews"&gt;series of interviews&lt;/a&gt; of some of the speakers.&lt;/p&gt;


	&lt;p&gt;Today’s interview is with author, speaker, and software craftsman, &lt;a href="http://8thlight.com"&gt;Micah Martin of 8th Light&lt;/a&gt; and formerly of &lt;a href="http://www.objectmentor.com"&gt;Object Mentor&lt;/a&gt;.  At RubyConf, Micah will be presenting &lt;a href="http://rubyconf.org/talks/32"&gt;Ruby Kata and Sparring&lt;/a&gt;.&lt;/p&gt;


	&lt;h2&gt;You’re speaking about exercises to improve your coding skills.  From what I know about the ideas you will present, they are very tactical and performance-oriented in nature.  We don’t usually think of programming as a performance activity. Is it?&lt;/h2&gt;


	&lt;p&gt;Sure it is.  When a novelist writes a novel, or a poet writes a poem, aren’t they performing?  Their work, their words, have to entertain.  They have to communicate ideas, and inspire their audience of readers.  When we write code, we have two audiences; the computer and our peers.  The computer is not a very demanding audience.  But our fellow programmers, they can be very harsh critics.  The code we write, if it’s good, will easily communicate ideas to our peers.  It will inspire understanding of our intent.  And if it’s really good, it will entertain.&lt;/p&gt;


	&lt;h2&gt;Dave Thomas did a series of “code kata” many years ago. Is the kata portion of your talk a continuation of those same ideas?&lt;/h2&gt;


	&lt;p&gt;Yeah, for the most part.  Unclebob did some as well.  It’s a great idea that hasn’t seemed to gain much traction.  It’s lack of popularity is understandable.  A skeptic might describe code kata as “writing useless code by yourself in your free time”.  Sounds fun eh?&lt;/p&gt;


	&lt;p&gt;It’s the same in martial arts.  For the lower belt ranks, kata is rarely the activity of choice.  Most students would rather kick bags, break boards, and spar with other students.  Fortunately in martial arts, instructors influence students to practice kata over and over.  With time and experience, students learn to appreciate kata.  And once they catch the bug, you’ll find martial artists practicing kata outside of class whenever they get the chance.&lt;/p&gt;


	&lt;p&gt;Code kata requires discipline, but it offers a deep well of knowledge about our craft.  More than most groups, I feel that Ruby programmers understand the need for good coding form, and are more likely to embrace kata.&lt;/p&gt;


	&lt;h2&gt;Everyone who calls his- or herself a musician knows that practice is essential.  The same with sports and other disciplines. Why don’t many programmers practice?&lt;/h2&gt;


	&lt;p&gt;I don’t know.  Maybe it’s because many programmers are programmers because it’s a good career yet they don’t really enjoy programming.  It’s hard for me to imagine any musicians who don’t enjoy music or athletes who don’t enjoy their sport.&lt;/p&gt;


	&lt;h2&gt;Some call programming engineering.  Others call it art. Still others call it craft. You’re using a fighting metaphor. What’s your take on the subject?&lt;/h2&gt;


	&lt;p&gt;Having devoted 5 years of my life to martial arts and more than that to software, I can’t help but to compare and contrast the two.  What I’ve found is that they’re not so unalike.  They both have a scientific foundation yet require copious practice to become proficient.  This is my definition of a craft.&lt;/p&gt;


	&lt;p&gt;Sparring is one facet of martial arts that doesn’t seem to have a counterpart in software.  Sparring is great.  After all the devotion and practice you invest in your craft, you get to pit your skills against those of your peers and see who comes out on top.  It’s a tool to measure your progress and learn your weaknesses.  It’s also fun.  I hope to see more of this in software.&lt;/p&gt;


	&lt;h2&gt;What are you passionate about outside of computer programming?&lt;/h2&gt;


	&lt;p&gt;Besides my family and software, my passions tend to jump around.  Martial arts has been a significant passion of mine.  I really enjoy playing the guitar.  Recently I’ve been playing around with basic electronic components, building little robots.  Basketball and soccer keep me active.  And as soon as I can spare the time, I’ll learn to fly airplanes.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-09-16:18943</id>
    <published>2008-09-16T03:03:00Z</published>
    <updated>2008-09-16T03:04:32Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/9/16/rubyconf-speaker-interview-ben-scofield" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Ben Scofield</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://rubyconf.org"&gt;RubyConf registration is open&lt;/a&gt; (and nearly sold out), and I am so excited by the program this year that I thought it would be fun to ask some of the speakers some questions before the conference. So I’m starting a series of informal interviews with RubyConf speakers.&lt;/p&gt;


	&lt;p&gt;The first one was &lt;a href="http://www.urbanhonking.com/ideasfordozens/"&gt;Greg Borenstein&lt;/a&gt;, creator of &lt;a href="http://rad.rubyforge.org/"&gt;&lt;span class="caps"&gt;RAD&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Next up is &lt;a href="http://www.culann.com/"&gt;Ben Scofield&lt;/a&gt;, author of &lt;a href="http://www.amazon.com/Practical-REST-Rails-2-Projects/dp/B001DA2BXU/ref=sr_1_3?ie=UTF8&amp;s=books&amp;qid=1221533963&amp;sr=8-3"&gt;Practical &lt;span class="caps"&gt;REST&lt;/span&gt; on Rails 2 Projects&lt;/a&gt; and developer at &lt;a href="http://viget.com"&gt;Viget Labs&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;At RubyConf, Ben will be presenting &lt;a href="http://rubyconf.org/talks/25"&gt;All I Really Need to Know* I Learned by Writing My Own Web Framework&lt;/a&gt;.&lt;/p&gt;


	&lt;h2&gt;So first you do Hello World, then you write your own framework?  Is this why there are so many Ruby web frameworks popping up?&lt;/h2&gt;


	&lt;p&gt;Obviously, there are at least a couple steps between Hello World and writing your own web framework. For me, though, these two practices are (like creating a blog in a new web framework) learning experiences. Hello World introduces the basic syntax of a language; blogs demonstrate how &lt;span class="caps"&gt;ORM&lt;/span&gt; and other techniques are implemented in a given framework. Similarly, custom web frameworks provide a path into still more complicated functionality (network requests and responses, templating, etc.). Building a framework requires a certain level of knowledge of both the programming language and of how the web works, and that knowledge makes other tasks on the web and/or in that language easier.&lt;/p&gt;


	&lt;p&gt;I do not think that this general point explains the plethora of Ruby web frameworks, however. That, instead, is due to two factors: Rack and Rails. Rack has made it astoundingly easy to try out a new idea for handling web requests (as I’ll talk about in my session), lowering the barrier to entry dramatically. Rails, on the other hand, has motivated the development of new frameworks by both its success and its opinionated nature. Merb was originally developed as a very lightweight alternative to RoR and has since grown into a much less opinionated framework. Waves, on the other hand, is a reaction to a perceived lack of focus on resources in Rails. Most of the new frameworks are reactions to Rails, and to the specific opinions it internalizes. That’s not to say that any of these frameworks are intrinsically worse (or better) than Rails—their genesis is entirely separate from their value, and I think that each of the frameworks out there has lessons to provide.&lt;/p&gt;


	&lt;h2&gt;You seem to spend most of your working time in Rails. Has writing your own framework affected how you understand Rails? Has it made you more appreciative?  Or critical?&lt;/h2&gt;


	&lt;p&gt;Definitely; I think that building any software in a given domain is bound to affect how you perceive others’ software written for that same domain, and web frameworks are no exception. Decisions that seem unfathomable at first glance take on an entirely new aspect when you’ve struggled with and addressed the same problems on your own.&lt;/p&gt;


	&lt;p&gt;The immediate cause of my setting out to write Athena was a disagreement with Rails’ implementation of &lt;span class="caps"&gt;REST&lt;/span&gt; (over collection and singleton resource being handled together, more specifically). That said, I wouldn’t say that I’m terribly critical of Rails; I love using it, and I don’t foresee abandoning it soon. Of course, I think of Athena first as a learning experience, not a viable competitor to Rails (unlike Merb or Ramaze, for instance); if that were not the case, I might have a differerent opinion. For now, however, I’m content to continue to learn from my experiences and hopefully bring them back to Rails when I can (through patches, plugins, and gems).&lt;/p&gt;


	&lt;h2&gt;Why do you think we’re still stuck doing faux &lt;span class="caps"&gt;MVC&lt;/span&gt; web development? Is it time for something new?&lt;/h2&gt;


	&lt;p&gt;I think the main reason we’re still building sites this way is that it works pretty darn well. Right now, we can build effective sites quickly, and we’re happy doing it—at the various least, we’re on a peak in the web framework landscape, and there’s a real risk in moving from a satisfactory (if potentially suboptimal) approach to an alternative, in that if you don’t know precisely where that next, higher peak is, you end up trudging through enormous valleys of unpleasant and unproductive work. Many of us made the move from frameworkless &lt;span class="caps"&gt;PHP&lt;/span&gt; or configuration-heavy Java because we used &lt;span class="caps"&gt;DHH&lt;/span&gt;’s fifteen minute blog video as a roadmap to the better place, already well-defined and waiting for us. For the next move, we’ll need something at least as comparable, and until then we’ll stay in this general region (which, all things considered, still has a lot of room for improvement, as Rails gets better and other frameworks adopt these lessons).&lt;/p&gt;


	&lt;p&gt;With that in mind, however, I do sometimes fear that we’re building our local maximum of joy and productivity to height such that the next thing will have to be even &lt;strong&gt;more&lt;/strong&gt; amazing before it pulls in an audience large enough to really compete with Rails. Of course, that makes the existing alternatives (with their communities) even more important, even if none of them are currently at the point of being the Coming Thing.&lt;/p&gt;


	&lt;h2&gt;You have a degree in Linguistics or something, right? Is this why you like to deconstruct things and put them back together?  How has your nontraditional training and education affected the way you learn and approach your job?&lt;/h2&gt;


	&lt;p&gt;Yep—philosophy, actually. I don’t know that I’d describe myself as breaking things down and reconstructing them, though given that my training was in analytical philosophy that does make sense. I prefer to look at my graduate work for inspriation; it was all about integrating distinct fields (cognitive science, philosophy of mind, animal behavior, biological psychology, evolutionary theory) into a cohesive whole. All of that has given me a perspective that’s somewhat different from the standard computer science point of view, I think, and while that can cause problems (since I’m missing some of the fundamental education a CS course of study provides), it more often than not helps me to see and make use of the underlying patterns.&lt;/p&gt;


	&lt;h2&gt;What are you passionate about outside of computer programming?&lt;/h2&gt;


	&lt;p&gt;That’s a question that gets a different answer depending on when you ask. At various times over the past few years, I’ve been passionate about dogs, analytic philosophy, comic books, squash, MMORPGs, mythology, cooking, politics, young adult literature, writing, various musical genres, Chinese martial arts, anime, volleyball…. I’m both obsessive and mercurial, which means I get powerfully drawn into subjects for a time, then move on to another fascination. At the moment, I’m holding steady with a few topics: comics and speculative fiction, with a dash of volleyball and philosophy, and I’m continually surprised and enchanted by what my six-month-old daughter does from day to day.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://www.chadfowler.com/">
    <author>
      <name>chad</name>
    </author>
    <id>tag:www.chadfowler.com,2008-09-12:18914</id>
    <published>2008-09-12T17:12:00Z</published>
    <updated>2008-09-12T17:56:54Z</updated>
    <category term="Conferences" />
    <category term="Ruby" />
    <category term="Speaker Interviews" />
    <link href="http://www.chadfowler.com/2008/9/12/rubyconf-speaker-interview-greg-borenstein" rel="alternate" type="text/html" />
    <title>RubyConf Speaker Interview: Greg Borenstein</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://rubyconf.org"&gt;RubyConf registration is open&lt;/a&gt;, and I am so excited by the program this year that I thought it would be fun to ask some of the speakers some questions before the conference. So I’m starting a series of informal interviews with RubyConf speakers.&lt;/p&gt;


	&lt;p&gt;The first one is &lt;a href="http://www.urbanhonking.com/ideasfordozens/"&gt;Greg Borenstein&lt;/a&gt;, creator of &lt;a href="http://rad.rubyforge.org/"&gt;&lt;span class="caps"&gt;RAD&lt;/span&gt;&lt;/a&gt;.  Greg also ran the lightning talks at &lt;a href="http://railsconf.org"&gt;RailsConf 2008&lt;/a&gt;.&lt;/p&gt;


	&lt;h2&gt;You’re working on &lt;span class="caps"&gt;RAD&lt;/span&gt; (Ruby Arduino Development).  How did you get into electronics in the first place?  I’ve never had training myself and always been interested but intimidated.  Was it hard?&lt;/h2&gt;


	&lt;p&gt;I had electronics twice, in high school and again in college, as part of general physics classes. I was incredibly bored by the subject and quite bad at it both times. Neither of those experiences had much in the way of hands-on tinkering time. Instead, they were electronics as Science: dry equations, proofs, and word problems, and I never absorbed much of it.&lt;/p&gt;


	&lt;p&gt;In college I majored in art and wrote my thesis in art history, but what I was really trying to study was how to make things. I’d met there, for the first time, people who were budding engineers and I kind of got infected by their mindset: the constant pull to understand how things worked, not necessarily to reveal the grand truths of the universe, but just to dive beneath the surface of things to learn how they operated enough to change them and make them your own and make new ones. I took classes in painting, printmaking, music theory, book making, anything that I thought would teach me how to build something new—even my run of math classes and my written thesis, I approached as varieties of making. A group of us got money from the school to try to build our own atomic force microscope. We got pretty far designing and constructing it, finally running out of school year while still hung up on the control software.&lt;/p&gt;


	&lt;p&gt;Also, the summer before my senior year, I interned at the Museum of Jurassic Technology (&lt;a href="http://mjt.org"&gt;http://mjt.org&lt;/a&gt;). The Museum is like a cross between an pre-renaissance cabinet of curiosities, a contemporary art installation, and a Disneyland ride. It’s filled with amazing exhibits that move and buzz and talk and glow; exhibits on micro-miniature sculpture, folk cures, Athanasius Kircher, Soviet cosmonaut dogs, Innuit string art, stereographic x-rays of flowers, etc. The museum’s founder, David Wilson, used to work in optical effects in Hollywood and is this genius of museum craft: optics, dioramas, lighting, etc. The summer I was there, there was an intern from the Getty cleaning the exhibits so their insides were open, relays and gears, projectors and wires, all spilling out.&lt;/p&gt;


	&lt;p&gt;All through this, I’d say I didn’t really know electronics and, mostly, I still don’t. These experiences, rather than teaching me much of practical use about electronics really just served to infect me with the bug to learn more. They showed me that electronics could be more than dry Science, it could be magic and it could be a key into how things really worked. Magic that you could make.&lt;/p&gt;


	&lt;p&gt;After college I wound my way through a series of professions and avocations and eventually wound up in programming. After awhile, the Arduino came along. I started to hear about it from mostly media-oriented friends as something they wanted to get into. Eventually, a group of us got together, ordered a handful of them from Sparkfun and set out to meet once a week to try to teach ourselves to use them. We were very quickly confronted with the fact that we barely knew any electronics. Getting a resistor on the right side of an &lt;span class="caps"&gt;LED&lt;/span&gt; to do the classic Arduino hello world was a challenged for us.&lt;/p&gt;


	&lt;p&gt;So, I started digging through my old physics textbooks and looking for new ones that were better. We’d set ourselves little projects like playing a melody on a tiny speaker or checking for a pattern on a series of buttons. For the first time, I was learning electronics the way I learned printmaking and Ruby: out of the need to see something I was making actually work.&lt;/p&gt;


	&lt;p&gt;Finally, the last few years, I’ve been really making progress, but it’s a challenge because the resources are really amazingly poor. Compared with the tools available for learning programming languages (from books to blogs to users’ groups), the hardware story is just brutally bad in this regard for beginners. All the documentation is tied up in data sheets from hardware vendors meant to be used by professional electrical engineers to design projects for mass production. Most of the tutorials, magazines, and books meant for regular people are based around one-off projects that, even if you do gather all the resources together to actually build, will teach you little about the actual underlying principles that you could actually grasp or re-use.&lt;/p&gt;


	&lt;p&gt;My most successful strategy has usually been getting my hands on real people that actual know this stuff and just asking stupid questions repeatedly until they actually give me an answer that starts at the beginning. That plus a few amazing books (that I’ve been beginning to catalog here: &lt;a href="http://github.com/atduskgreg/rad/wikis/books"&gt;http://github.com/atduskgreg/rad/wikis/books&lt;/a&gt;) has really been all that’s helped.&lt;/p&gt;


	&lt;h2&gt;Can you explain architecturally how &lt;span class="caps"&gt;RAD&lt;/span&gt; works? How do you get Ruby code to “compile” to code that can run on an Arduino microprocessor?&lt;/h2&gt;


	&lt;p&gt;&lt;span class="caps"&gt;RAD&lt;/span&gt; works by translating some Ruby code into C which can then be linked against the full Arduino software library and handed off to avr-gcc for compilation down into the hex that can be uploaded to an Arduino. The Arduino software library is built around two main functions: setup and loop; setup runs once when the Arduino starts up and after that, loop runs repeatedly. &lt;span class="caps"&gt;RAD&lt;/span&gt; takes a different translation strategy for each of these.&lt;/p&gt;


	&lt;p&gt;For setup, &lt;span class="caps"&gt;RAD&lt;/span&gt; provides a base class ArduinoSketch. Much like Rails’ ActiveRecord::Base, classes that inherit from ArduinoSketch gain a bunch of class methods for doing a lot of the configuration and setup necessary for programming the Arduino: declaring pins as input or output, setting up helpers for working with various pieces of hardware such as LCDs and Servos, etc.. &lt;span class="caps"&gt;RAD&lt;/span&gt; uses some metaprogramming magic and some seriously lo-fi string concatenation to use these class methods that you call in your sketch to generate a big chunk of C code: a lot of function signatures, library includes, and other boilerplate as well as the setup function itself&lt;/p&gt;


	&lt;p&gt;Now, the loop function is another story. &lt;span class="caps"&gt;RAD&lt;/span&gt; looks for a method on your subclass of ArduinoSketch called loop. It takes that method and hands it off to a library called RubyToC, which spits back the C equivalent. RubyToC was written by Ryan Davis and Eric Hodel and probably some of the other Seattle.rb geniuses as part of the Metaruby Project whose goal was to rewrite Ruby entirely in Ruby. I think that project might be some form of dead at this point since all of those guys now work for Engine Yard on Rubinius. Anyway, from &lt;span class="caps"&gt;RAD&lt;/span&gt;’s point of view, RubyToC is mostly magic alien technology that does exactly what we need (though we have made our own extensions by subclassing some pieces of the RubyToC machinery in order to implement some additional features (such as times blocks) in ways that might not be satisfactory for the general project of converting Ruby to C, but work great for us with our constrained compiler targeting).&lt;/p&gt;


	&lt;p&gt;We do the same thing with any other additional helper methods you’ve written on your class, glue the whole thing together and send it off for compilation.&lt;/p&gt;


	&lt;p&gt;The Arduino is obviously highly resource constrained (it only has 16k of flash program memory) and so a lot of people ask about the bloat that’s caused by the inefficient C we generate. We work had to keep that down (I can’t find the current stat for it, but I’ll get back to you with that) and I think that it’s worth it for the great increase in ease of use that Ruby provides over C++.&lt;/p&gt;


	&lt;h2&gt;What’s the coolest thing you’ve done or seen done with &lt;span class="caps"&gt;RAD&lt;/span&gt;?&lt;/h2&gt;


	&lt;p&gt;Right now, the answer to that is probably one of JD Barnhart’s recent projects. Either his Ruby on Bells:&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://vimeo.com/1261369"&gt;http://vimeo.com/1261369&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;or his Ruby + Auduino Midi Beat Box Demo:&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.vimeo.com/1650051"&gt;http://www.vimeo.com/1650051&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;JD came along like manna from open source heaven this summer: I hadn’t had much time to work on &lt;span class="caps"&gt;RAD&lt;/span&gt; for awhile and had accumulated a laundry list of requested features, both my own and from other users. As soon as I put &lt;span class="caps"&gt;RAD&lt;/span&gt; up on GitHub, JD forked it and added nearly all of them. He announced his work by putting a great screencast up with that Bells demo and a tour of his improvements. He makes great screencasts! I’ve since brought him on as part of the &lt;span class="caps"&gt;RAD&lt;/span&gt; core team and he has, along with Bryan Riley from wulfden.org, been a big part of the fast rate of improvement &lt;span class="caps"&gt;RAD&lt;/span&gt;’s been seeing lately.&lt;/p&gt;


	&lt;h2&gt;Where do you see yourself taking &lt;span class="caps"&gt;RAD&lt;/span&gt; next?&lt;/h2&gt;


	&lt;p&gt;Right now, we’re in the middle of doing a few desperately needed refactorings on the &lt;span class="caps"&gt;RAD&lt;/span&gt; code base, mostly consolidating things so we can clean up some of the fallout of all the recent improvements and make things more flexible and easier to improve.&lt;/p&gt;


	&lt;p&gt;After that I have two main directions I want to take the project: the educational route and the ‘modern software tools’ route.&lt;/p&gt;


	&lt;p&gt;I mentioned in response to you first question how much Arduino helped make it possible for me to learn electronics in the first place by giving me a fun environment where I could experiment and build things rapidly and easily. The whole purpose of &lt;span class="caps"&gt;RAD&lt;/span&gt; is to take this project even further: to let you program the Arduino in Ruby instead of C because it’s even faster and more fun. I think &lt;span class="caps"&gt;RAD&lt;/span&gt; can be a great tool for lowering the barrier to learning hardware hacking. Ruby’s expressiveness makes &lt;span class="caps"&gt;RAD&lt;/span&gt; code examples extremely readable. I’m trying to foster a culture around &lt;span class="caps"&gt;RAD&lt;/span&gt; of really good documentation: not just of &lt;span class="caps"&gt;RAD&lt;/span&gt; itself, but of exactly the hardware that is usually only explained through arcane data sheets. The &lt;span class="caps"&gt;RAD&lt;/span&gt; wiki is already starting to house some good material like this:&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://github.com/atduskgreg/rad/wikis"&gt;http://github.com/atduskgreg/rad/wikis&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;and I’m hoping to see (and write) more and more as the project progresses. Just as some of the great books that helped me learn Ruby (the Pickaxe book, _why’s Poignant Guide, Chris Pine’s Learn to Program) also taught me the basics of good programming itself, I’m hoping that &lt;span class="caps"&gt;RAD&lt;/span&gt; can be an entry point into creating some documentation for the wider world of hardware hacking.&lt;/p&gt;


	&lt;p&gt;The other big direction I want to take the project is to build all the ‘modern software tools’: we’ve become used to in Rubyland, but are still extreme luxuries in embedded C++ such as testing, simulation, code stats, etc. One of the great things about having written a program for your Arduino in Ruby instead of C++ is that once you’ve done so, we can use Ruby’s metaprogamming power to interpret that program in different contexts to accomplish different goals. So, just through writing a different implementation of ArduinoSketch, we can run your sketch in a test framework that will help you make sure that it actually does what you want it to or in a graphical simulator that lets you play with different hardware connections and code combinations to see what will happen before having to actually build out circuits or connect your real Arduino at all. Both of these projects (the testing framework and the simulation app) are in extremely nascent stages right now, but I hope to pour more time into them as soon as we finish up our current refactor.&lt;/p&gt;


	&lt;h2&gt;What are you passionate about outside of computer programming and electronics?&lt;/h2&gt;


	&lt;p&gt;Music has been a passion for me for a long time. I play in an indie rock band called At Dusk (&lt;a href="http://atduskmusic.com"&gt;http://atduskmusic.com&lt;/a&gt;) that’s been together for almost 10 years. We’ve toured around the country and put out 3 albums (with a fourth and final one on the way). I also run a local Portland music non-profit called &lt;span class="caps"&gt;PDX&lt;/span&gt; Pop Now! that puts on a free local all-ages music festival every year, produces an annual compilation of all local music, and helps do advocacy for kids’ access to music.&lt;/p&gt;


	&lt;p&gt;I’m also passionate about art—I think part of my energy for electronics comes from surplus created from drawing less the last couple of years. Artists like Jennifer and Kevin McCoy (&lt;a href="http://flickr.com/photos/mccoyspace/"&gt;http://flickr.com/photos/mccoyspace/&lt;/a&gt;), Joseph Cornell, Thomas Demand (&lt;a href="http://www.thomasdemand.de/"&gt;http://www.thomasdemand.de/&lt;/a&gt;), Chandra Bocci, and David Hockney, et al inspire my interest in physical computing stuff as much as anything on the technical side does.&lt;/p&gt;


	&lt;p&gt;This year, I’ve discovered a passion for cooking. I’ve been working from Alice Waters’ books which are all about simple preparations of the best seasonal local produce so that’s lead me to start learning about gardening as well. That, combined with my adoption of biking as my main form of transportation starting a few months back, as made me feel like I’ve finally become the typical northwesterner, which must mean that it’s time to shake things up!&lt;/p&gt;
          </content>  </entry>
</feed>
