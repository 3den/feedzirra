<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  xml:base="http://adam.blogs.bitscribe.net/wp-atom.php"
   >
	<title type="text">Adam @ Bitscribe</title>
	<subtitle type="text">software sophistry</subtitle>

	<updated>2007-07-03T02:31:58Z</updated>
	<generator uri="http://wordpress.org/" version="2.3.2">WordPress</generator>

	<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net" />
	<id>http://adam.blogs.bitscribe.net/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="http://adam.blogs.bitscribe.net/feed/atom/" />

			<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[PHP DateTime Class]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/07/02/php-datetime-class/" />
		<id>http://adam.blogs.bitscribe.net/2007/07/02/php-datetime-class/</id>
		<updated>2007-07-03T02:31:58Z</updated>
		<published>2007-07-03T02:31:58Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="PHP" />		<summary type="html"><![CDATA[With as much time as I spend talking about Rails, you&#8217;d think that&#8217;s all I do.  In fact, Bitscribe - like many companies, I&#8217;m sure - maintains a number of apps which predate Rails.  My team and I often find ourselves bring concepts from Rails (and other frameworks; we have a few Django [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/07/02/php-datetime-class/"><![CDATA[<p>With as much time as I spend talking about Rails, you&#8217;d think that&#8217;s all I do.  In fact, Bitscribe - like many companies, I&#8217;m sure - maintains a number of apps which predate Rails.  My team and I often find ourselves bring concepts from Rails (and other frameworks; we have a few Django fans here, for example) into our the frameworks used on these apps.  A sort of backport, if you will.</p>
<p>In that vein, a coworker of mine created a timestamp manipulation class for PHP.  Dates come out of the database as strings, which are easy enough to turn into time_t timestamps; but hard to manipulate or do comparisons on.  I often find myself falling back to doing the manipulation in SQL, since Postgres has excellent date/time manipulation; but this is pretty ugly, and basically impossible to unit test.</p>
<p>Since it is a standalone class, it was easy to extract from the framework, so I suggested he post it on the <a href="http://opensource.bitscribe.net/">Bitscribe open source page</a>, which he did.  Here it is: <a href="http://opensource.bitscribe.net/page/BDateTime">BDateTime</a>.  Next time you find yourself manipulating timestamps through mktime(), strtotime(), and (heaven forbid) regular expressions, try BDateTime out instead.</p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Comet with Rails + Mongrel]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/05/08/comet-with-rails-mongrel/" />
		<id>http://adam.blogs.bitscribe.net/2007/05/08/comet-with-rails-mongrel/</id>
		<updated>2007-05-23T01:29:56Z</updated>
		<published>2007-05-08T10:10:42Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Javascript" /><category scheme="http://adam.blogs.bitscribe.net" term="Ruby" />		<summary type="html"><![CDATA[In my last post I described how to create a mongrel handler.  I said you might want to do this for optimization purposes, but my own interest came about in an attempt to solve the server-push problem with Rails.
Comet is the term that seems to be catching on for server-push via XmlHttpRequest.  Possible [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/05/08/comet-with-rails-mongrel/"><![CDATA[<p>In <a href="http://adam.blogs.bitscribe.net/2007/05/06/howto-custom-mongrel-handlers/">my last post</a> I described how to create a mongrel handler.  I said you might want to do this for optimization purposes, but my own interest came about in an attempt to solve the server-push problem with Rails.</p>
<p><a href="http://en.wikipedia.org/wiki/Comet_%28programming%29">Comet</a> is the term that seems to be catching on for server-push via XmlHttpRequest.  Possible applications include chat clients or a stock ticker.  Anything that wants constant updates will be both responsive and less demanding of server resources if it waits for data to be pushed to it, instead of opening a new status query every few seconds.</p>
<p>Since the server can&#8217;t initiate a connection to the user&#8217;s browser, the only possible solution is to have the browser hold a connection open indefinitely, waiting for an update.  Since Rails is single-threaded, however, this means that one whole server instance would be tied up by this connection - clearly infeasible in almost all situations.</p>
<p>You might say, &#8220;Why not have another small server listening on a separate port to hold on to these push-status connections?&#8221;  Good idea - except that XmlHttpRequest won&#8217;t let you connect to another port.  This is because the port is considered part of the hostname, and connecting to another hostname from within the javascript sandbox would be a big security no-no.  (It would be trivially easy, for example, to inject a little javascript into a site which caused all of its visitors&#8217; browsers to start hammering another unrelated site as soon as they visited the homepage.)</p>
<p><a href="http://juggernaut.rubyforge.org/">Juggernaut</a> gets around this with a little hidden Flash component.  This is a nifty idea, but for me it is unappealing because Flash is not readily available for my platform (Ubuntu AMD64).  More importantly, I&#8217;d prefer to avoid building technology that depends on a proprietary plugin built by a monolithic, old-fashioned (i.e., shrink wrap) software company.</p>
<p>So holding open connections to Rails won&#8217;t work due to its controller lock.  But as was demonstrated in the previous entry, a mongrel handler won&#8217;t have that problem.  I&#8217;ll extend the auction example shown there to use server-push.</p>
<pre><code class="ruby">
require 'active_record'

class StatusHandler &lt; Mongrel::HttpHandler
   def process(request, response)
      id = request.params['PATH_INFO'].slice(1, 20)
      current = request.params['QUERY_STRING']

      while status(id) == current do
         sleep 0.2
      end

      response.start(200) do |head, out|
         head["Content-Type"] = "text/html"
         out.write status(id)
      end
   end

   def status(id)
      connection.select_value("select status from auctions where id=#{id.to_i}")
   end

   def connection
      ActiveRecord::Base.connection
   end
end

uri "/status", :handler => StatusHandler.new, :in_front => true
</code></pre>
<p>This assumes your auctions table has a field named &#8220;status,&#8221; which I&#8217;m using as an integer, but any type should work.  <a href="http://localhost:3000/status/1">http://localhost:3000/status/1</a> now delivers just one value, the status.  Where it gets interesting is something like <a href="http://localhost:3000/status/1">http://localhost:3000/status/1?100</a>, assuming that the status of auction id=1 is currently set to 100 in the database.  Now, the connection will hang and wait for the value to change.  (You&#8217;ll see the database queries in development.log, but no web hits.)  Pop open a sql shell and run &#8220;update auctions set status=101&#8243; and the connection will resolve immediately, printing out the new value.</p>
<p>Here&#8217;s a simple example of making an ajax call to this url from within a page:</p>
<pre><code>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
   &lt;%= javascript_include_tag :defaults %&gt;
&lt;/head&gt;
&lt;body&gt;
   Status is now: &lt;span id="status"&gt;&lt;/span&gt;

   &lt;script language="javascript"&gt;
      function respawn()
      {
         new Ajax.Updater('status', '/status/1?' + $('status').textContent, { onComplete: respawn });
      }

      respawn();
   &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Experiment with updating the status value in the sql shell and you&#8217;ll see that the page always updates instantly.  To watch the connections, open the <a href="http://www.getfirebug.com/">Firebug</a> console, click Options in the upper-right, and make sure &#8220;Show XMLHttpRequests&#8221; is checked.  Reload the page and you&#8217;ll now see a POST each time you update the status.  There will always be an active one at the bottom, waiting, waiting for the status update.</p>
<p>And there you go.  Server-push connections with only Rails and Mongrel.</p>
<p><i>Update: Mere minutes after I finished writing this article, I came across <a href="http://www.eribium.org/?p=116">Shooting Star</a>, a Rails plugin for adding Comet to your apps.  So far this looks a little heavy-weight for my purposes, and somewhat platform-dependent so far - not to mention that they push the meteor metaphor a bit far in their method naming.  Still, this may be a more robust solution than my little hack, so check it out.  If anyone has tried Juggernaut, Shooting Star, and my hack, I&#8217;d be curious to hear a comparison.</i></p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[HOWTO: Custom Mongrel Handlers]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/05/06/howto-custom-mongrel-handlers/" />
		<id>http://adam.blogs.bitscribe.net/2007/05/06/howto-custom-mongrel-handlers/</id>
		<updated>2007-05-08T23:21:58Z</updated>
		<published>2007-05-07T06:39:14Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Ruby" />		<summary type="html"><![CDATA[There doesn&#8217;t seem to be any good documentation for creating custom Mongrel handlers.  The Mongrel site seems to be completely silent on the subject.  I was able to extract what I needed to know from this article and Ezra Zygmuntowicz&#8217;s slides.
It&#8217;s actually quite easy to make a mongrel handler, so here&#8217;s a quick [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/05/06/howto-custom-mongrel-handlers/"><![CDATA[<p>There doesn&#8217;t seem to be any good documentation for creating custom Mongrel handlers.  The <a href="http://mongrel.rubyforge.org/">Mongrel site</a> seems to be completely silent on the subject.  I was able to extract what I needed to know from <a href="http://www.urbanhonking.com/ideasfordozens/archives/2007/05/my_first_mongre.html">this article</a> and <a href="http://brainspl.at.sharedcopy.com/mongrel_handlers.pdf">Ezra Zygmuntowicz&#8217;s slides</a>.</p>
<p>It&#8217;s actually quite easy to make a mongrel handler, so here&#8217;s a quick tutorial that should tell you everything you need to know.</p>
<p>First, why would you want to make a mongrel handler?  The main reason would be speed and scalability.  Mongrel is multithreaded even though Rails isn&#8217;t.  Mongrel is fast, Rails is slow.  Of course, Rails is Rails, and Mongrel is just a webserver; but many types of apps may have some services that are hit far more than others, and thus it would be worth writing what amounts to a stripped-down version of the controller action in order to handle just those requests.</p>
<p>For example, if you were writing eBay in Rails, you might want to implement the API calls which are used to check the status of an auction as a custom mongrel handler.  This part of the site may be accessed with great frequency by third party apps trying to keep a current status, and chances are generating the results are pretty simple (converting a row in the database to XML and printing it out).</p>
<p>Here&#8217;s what that might look like:</p>
<pre>
<code>
class StatusHandler < Mongrel::HttpHandler
   def initialize
      @mutex = Mutex.new
   end

   def process(request, response)
      id = request.params['PATH_INFO'].slice(1, 20)  # trim leading slash

      response.start(200) do |head, out|
         head["Content-Type"] = "application/xml"
         out.write status(id).to_xml
      end
   end

   def status(id)
      rows = @mutex.synchronize { ActiveRecord::Base.connection.select_all("select * from auctions where id=#{id.to_i}") }
      return { 'error' => &#8216;No such record&#8217; } if rows.length < 1
      return rows.first
   end
end

uri "/status", :handler => StatusHandler.new, :in_front => true
</code>
</pre>
<p>Name this status_handler.rb and drop it into the root dir of your Rails project.  Instead of running script/server, execute this command:</p>
<pre>
<code>
mongrel_rails start -S status_handler.rb
</code>
</pre>
<p>Assuming you&#8217;ve set up a little database with some sample data in the table named by the handler (&#8221;auctions&#8221; in my example), accessing the url <a href="http://localhost:3000/status/1">http://localhost:3000/status/1</a> will show the data for the record with id=1.</p>
<p>Now what&#8217;s so hot about this?  For one, it&#8217;s fast - see Erza&#8217;s slides for benchmarks.  But more importantly - to my mind - is that a long request won&#8217;t hold up any others.  Try putting a &#8220;sleep 10&#8243; as the first line of the process method.  Restart your server and hit the status url again.  The connection will hang temporarily, but now open another tab and hit any other page in your Rails app.  Notice that it displays right away, even though the other tab is still loading.</p>
<p>The downside is that you don&#8217;t have Rails, and as it turns out, we like Rails.  So suddenly you&#8217;re stuck doing a lot of your own dirty work.  Here, for example, I load up ActiveRecord and manage the database connection and raw sql manupulation.  (This whole thing could be done in one line as a Rails controller: respond_to { |f| f.xml { Auction.find(params[:id]).to_xml } })  Parsing the request string can be time-consuming so I went for simplicity - String#slice instead of a regular expression or tokenization.  You also have to protect against CGI parameter attacks, which I again simplify with a to_i.</p>
<p>I wasn&#8217;t able to figure out how to load a custom handler from a mongrel yaml config file.  It seems like the keyword should be config_script, but it doesn&#8217;t seem to produce the same result as -S.  Anyone knows how to make this work, please comment.</p>
<p>Now that you know how to write a mongrel handler, the real fun can begin.  In my next post I&#8217;ll describe how this can be used for server-push connections.</p>
<p><i>Update: Rick Olson improved the code by trimming out the superfluous establish_connection, I&#8217;ve used his version above.</i></p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Working With Rails]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/05/01/working-with-rails/" />
		<id>http://adam.blogs.bitscribe.net/2007/05/01/working-with-rails/</id>
		<updated>2007-05-01T10:37:58Z</updated>
		<published>2007-05-01T10:37:46Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Ruby" />		<summary type="html"><![CDATA[I&#8217;ve been aware of Working With Rails for a while, and have even connected with a few developers who have done work for Bitscribe through it.  Cool concept, definitely.  Just recently I noticed that someone had recommended me (one of the contributors to Gyre - thanks, Michael!) so I decided to make a [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/05/01/working-with-rails/"><![CDATA[<p>I&#8217;ve been aware of <a href="http://www.workingwithrails.com/">Working With Rails</a> for a while, and have even connected with a few developers who have done work for Bitscribe through it.  Cool concept, definitely.  Just recently I noticed that someone had recommended me (one of the contributors to Gyre - thanks, Michael!) so I decided to make a <a href="http://workingwithrails.com/person/2898-adam-wiggins">real profile</a>.  Interesting to note that, with one recommendation, my popularity is 89%.  Guess there are a lot of empty records up there.</p>
<p>The profile form asks how long you&#8217;ve been working with Ruby, and Rails.  For the former I looked at the datestamp of my first fooling-around Ruby script.  For the latter I hit the svn log of my first Rails project.  I was surprised to see that I&#8217;ve been doing Rails for exactly a year this month, with my Ruby tinkerings predating that by about six months.  <i>Woah, really?</i>  Ruby and Rails feel so comfortable now that it seems like years since I&#8217;ve used anything else.  It&#8217;s gratifying that time seems to stretch out during periods of rapid change - I guess time doesn&#8217;t always fly when you&#8217;re having fun.</p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Rails / Ubuntu Feisty Quickstart]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/04/21/rails-ubuntu-feisty-quickstart/" />
		<id>http://adam.blogs.bitscribe.net/2007/04/21/rails-ubuntu-feisty-quickstart/</id>
		<updated>2007-06-23T05:24:01Z</updated>
		<published>2007-04-22T00:13:46Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Ruby" /><category scheme="http://adam.blogs.bitscribe.net" term="Ubuntu" />		<summary type="html"><![CDATA[If you&#8217;ve just installed a fresh copy of Ubuntu 7.04 (Feisty Fawn), the following sequence of commands will give you everything you need to run Rails with MySQL or Postgres and Mongrel.  This should be run as root (&#8221;sudo su -&#8221; will get you a root shell).
First, core packages through apt-get:


apt-get install ruby rubygems [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/04/21/rails-ubuntu-feisty-quickstart/"><![CDATA[<p>If you&#8217;ve just installed a fresh copy of Ubuntu 7.04 (Feisty Fawn), the following sequence of commands will give you everything you need to run Rails with MySQL or Postgres and Mongrel.  This should be run as root (&#8221;sudo su -&#8221; will get you a root shell).</p>
<p>First, core packages through apt-get:</p>
<pre>
<code>
apt-get install ruby rubygems rake ruby1.8-dev irb rdoc libopenssl-ruby1.8 postgresql-8.2 libpgsql-ruby libmysql-ruby1.8 mysql-server gcc libc6-dev make subversion openssh-server
</code>
</pre>
<p>And your gems:</p>
<pre>
<code>
gem install -y rails mongrel --no-rdoc --nori
</code>
</pre>
<p>If it prompts you for which version of Mongrel (or other gems) to install, the first one on the list (type &#8220;1&#8243; and press enter) is almost always right, unless it reads &#8220;win32&#8243;, in which case pick the first one that says &#8220;ruby&#8221;.  (This silliness is definitely a major weak point of the gem package manager.  I&#8217;ve created <a href="http://rubyforge.org/tracker/index.php?func=detail&#038;aid=8643&#038;group_id=126&#038;atid=577">a patch that fixes this issue</a>, which is being studiously ignored by the rubygems maintainers.)</p>
<p>Now, enable mod_rewrite and mod_proxy in your Apache modules (the latter is only necessary if you plan to proxy mongrel, but might as well have it):</p>
<pre>
<code>
a2enmod rewrite
a2enmod proxy
/etc/init.d/apache2 restart
</code>
</pre>
<p>For bonus points, you might want to install a few other useful developer tools:</p>
<pre>
<code>
apt-get install php5 php5-cli php5-pgsql php5-mysql vim-gtk vim-ruby
</code>
</pre>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Javascript Text Editor]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/04/20/javascript-text-editor/" />
		<id>http://adam.blogs.bitscribe.net/2007/04/20/javascript-text-editor/</id>
		<updated>2007-04-20T09:23:02Z</updated>
		<published>2007-04-20T09:21:57Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Gyre" /><category scheme="http://adam.blogs.bitscribe.net" term="Javascript" />		<summary type="html"><![CDATA[Here&#8217;s a source code editor I wrote in javascript, inspired by CodePress.  Feel free to snag and use in your application or modify to your needs.  Syntax highlighting and indenting for Ruby is hardcoded, but it could easily be modified by swapping out ruby_syntax.js with your own class.  I used Prototype just [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/04/20/javascript-text-editor/"><![CDATA[<p>Here&#8217;s a <a href="/jseditor/index.html">source code editor</a> I wrote in javascript, inspired by <a href="http://www.codepress.org/">CodePress</a>.  Feel free to snag and use in your application or modify to your needs.  Syntax highlighting and indenting for Ruby is hardcoded, but it could easily be modified by swapping out ruby_syntax.js with your own class.  I used Prototype just out of habit, but it could be factored out very easily - I just use it for a couple of simple things like Event.observe.</p>
<p>One thing that really struck me working on this is just how powerful javascript and DHTML have become.  I mean, writing a programmer&#8217;s editor is hard, right?  But I cranked this out in a few evenings.  And yeah, I know it&#8217;s far from full-featured; but it really blew me away just how easy this was.  The only part that was even mildly challenging was handling selections.</p>
<p>I&#8217;ve worked with a number of different display paradigms over the years.  Early on I was doing character-based output, drawing little boxes and menus and so forth using the upper 127 ASCII line drawing characters.  This was great because it was so easy, mostly because everything fit onto a grid.</p>
<p>Later I started working with graphics by manipulating the raw pixels.  It took a pretty massive amount of time to do something as simple as make a button, let alone something complicated like a scrolling panel or tabs.</p>
<p>A few more years passed and now there were various sorts of GUI toolkits.  I started with hideous, barely usable ones like Motif and the raw Win32 libs.  Later I moved on to more enlightened toolkits like Qt and GTK.  The box model they offered for packing widgets, coupled with some good visual design tools, made the process of building the display portion of your app pretty reasonable.</p>
<p>Still, it was difficult to mix freeform drawing like lines or shapes with the box-model widgets.  And either way, it was just nowhere near the ease of working with those simple character-based displays.  That&#8217;s the price of progress though, right?</p>
<p>Nope.  Somehow - and I&#8217;m not sure how or when it happened - DHTML managed to evolve into a combination of the box model (for auto-adjusting layouts) and the canvas model (for freeform drawing).  And somehow, working with it, I had a strange sense of deja-vu: working with DHTML is very pleasantly reminiscent of the good ol&#8217; fashioned character grid from my old 80&#215;24 text mode programs.</p>
<p>Maybe because, at it&#8217;s core, HTML really is just a bunch of characters.  But it&#8217;s divided into container nodes that can easily be positioned however, including using box model stuff to get them to line up neatly and dynamically resize with their content.  And then it&#8217;s like a canvas in that you&#8217;re free to position things however, breaking them out of the grid if you want.  And then when I see <a href="http://www.themaninblue.com/experiment/Blobular/">the amazing things you can now do with inline SVG</a>, all I can say is: the sky&#8217;s the limit.</p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[On Focus]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/04/17/on-focus/" />
		<id>http://adam.blogs.bitscribe.net/2007/04/17/on-focus/</id>
		<updated>2007-04-17T12:03:21Z</updated>
		<published>2007-04-17T12:03:21Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Life Hacking" />		<summary type="html"><![CDATA[Through most of my career as an entrepreneur, my mornings have always been devoted to checking email.  This has always seemed like a good way to dive into the day.  But recently, I&#8217;ve come to the conclusion that this behavior is actually quite poor for productivity.  Not because there&#8217;s anything wrong with [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/04/17/on-focus/"><![CDATA[<p>Through most of my career as an entrepreneur, my mornings have always been devoted to checking email.  This has always seemed like a good way to dive into the day.  But recently, I&#8217;ve come to the conclusion that this behavior is actually quite poor for productivity.  Not because there&#8217;s anything wrong with checking email - it certainly needs to be done at some point (or many points) each day.  No, the reason why I prefer to do things differently now is that I think a morning email-check starts you off at the wrong level of detail.</p>
<p>Email tends to be very zoomed in.  Little notes, FYIs, and requests related to stuff you&#8217;ve already done, or may do in the future.  But one of the biggest impediments to productivity is getting too caught up in the details, and thus missing out on the big picture.</p>
<p>There are always an infinite number of details, and you can run yourself ragged trying to keep up with them all.  It&#8217;s easy to do so, because all of these details tend to be so demanding.  They sit on a todo list looking terribly not-done, or worse yet, they come in attached to subtly demanding emails from your coworkers, clients, or partners.</p>
<p>The start of the day is a perfect time to look at the big picture.  You&#8217;re rested, and your head is clear, since it&#8217;s been 12 hours or so since you last thought about work.  The whole day is ahead of you, full of promise and potential.  Now&#8217;s the time to ask: what is the absolute most valuable way I could spend the next eight hours?</p>
<p>I&#8217;ve been amazed at the insights this produces.  I&#8217;m more productive - not from doing more work, but from working on things that matter more.  Humans tend to get caught up in the details so easily.  Once caught up, we rarely stop to question the comparative value of <i>this here</i> vs. anything else you could be doing with your time and energy.  But the opportunity cost of that energy may be huge.  Morning is a great time to stop and think about this; it&#8217;s the one time of day that you&#8217;re not already wrapped up in something.</p>
<p>Not surprisingly, I&#8217;m not the first to have this insight.  Getting Things Done recommends setting aside two hours each week to look at the &#8220;50,000 foot view&#8221;, or the really big picture.  This is one of those &#8220;But I don&#8217;t have time for that!&#8221; &rarr; &#8220;You don&#8217;t have time not to&#8221; things.  My complaint with the specific method suggested by GTD - doing this review late on a Friday - is that you don&#8217;t want to think about the big picture much then.  The events of the week are still fresh in your brain, demanding your attention.  I find it much more effective to think about this at a time when I&#8217;m more distant from the details.</p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Getting Chop-Happy with Axeman]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/03/16/getting-chop-happy-with-axeman/" />
		<id>http://adam.blogs.bitscribe.net/2007/03/16/getting-chop-happy-with-axeman/</id>
		<updated>2007-04-27T05:46:15Z</updated>
		<published>2007-03-16T07:59:49Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Design" /><category scheme="http://adam.blogs.bitscribe.net" term="Ruby" />		<summary type="html"><![CDATA[An important but oft-overlooked principle of software design is the aggressive culling of unused features.  The best software products are slim and lean, with exactly the features its users need and few that they don&#8217;t.  This like weeding and pruning in your garden: without it, you&#8217;ll eventually be overrun.
The types of apps that [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/03/16/getting-chop-happy-with-axeman/"><![CDATA[<p>An important but oft-overlooked principle of software design is the aggressive culling of unused features.  The best software products are slim and lean, with exactly the features its users need and few that they don&#8217;t.  This like weeding and pruning in your garden: without it, you&#8217;ll eventually be overrun.</p>
<p>The types of apps that I most commonly work on are internal applications used by perhaps a few hundred users in a single organization, or across several organizations.  You&#8217;d think that with such a narrow audience, it would be easy to get information about what&#8217;s being used and what isn&#8217;t.  Not as easy as it seems, though, because the users are not good at analyzing their own use.  If you ask them whether a particular report is used, for example, they&#8217;ll make vauge noises like &#8220;Oh yeah I clicked on that once&#8221; or &#8220;Huh I hadn&#8217;t seen that before, but I&#8217;ll definitely use it now that I know about it.&#8221;  In most cases this stuff is not true, but it&#8217;s very hard to tell.</p>
<p>Historically my approach to this has been to cut a feature I think is unused and wait for someone to complain.  This works well enough because my intuition is right 90% of the time; but the 10% it is wrong, I can end up with cranky users.  (In doing experimental cutting like this, I usually remove the link a few days prior to deleting the connected code.  That makes it a cinch to put it back in when necessary.)</p>
<p>A burst of inspiration hit me the other evening.  We don&#8217;t need to ask the users: the application should be able to track this!  To this end, I&#8217;ve created <a href="http://opensource.bitscribe.net/page/Axeman">Axeman</a>.  This is a tiny Rails plugin that tracks usage in a SQLite database, and displays a simple report with the results constrained by time.  Screenshot:</p>
<p><a href="http://adam.blogs.bitscribe.net/images/axeman.png"><img src="http://adam.blogs.bitscribe.net/images/axeman.png" border="0" width="450"></a></p>
<p>In the left column is a traffic report, comparable to a web log analyzer like the venerable <a href="http://awstats.sourceforge.net/">AWStats</a>.  The Axeman report is way simpler and doesn&#8217;t have any fancy graphs, though, so this isn&#8217;t too exciting.  Besides, you can install AWStats or whatever to get this info about your Rails app.  Where it gets more interesting is the right column.</p>
<p>Here we see controller actions that have <b>not</b> been accessed during the selected time period.  These are determined by analyzing the source of your app/controllers directory, and cross-referencing it against the usage data.</p>
<p>As an aside, I think it&#8217;s interesting that this is only possible because of the structured and convention-based nature of modern application frameworks.  Axeman is a very simple example, but I am hoping that as time progresses, we will see more self-aware / self-introspecting application components.</p>
<p>What does it mean when actions appear in the righthand column?  Let&#8217;s look at the example shown in the screenshot.  This is a tiny app and I didn&#8217;t expect there to be many dark corners, but as it turns out there&#8217;s quite a bit of dead code.  First, there&#8217;s a bunch of account signup stuff which is unused - this was created by the generator for the login engine.  It&#8217;s not used, so axe it.</p>
<p>Next, we see that categories and authors both have index actions which are never accessed.  Looking at the code I see that these are just redirects to the list action.  However, the list action seems to be linked directly, since that one appears in the lefthand column.  No need for them then: the axe claims two more victims.</p>
<p>Books has a few unused actions.  sort_order is a vestigial remnant of an ajax feature which is no longer used; it goes under the axe.  destroy is a working method, but not linked anywhere; most likely created as part of CRUD, but then whoever did the UI didn&#8217;t feel that it was needed.  We could link it, I suppose, but why bother?  If the app has gone this long without anyone complaining that they can&#8217;t delete books, then there seems little need to maintain the code that implements the feature.  Chop, chop.  Last, it seems that there is some confusion about new, edit, and new_and_edit methods on the Books controller.  Looking at the code I see that new_and_edit is called by both new and edit, but is never accessed directly by the user&#8217;s browser.  Therefore it should be made private (Axeman ignores private and protected controller methods).  With all of these changes, the Books controller is quite a bit cleaner.</p>
<p>Also on the executioner&#8217;s block should be methods with low hit counts, that is, ones that appear at the very bottom of the lefthand column.  This requires more knowledge of the user story for each page than does completely unaccessed pages.  For example, you could have a page which displays some tax information which is only accessed once a year by one person in the organization.  Therefore a low hit count should be expected, and the page should not face the axe.  But most other kinds of pages should probably be removed if they haven&#8217;t been accessed frequently.  The default time period is 3 months, which I think is about the timespan in which you&#8217;d expect something to be accessed at least a few dozen times.  If it&#8217;s only got one or two clicks, chances are good this was just someone who hit the wrong link, or perhaps was just curious.  Truly useful pages will have hundreds or thousands of views, depending on the size of your user base.</p>
<p>What about the idea that a page does offer useful features, but people don&#8217;t know about it?  If you think that this is why it&#8217;s unused, then you need to find a better place to link it, or a better way to educate your users.  The bottom line is that it doesn&#8217;t matter how <i>theoretically</i> useful a page is: if no one is using it, then it is not <i>actually</i> useful.</p>
<p>And keep in mind that this tool (and in fact, the entire concept of aggressive feature culling) is most effective not as a one-time event, but as a habit over time.  A page which might have been extremely popular last year could fall into disuse when another page is added which provides similar but slightly improved functionality.</p>
<p>This plugin was the result of just an hour or two of hacking, but I&#8217;ve already been surprised at how useful it has been in my production apps.  New ideas are suggesting themselves as I use it, including watching for unused partials, showing changes over time in a visual fashion, or even trying to look for unused model methods.  For this last item, it&#8217;s been my experience that over time, model start to bristle with methods, many of which are remnants of historic functionality and no longer used, though this will be by far the hardest one to implement.</p>
<p>Another feature that I&#8217;ll try to add soon is a logfile anaylzer which scans production.log in a manner similar to how AWStats processes Apache&#8217;s access.log.  This will allow the importation of historic data, and will also make Axeman more suitable for use on high-traffic, public-facing sites, where hitting an external SQLite database on each pageview may not be acceptable.</p>
<p>A subtle but powerful point that is driven home by the usefulness of this plugin is just how much design is an evolutionary process, not a one-time occurrence.  Of course <a href="http://adam.blogs.bitscribe.net/2006/05/25/just-in-time-design/">I know this</a>, as do most of us, but I&#8217;m finding that Axeman makes it tangible.  Here&#8217;s a piece of code which exists for no other reason than to help the application&#8217;s design change over time.  The only other component I can think of that really acknowledges this is migrations, but these are more at the underlying technical level, rather than at the level of user-facing features.</p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[New Gyre Screencast]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/03/08/new-gyre-screencast/" />
		<id>http://adam.blogs.bitscribe.net/2007/03/08/new-gyre-screencast/</id>
		<updated>2007-03-09T06:43:22Z</updated>
		<published>2007-03-09T06:42:52Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Gyre" />		<summary type="html"><![CDATA[Exploring variables visually with the Gyre console.
]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/03/08/new-gyre-screencast/"><![CDATA[<p><a href="http://gyre.bitscribe.net/screencast/show/console">Exploring variables visually with the Gyre console.</a></p>
]]></content>
	</entry>
		<entry>
		<author>
			<name>adam</name>
					</author>
		<title type="html"><![CDATA[Behavior-Driven Development]]></title>
		<link rel="alternate" type="text/html" href="http://adam.blogs.bitscribe.net/2007/03/02/behavior-driven-development/" />
		<id>http://adam.blogs.bitscribe.net/2007/03/02/behavior-driven-development/</id>
		<updated>2007-03-02T07:23:47Z</updated>
		<published>2007-03-02T07:22:48Z</published>
		<category scheme="http://adam.blogs.bitscribe.net" term="Design" /><category scheme="http://adam.blogs.bitscribe.net" term="TDD" />		<summary type="html"><![CDATA[Behavior-Driven Development (BDD) has been hanging around, tugging gently at my brain for a few months now.  Like most interesting ideas, it&#8217;s only a small evolutionary step from its predecessor, TDD.  But I think it&#8217;s a subtly powerful concept, one that I&#8217;m starting to pay more and more attention to in my work. [...]]]></summary>
		<content type="html" xml:base="http://adam.blogs.bitscribe.net/2007/03/02/behavior-driven-development/"><![CDATA[<p><a href="http://behaviour-driven.org/">Behavior-Driven Development (BDD)</a> has been hanging around, tugging gently at my brain for a few months now.  Like most interesting ideas, it&#8217;s only a small evolutionary step from its predecessor, TDD.  But I think it&#8217;s a subtly powerful concept, one that I&#8217;m starting to pay more and more attention to in my work.  <a href="http://behaviour-driven.org/Introduction">The introduction</a> sums up the evolutionary shift at a personal level:</p>
<blockquote><p>
1. The developer starts writing unit tests around their code using a test framework like JUnit.<br />
2. As the body of tests increases the developer begins to enjoy a strongly increased sense of confidence in their work.<br />
3. At some point the developer has the insight (or are shown) that writing the tests before writing the code, helps them focus on only writing the code that they need.<br />
4. The developer also notices that when they return to some code that they havenâ€™t seen for a while, the tests serve to document how the code works.<br />
5. A point of revelation occurs when the developer realises that writing tests in this way helps them to â€œdiscoverâ€ the API to their code. TDD has now become a design process.<br />
6. Expertise in TDD begins to dawn at the point where the developer realizes that TDD is not about testing, it is about defining behaviour.<br />
7. Behaviour is about the interactions between components of the system and so the use of mocking is a fundamental to advanced TDD.
</p></blockquote>
<p>Word.</p>
]]></content>
	</entry>
	</feed>
