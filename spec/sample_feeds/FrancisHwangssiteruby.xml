<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:fhwang.net,2007:syndicateruby</id>
  <link type="application/atom+xml" rel="self" href="http://fhwang.net/syndicate/ruby.atom"/>
  <title>Francis Hwang's site</title>
  <updated>2008-11-30T15:01:56Z</updated>
  <author>
    <name>Francis Hwang</name>
    <uri>http://fhwang.net/</uri>
  </author>
  <entry>
    <id>tag:fhwang.net,2008-11-30:BlogPost158</id>
    <published>2008-11-30T15:01:56Z</published>
    <updated>2008-11-30T15:01:56Z</updated>
    <title>Testing heresies video</title>
    <content type="html">&lt;embed src='http://rubyconf2008.confreaks.com/player.swf' height='260' width='640' allowscriptaccess='always' allowfullscreen='true' flashvars='file=http%3A%2F%2Frubyconf2008.confreaks.com%2Fvideos%2Ftesting-heresies-small.mp4&amp;#38;image=images%2Ftesting-heresies-preview.jpg&amp;#38;plugins=viral-1'/&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2008/11/30/Testing-heresies-video"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2008-09-14:BlogPost147</id>
    <published>2008-09-14T14:36:35Z</published>
    <updated>2008-09-14T14:36:35+00:00</updated>
    <title>Talk at RubyConf 2008: Testing Heresies</title>
    <content type="html">&lt;p&gt;So, I&amp;#8217;m speaking again at &lt;a href="http://www.rubyconf.org/"&gt;RubyConf&lt;/a&gt; this year. If I&amp;#8217;m remembering correctly this will be the fourth RubyConf talk I give. I wonder where that ranks me? Someone really ought to maintain a leaderboard or something.&lt;/p&gt;


	&lt;p&gt;These days, my RubyConf proposal strategy is to submit the loopiest talk idea I can think of that is 1) interesting to me and 2) could possibly be worthy of talking about for an hour in front of more than a hundred people. Then if I get approved, I cobble the talk together with great effort, and tons of practicing. It works out, except for the fact that I&amp;#8217;m sure my neighbors think I&amp;#8217;m completely meshuggeneh by now, sitting in my apartment talking to myself about computers. People seemed to enjoy &lt;a href="http://rubyconf2007.confreaks.com/d2t1p7_conversations_vs_laws.html"&gt;last year&amp;#8217;s talk&lt;/a&gt;, at least.&lt;/p&gt;


	&lt;p&gt;This year&amp;#8217;s talk is &lt;a href="http://www.rubyconf.org/talks/30"&gt;Testing Heresies&lt;/a&gt;. Obviously you&amp;#8217;ve probably heard plenty of talks about testing but I hope to stir up the orthodoxy a little bit.&lt;/p&gt;


	&lt;p&gt;Now, the tricky thing about speaking at RubyConf these days is that there are multiple tracks, and there&amp;#8217;s always a little competition for people to come see your presentation. You can see from the &lt;a href="http://www.rubyconf.org/talks"&gt;full agenda&lt;/a&gt; that I&amp;#8217;m up against &lt;a href="http://www.rubyconf.org/talks/34"&gt;NeverBlock, trivial non-blocking IO for Ruby&lt;/a&gt; and Ruby Persistence in MagLev, both of which sound pretty great. But if I may indulge in a bit of cross-track smack talk: Yeah, those guys wrote some impressive code, but who&amp;#8217;s gonna have funnier pictures?&lt;/p&gt;


	&lt;p&gt;Though I should offer a disclaimer, that so far, I have not yet thought of a way to have a slide involving the legal definition of &amp;#8220;buttocks&amp;#8221;. Working on it, though.&lt;/p&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2008/09/14/Talk-at-RubyConf-2008-Testing-Heresies"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2008-07-18:BlogPost135</id>
    <published>2008-07-18T00:52:27Z</published>
    <updated>2008-07-18T00:52:27+00:00</updated>
    <title>validates_with_block</title>
    <content type="html">In one of our Rails projects at Diversion Media, our models can get pretty big with validations -- one in particular has almost 20. It ends up being pretty noisy having all those repeated words:

&lt;pre&gt;
class User &lt; ActiveRecord::Base
  validates_presence_of   :login, :message =&gt; 'Please enter a login.'
  validates_uniqueness_of :login, :case_sensitive =&gt; false
  validates_format_of     :login, :with =&gt; /\A\w*\Z/
  validates_length_of     :login, :within =&gt; 4..15
end
&lt;/pre&gt;

So, we wrote &lt;a href="http://github.com/fhwang/validates_with_block/tree/master"&gt;validates_with_block&lt;/a&gt;, a Rails plugin that allows you to write a more readable set of validations for one model.

&lt;pre&gt;
class User &lt; ActiveRecord::Base
  validates_login do |login|
    login.present   :message =&gt; 'Please enter a login.'
    login.unique    :case_sensitive =&gt; false
    login.formatted :with =&gt; /\A\w*\Z/
    login.length    :within =&gt; 4..15
  end
end
&lt;/pre&gt;

These methods just call the same old &lt;code&gt;validates_*&lt;/code&gt; methods; they don't do anything interesting with ActiveRecord beyond that. It's just for keeping things readable, but sometimes readability takes a little extra work.</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2008/07/18/validates_with_block"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-12-15:BlogPost132</id>
    <published>2007-12-15T20:34:20Z</published>
    <updated>2007-12-15T20:34:20+00:00</updated>
    <title>Conversations vs. Laws</title>
    <content type="html">&lt;div&gt;&lt;p&gt;The full &lt;a href="http://rubyconf2007.confreaks.com/"&gt;RubyConf videos&lt;/a&gt; are now up. Included in this batch is my talk, &lt;a href="http://rubyconf2007.confreaks.com/d2t1p7_conversations_vs_laws.html"&gt;&amp;#8220;Conversations vs. Laws: What do we mean when we say Ruby is dynamic?&amp;#8221;&lt;/a&gt; I got to jam in a bunch of tangential interesting ideas, and somehow found a receptive audience to them. The only blemish on the experience was that Laurent Sansonetti was giving his &lt;a href="http://rubyconf2007.confreaks.com/d2t2p4_osx_loves_ruby.html"&gt;&lt;span class="caps"&gt;OS X&lt;/span&gt; and Ruby talk&lt;/a&gt; in the other room, so I had to miss that. Good thing for video.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/12/15/Conversations-vs-Laws"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-11-17:BlogPost131</id>
    <published>2007-11-17T04:55:24Z</published>
    <updated>2007-11-17T04:55:24+00:00</updated>
    <title>RubyConf 2007 talk (slides only)</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Video for the RubyConf 2007 talks is coming, or so we&amp;#8217;ve been told: The good folks at &lt;a href="http://www.confreaks.com/"&gt;Confreaks&lt;/a&gt; seem to be churning away at what is most likely a massive post-production job. I&amp;#8217;ll be sure to point to the video of my talk when it&amp;#8217;s out.&lt;/p&gt;


	&lt;p&gt;In the meantime, here&amp;#8217;s a dorky game we can play: If you didn&amp;#8217;t see my talk at RubyConf, &lt;a href="/pdf/cvl.pdf"&gt;download the &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt; of my slides, and then try to figure out what the hell I was talking about. &lt;a href="/blog/114.html"&gt;As I&amp;#8217;ve said before&lt;/a&gt;, my talk slides are usually this confusing without the accompanying talk. Is it hopelessly smug to suggest that this should be the case for more talks?&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/11/17/RubyConf-2007-talk-slides-only"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-11-07:BlogPost129</id>
    <published>2007-11-07T03:46:35Z</published>
    <updated>2007-11-07T03:46:35+00:00</updated>
    <title>RubyConf 2007</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Another year, another &lt;a href="http://rubyconf.org/"&gt;RubyConf&lt;/a&gt;. 2007 was bigger than last year, maybe with an attendance of 500 people, and it&amp;#8217;s hard to say if it&amp;#8217;s kept any of its intimacy. The new semi-two-track approach (single-track in the morning, double-track in the afternoons) seems a good middle-ground to me. The only problem is that it&amp;#8217;s probably nigh-impossible to predict demand when you&amp;#8217;ve got two tracks. There were many afternoon slots in which one of the rooms was packed, the air dense with nerd-musk. Not a good thing.&lt;/p&gt;


	&lt;p&gt;The conference program overall seemed to have a highly theoretical, philosphical focus: &lt;a href="http://www.vernix.org/"&gt;Marcel Molina&lt;/a&gt; talked about beauty in code, &lt;a href="http://madstop.com/"&gt;Luke Kanies&lt;/a&gt; talked about G&amp;#246;del&amp;#8217;s incompleteness theorem, and then I talked about post-structuralism and dynamic typing. I was genuinely prepared to have the talk with the least amount of code, but then Luke had none at all, so there you go. Anyway, I enjoyed this aspect of the conference. It&amp;#8217;s like we&amp;#8217;re becoming a sort of &lt;span class="caps"&gt;OOPSLA&lt;/span&gt;-lite, which is preferable to becoming the next Java One.&lt;/p&gt;


	&lt;p&gt;I left this conference excited about the year ahead, for lots of different reasons:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;The one-two punch of &lt;a href="http://jruby.codehaus.org/"&gt;JRuby&lt;/a&gt;, which will tempt more of the enterprise world into Ruby-land, and &lt;a href="http://rubini.us/"&gt;Rubinius&lt;/a&gt;, which will make it easy for programmers to contribute to an implementation without being C wizards.&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://rspec.rubyforge.org/'s"&gt;RSpec&lt;/a&gt; upcoming Story framework, in which high-level tests can get expressed in re-usable, described blocks. I don&amp;#8217;t have the problem of needing to make these tests readable and writeable by non-techies, but I sure do have a lot of too-long integration tests in the Rails apps I write.&lt;/li&gt;
		&lt;li&gt;&lt;a href="http://rubyforge.org/projects/treetop/"&gt;Treetop&lt;/a&gt;, an easy-looking &lt;span class="caps"&gt;DSL&lt;/span&gt; for text parsing. I don&amp;#8217;t know much about parsing and am not sure when I&amp;#8217;d use Treetop, but it certainly seemed simple.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;I also ended up leaving with a few questions that will have to be explored further:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Is my sense of testing completely different from that of others? Why is it that nobody seems to feel the same about mocking and stubbing as I do? Why am I fine with writing less longer tests instead of lots of shorter tests? I have a feeling that I&amp;#8217;m writing good tests, and that other people are writing good tests, but that there are nonetheless some fundamentally different mental models being employed here.&lt;/li&gt;
		&lt;li&gt;What&amp;#8217;s up with the resurgence of attempts to transparently map Ruby to &lt;span class="caps"&gt;SQL&lt;/span&gt;? &lt;a href="http://onestepback.org/"&gt;Jim Weirich&lt;/a&gt; brought it up during his talk as a learning exercise only, but a later Google search reveals &lt;a href="http://errtheblog.com/post/11998"&gt;Ambition&lt;/a&gt;. Having gone partway down this path years ago with &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio&lt;/a&gt;, I&amp;#8217;m not sure what to think. Ambition seems to use &lt;a href="http://rubyforge.org/projects/parsetree/"&gt;ParseTree&lt;/a&gt;, which would overcome some of the limitations of Lafcadio&amp;#8217;s approach. But working with Ruby query inference in Lafcadio made me wonder if the idea&amp;#8217;s a good thing at all. More on this later &amp;#8230;&lt;/li&gt;
	&lt;/ul&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/11/07/RubyConf-2007"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-09-09:BlogPost128</id>
    <published>2007-09-09T14:19:03Z</published>
    <updated>2007-09-09T14:19:03+00:00</updated>
    <title>Speaking at RubyConf</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I&amp;#8217;ll be &lt;a href="http://www.rubyconf.org/agenda.html"&gt;speaking at RubyConf&lt;/a&gt; again this year, for the third time. The title of my talk is &amp;#8220;Conversations vs. Laws: What do we mean when we say Ruby is dynamic?&amp;#8221;, and it&amp;#8217;s basically going to be a potpourri of random ideas that may or may not be related to software engineering, such as Islamic art, restorative justice, anarchism, queer theory, and Platonism.&lt;/p&gt;


	&lt;p&gt;Ruby-interested readers will probably have noticed that my contribution to open source in the form of code has dropped like a stone in the past few years, so when I was thinking about doing a talk this year, a more abstract subject seemed like my best bet. Of course, now that my talk has been accepted I have to actually research the thing, and now I&amp;#8217;m thinking it might&amp;#8217;ve been easier just to write a few thousand lines of code &amp;#8230;&lt;/p&gt;


	&lt;p&gt;RubyConf is from November 2-4, and it &lt;a href="http://www.regonline.com/Checkin.asp?EventId=145820"&gt;looks like tickets are still on sale&lt;/a&gt;. Tickets sold out last year within hours, so if you&amp;#8217;re interested in going this year, you should buy immediately.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/09/09/Speaking-at-RubyConf"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-05-27:BlogPost124</id>
    <published>2007-05-27T15:07:58Z</published>
    <updated>2007-05-27T15:07:58+00:00</updated>
    <title>(Very late) GoRuCo wrapup</title>
    <content type="html">&lt;div&gt;&lt;p&gt;So, the first &lt;a href="http://www.goruco.com/"&gt;GoRuCo&lt;/a&gt; came and went more than a month ago, and not a peep out of me here. What can I say? I was tired.&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;ve been going to Ruby conferences for four years, and at each conference there&amp;#8217;s always a point where I find myself wondering what happens in the next 12 months as a consequence. What new collaborations take shape? What new opinions get formed? What changes? What stays the same?&lt;/p&gt;


	&lt;p&gt;A month later, there are a few developments that GoRuCo might have played a part in:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;After we announced that GoRuCo would be &lt;a href="http://www.goruco.com/articles/2007/04/21/carbon-offsets/"&gt;offsetting its carbon emissions&lt;/a&gt;, &lt;span class="caps"&gt;NYC&lt;/span&gt; Rubyist &lt;a href="http://www.johnmurch.com/"&gt;John Murch&lt;/a&gt; started green-tech blog &lt;a href="http://www.hippygreen.com/"&gt;Hippy Green&lt;/a&gt;. Certainly we&amp;#8217;re not the only Ruby or Rails conference that&amp;#8217;s charitably-minded: RailsConf, for one, &lt;a href="http://pragdave.pragprog.com/pragdave/2007/05/paying_back.html"&gt;raised $33k for charitable causes this year&lt;/a&gt;. We chose to donate as an organization, forcing attention on an issue: RailsConf&amp;#8217;s decision to let attendees make a choice focuses more on the act of giving itself. All around a good bandwagon to have.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;I feel like almost every time the organizers met, we ended up talking about gender in the Ruby community, possibly at my prodding. So I was happy to see organizer Gregory Brown later bring up the subject on the &lt;a href="http://www.oreillynet.com/ruby/blog/2007/05/ruby_and_women.html"&gt;O&amp;#8217;Reilly Ruby blog&lt;/a&gt;, which spawned lots of healthy discussion. Tim Bray brought this up again at RailsConf and &lt;a href="http://www.tbray.org/ongoing/When/200x/2007/05/19/RailsConf#p-1"&gt;blogged about it, too&lt;/a&gt;. I&amp;#8217;m with both of them. The gender disparity is a big problem, and it needs to be fixed. And, by the way, &lt;span class="caps"&gt;IRC&lt;/span&gt; comments like &lt;a href="http://dyepot-teapot.com/2007/05/19/railsconf-notes-so-far/"&gt;&amp;#8220;if we wanted women we would have become nurses&amp;#8221;&lt;/a&gt; don&amp;#8217;t help.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Without giving away too much, I will say that one prominent Rubyist seemed to be having a great time with us at the afterparty and out on the town after we closed the bar. Later he moved back to New York. Coincidence?&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;While all the talks were buzz-worthy, the one that seemed to most buzz-worthy in the &amp;#8220;I could start building something with that next week&amp;#8221; sense was Jay Phillips&amp;#8217; VoIP framework &lt;a href="http://adhearsion.com/"&gt;Adhearsion&lt;/a&gt;. I wonder if anybody in &lt;span class="caps"&gt;NYC&lt;/span&gt; has built any Adhearsion apps yet? Let me know if you have.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/05/27/Very-late-GoRuCo-wrapup"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-04-20:BlogPost123</id>
    <published>2007-04-20T17:18:37Z</published>
    <updated>2007-04-20T17:18:37+00:00</updated>
    <title>GoRuCo 2007 tomorrow</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Less than 24 hours from now, we&amp;#8217;ll kick off the first ever &lt;a href="http://www.goruco.com/"&gt;Gotham Ruby Conference&lt;/a&gt;, at Google&amp;#8217;s Chelsea offices. I&amp;#8217;m pretty excited about the talks and about all the people coming together for this event, even though there are still a hundred things to worry about between now and when we open the doors at 9 a.m. tomorrow.&lt;/p&gt;


	&lt;p&gt;The conference has been sold out for a while, but if you&amp;#8217;re in the area and want to stop through, you might want to know that the &lt;a href="http://www.goruco.com/about/afterparty"&gt;afterparty&lt;/a&gt; is open to the public. It&amp;#8217;s at The Musical Box, on Avenue B between 13th and 14th Streets. As a non-attendee, you don&amp;#8217;t get any drink tickets, but there will be lots around. You&amp;#8217;ll probably be able to mooch a few.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/04/20/GoRuCo-2007-tomorrow"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-04-06:BlogPost121</id>
    <published>2007-04-06T04:19:54Z</published>
    <updated>2007-04-06T04:19:54+00:00</updated>
    <title>On GoRuCo, and chix who dev</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Thanks to Shari Halter for interviewing me over on &lt;a href="http://www.devchix.com/2007/03/18/interview-with-francis-hwang-february-17-and-28-2007/"&gt;DevChix&lt;/a&gt;. I won&amp;#8217;t claim to be much of a chik myself but I like what they&amp;#8217;re trying to do on their site.&lt;/p&gt;


	&lt;p&gt;One of the things discussed in the interview, of course, is &lt;a href="http://www.goruco.com/"&gt;GoRuCo&lt;/a&gt;, which is sold out. Out of 120 seats, I believe we have 7 women&amp;#8212;actually a better ratio than many other Ruby and Rails conferences, but that&amp;#8217;s not much of an accomplishment.&lt;/p&gt;


	&lt;p&gt;I don&amp;#8217;t feel as if I have any special insight as to why the gender gap in our field is so persistent, and I probably wouldn&amp;#8217;t say that it&amp;#8217;s anybody&amp;#8217;s fault in particular. But it&amp;#8217;s a serious problem&amp;#8212;any field that&amp;#8217;s so stupidly lopsided is bound to miss important perspectives&amp;#8212;and it&amp;#8217;s not going to go away in one broad stroke. The imbalance will be with us for a long time, but that&amp;#8217;s no reason to ignore it.&lt;/p&gt;


	&lt;p&gt;How to fix it? Hard to say. GoRuCo doesn&amp;#8217;t do anything overt in our treatment of the issue, and if anything I think that most of the work to be done, at least locally, is at the &lt;span class="caps"&gt;NYC&lt;/span&gt;.rb level and not the GoRuCo level. It&amp;#8217;s probably not about a few grand steps taken at once, but about a lot of little steps taken over months or years. Maybe that&amp;#8217;s vague, but my thoughts on this are still coalescing and I&amp;#8217;m always loathe to talk about things I &lt;em&gt;might&lt;/em&gt; do in the future. But check in with &lt;span class="caps"&gt;NYC&lt;/span&gt;.rb in a year and see how we&amp;#8217;re doing &amp;#8230;&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/04/06/On-GoRuCo-and-chix-who-dev"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2007-02-04:BlogPost120</id>
    <published>2007-02-04T21:02:48Z</published>
    <updated>2007-02-04T21:02:48+00:00</updated>
    <title>Gotham Ruby Conference</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I already posted this on ruby-talk a few days ago, but it bears re-posting: We&amp;#8217;re hosting a regional Ruby conference in New York City on April 21st.&lt;/p&gt;


&lt;blockquote&gt;
The &lt;a href="http://goruco.com/"&gt;Gotham Ruby Conference&lt;/a&gt; is a one-day Ruby conference that will take place in New York City on Saturday, April 21st.

	&lt;p&gt;The lineup of speakers has yet to be determined, and will be determined with an open call for proposals. There will be six speakers, and an open lightning round for short talks. Speakers will receive free admission to the conference, an honorarium, and travel stipends are available as well.&lt;/p&gt;


	&lt;p&gt;Registration attendance is limited to 120 people. Tickets are $100 each. Registration will be open within the next few weeks.&lt;/p&gt;


	&lt;p&gt;The conference will be held at Google&amp;#8217;s office in Manhattan. Breakfast and lunch will be provided.&lt;/p&gt;


	&lt;p&gt;To keep up with conference updates, subscribe to our &lt;a href="http://goruco.com/rss/"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;.&lt;/p&gt;


GoRuCo is a joint effort by volunteers from &lt;a href="http://nycruby.com/wiki"&gt;&lt;span class="caps"&gt;&lt;span class="caps"&gt;NYC&lt;/span&gt;&lt;/span&gt;.rb&lt;/a&gt; and the &lt;a href="http://newhavenrubyists.stikipad.com/wiki/"&gt;New Haven Ruby Brigade&lt;/a&gt;.
&lt;/blockquote&gt;

	&lt;p&gt;Local Rubyists should check out the &lt;a href="http://goruco.com/articles/2007/01/31/call-for-presentations/"&gt;Call For Proposals&lt;/a&gt;: At least 3 out of the 6 speaker slots for residents of New York, New Jersey and Connecticut. The deadline is March 1st.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2007/02/04/Gotham-Ruby-Conference"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-11-26:BlogPost117</id>
    <published>2006-11-26T22:39:32Z</published>
    <updated>2006-11-26T22:39:32+00:00</updated>
    <title>Starting a local Ruby group</title>
    <content type="html">&lt;div&gt;&lt;p&gt;&lt;a href="http://tech.groups.yahoo.com/group/ruby-nyc/"&gt;Ruby-NYC&lt;/a&gt; held its first meeting in February 2004, in the conference room of the &lt;a href="http://www.newmuseum.org/"&gt;New Museum of Contemporary Art&lt;/a&gt;. Three people showed up, including myself. Back then, the world of Ruby was much smaller: Rails was but a twinkle in &lt;span class="caps"&gt;DHH&lt;/span&gt;&amp;#8217;s eye, and the &lt;a href="http://rubyconf.org/"&gt;RubyConf&lt;/a&gt; I had attended the previous October was only around 40 people. Two-and-a-half years later, we have up to that many people showing up to our local meetings. I&amp;#8217;m not sure if I can take any credit for it, but it&amp;#8217;s fair to say that Ruby-NYC is a successful Ruby group.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.flickr.com/photos/jcn/157305932"&gt;&lt;img src="/img/ruby_nyc.png" alt="Ruby-NYC, May 30 2006"  style="border-style: none"/&gt;&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;During one of the dinners at this year&amp;#8217;s RubyConf, I sat with two guys from northern Utah who asked me for tips on starting their own local Ruby group. It occurred to me that my experience of helping run Ruby-NYC might be useful to others&amp;#8212;so below, for your consideration, please find my obsessively detailed tips on how you might start your own local Ruby group.&lt;/p&gt;


	&lt;h2&gt;Starting small&lt;/h2&gt;


	&lt;p&gt;Starting a group like this is easy enough: It just requires a few organizational details and a bit of busywork. You need a mailing list and an accompanying website&amp;#8212;we use &lt;a href="http://groups.yahoo.com/"&gt;Yahoo! Groups&lt;/a&gt;, which I like because it&amp;#8217;s got other features like a calendar and a survey tool. Some people like to add a blog aggregator or their own custom web stuff; that&amp;#8217;s cool but the most important things are&lt;/p&gt;


	&lt;ol&gt;
	&lt;li&gt;an email list so group members can talk to each other&lt;/li&gt;
		&lt;li&gt;a website that group members can go to and find the next meeting date&lt;/li&gt;
		&lt;li&gt;a website that will show up when Rubyists who don&amp;#8217;t know about your group do a Google search for, say, &amp;#8220;Northern Utah Ruby&amp;#8221;.&lt;/li&gt;
	&lt;/ol&gt;


	&lt;p&gt;You also need a venue, but if you&amp;#8217;re just starting out you might only have 5 people show up, so that makes finding a venue easy. Anywhere with seats will work, and it&amp;#8217;s nice to have WiFi and electrical sockets. This can be a conference room at somebody&amp;#8217;s office, or a coffeeshop, or even somebody&amp;#8217;s house. Some folks like to meet at bars or restaurants, but I personally think that&amp;#8217;s less-than-ideal because you might not have the sort of space or seating that would allow two people to sit side-by-side looking at code on a laptop. (We do encourage people to bring beer to our meetings, though. So far, we&amp;#8217;ve been lucky enough to avoid any drunken vi-vs.-emacs brawls.)&lt;/p&gt;


	&lt;p&gt;It&amp;#8217;s good to set a regular schedule early on, so people can schedule your group meeting into their lives. Personally I think once a month is good when you&amp;#8217;re starting out: You want it to be a regular part of people&amp;#8217;s lives, but not so often that it feels like you&amp;#8217;re trying to start a cult. Ask for opinions on the mailing list&amp;#8212;this is a good use for that silly survey tool on Yahoo! Groups&amp;#8212;and then set a schedule like &amp;#8220;the third Wednesday of the month&amp;#8221;.&lt;/p&gt;


	&lt;p&gt;After you&amp;#8217;ve had a meeting&amp;#8212;more on that below&amp;#8212;you send out an email to the list, thanking folks for coming and giving a quick recap of what happened, even if all you did was hang out and kvetch about your boss. (Some discretion may be required, of course.) This is particularly important at the beginning, so people who didn&amp;#8217;t go can be reminded of the cool thing that they missed, and that this is not just some thing that&amp;#8217;s going to fizzle out in a few months. Eventually you&amp;#8217;ll probably stop doing this; I don&amp;#8217;t do it for Ruby-NYC anymore.&lt;/p&gt;


	&lt;p&gt;A few extras that are easy to add:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Starting an &lt;span class="caps"&gt;IRC&lt;/span&gt; room for your group on freenode is an easy way to add to a persistent sense of community, and will be a godsend to those members who are really into the idea of your group but can never attend, whether due to volunteering at a soup kitchen or Lamaze classes with their wives or some other entirely selfish scheduling conflict.&lt;/li&gt;
		&lt;li&gt;O&amp;#8217;Reilly has a free &lt;a href="http://ug.oreilly.com/"&gt;user group program&lt;/a&gt;: We signed up and they&amp;#8217;ve been sending us piles of free books. The expectation is that whoever gets said books will post a quick review somewhere, and although we&amp;#8217;ve been slack on this we&amp;#8217;re going to start raffling them away for free at our next meeting.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;h2&gt;What happens when people show up&lt;/h2&gt;


	&lt;p&gt;So what actually goes on at these meetings? At first, you might not need to structure it at all, since people will be meeting one another and that can be plenty interesting. It&amp;#8217;s probably sufficient to have people go around in a circle and talk about what they do, their interest in Ruby, etc. Yes, it&amp;#8217;s mildly awkward, and you&amp;#8217;ll get a few Alcoholics Anonymous jokes, but it works fine. Just getting a few programmers together to talk shop, that can be an hour or two right there.&lt;/p&gt;


	&lt;p&gt;By your second or third meeting you&amp;#8217;ll probably need something more structured. We do talks. These can be five minutes, or they can be an hour, but no matter what they&amp;#8217;re not going to be formal. I always emphasize that you don&amp;#8217;t have to be an expert, or talking about some insanely difficult library you&amp;#8217;ve been writing furiously for the last two years. This ain&amp;#8217;t RubyConf. It can be enough to just talk about a project you&amp;#8217;ve been working on recently, or even just what you learned when you had to investigate a specific area, such as web services or integrating with Microsoft Excel.&lt;/p&gt;


	&lt;p&gt;Still, these talks probably won&amp;#8217;t materialize on their own, and when a group is starting one of your primary duties as an organizer is to drum them up. This is mostly a matter of pestering the mailing list until somebody breaks down and agrees to do one. Also, it&amp;#8217;s helpful to keep this in the back of your mind while chatting with other members, so you can recognize when people are pursuing specific topics that would be good for a talk: &amp;#8220;Hey Rob, you seem to really be spending a lot of time with Scriptaculous, care to talk about it next month?&amp;#8221;&lt;/p&gt;


	&lt;p&gt;Another nice thing about being small as that you don&amp;#8217;t need much in the way of equipment to support a talk. I&amp;#8217;d say with a group of up to 8, you can get by with the &amp;#8220;over the shoulder&amp;#8221; method: That is, one person gives the presentation right on his laptop with others sitting next to him or standing behind him.&lt;/p&gt;


	&lt;p&gt;A lot of people ask about doing projects as part of the group, but that&amp;#8217;s not something we&amp;#8217;ve ever done. Sure, we&amp;#8217;ve got plenty of members with their own projects. Zed Shaw wrote most of &lt;a href="http://mongrel.rubyforge.org/"&gt;Mongrel&lt;/a&gt; while he was a New Yorker, and we&amp;#8217;ve got &lt;a href="http://locomotive.raaum.org/"&gt;Locomotive&amp;#8217;s&lt;/a&gt; Ryan Rauum and &lt;a href="http://spec-unit.rubyforge.org/"&gt;SpecUnit&amp;#8217;s&lt;/a&gt; Trotter Cashion. Greg Brown of &lt;a href="http://ruport.infogami.com/"&gt;Ruport&lt;/a&gt; fame doesn&amp;#8217;t even live in &lt;span class="caps"&gt;NYC&lt;/span&gt; but he comes down as often as anybody else.&lt;/p&gt;


	&lt;p&gt;And yet people don&amp;#8217;t work on these projects much at our meetings, and there&amp;#8217;s not a lot of project collaboration happening within our group. It may be because anybody who wants to be involved in an extracurricular project is already involved in one or two or three. (This factor may be &lt;span class="caps"&gt;NYC&lt;/span&gt;-specific.) It may also be because a lot of people don&amp;#8217;t want to come to a user&amp;#8217;s group if there&amp;#8217;s any sense of obligation&amp;#8212;they&amp;#8217;ve already got a job, after all.&lt;/p&gt;


	&lt;h2&gt;Growing pains&lt;/h2&gt;


	&lt;p&gt;It took Ruby-NYC more than a year to have 10 people show up to a meeting, but it&amp;#8217;s quite possible that your Ruby group will grow more quickly than that. As with anything, scaling brings its own challenges, but they&amp;#8217;re quite manageable.&lt;/p&gt;


	&lt;p&gt;The biggest one is getting a dedicated space, which might be necessary once you start topping 10 or 15. Your best be is probably to look for a local tech company that has a conference room to spare. There&amp;#8217;s no secret to this, really: You just nicely ask every company that comes to mind. Remember that good programmers of any kind are hard to find, so many companies are happy to support something like this. In our case, we&amp;#8217;re hosted by &lt;a href="http://bway.net/"&gt;Bway.net&lt;/a&gt;, a cool independent &lt;span class="caps"&gt;ISP&lt;/span&gt; which also hosts &lt;a href="http://www.nycwireless.net/articles"&gt;&lt;span class="caps"&gt;NYC&lt;/span&gt; Wireless&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;As your group grows, you&amp;#8217;ll also need a projector for presentations. A good projector is expensive, so it&amp;#8217;s best to avoid buying one if you can. If you can find some company to buy it for you in return for a sponsorship of some kind, that&amp;#8217;s great. Or maybe you can find a local company, like a Rails shop, that&amp;#8217;d be happy to split the purchase with the group. In our case, Bway has a projector that we rent for a nominal fee.&lt;/p&gt;


	&lt;p&gt;If the group gets really big, or your space is noisy&amp;#8212;like if there&amp;#8217;s an older air conditioning unit that&amp;#8217;s on in the summer&amp;#8212;you might need a mini-P.A., but these aren&amp;#8217;t as expensive as a projector. I bought us a &lt;a href="http://www.dsmiller.com/html/Electronics-PA-DJ-Components-PA-Systems-P-10W-069-1120-002.htm"&gt;portable P.A. and wireless microphone&lt;/a&gt;: The wireless mic comes in handy since you can pass it around if there&amp;#8217;s a lot of discussion at the end of a talk. It&amp;#8217;s not a trivial expense, but since I bought it, I&amp;#8217;ve been passing the hat every meeting and slowly getting my money back in donations.&lt;/p&gt;


	&lt;p&gt;As the group grows, you may want to meet twice a month or even every week&amp;#8212;we meet twice a month, with the first meeting of the month being an unstructured &amp;#8220;hackfest&amp;#8221; and the last meeting more structured, with talks and an agenda and all that. And don&amp;#8217;t forget name tags. They&amp;#8217;re unbelievably dorky, but it&amp;#8217;s a lot easier for people to get to know each other when they&amp;#8217;re not wrestling with embarrassment about forgetting one another&amp;#8217;s names.&lt;/p&gt;


	&lt;h2&gt;Or, not growing&lt;/h2&gt;


	&lt;p&gt;On the other hand, maybe your group will stay small. Ruby will probably keep growing for a while, but in some places you&amp;#8217;ll run into basic demographic limits. So you might be asking yourself: If it stays small, is it worth the trouble?&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;d say that it is. Now that Ruby-NYC is fairly big, I enjoy helping to organize it, but I enjoyed it when it was small, too. Before we needed a projector and had speakers popping in from other cities, I was still meeting all sorts of interesting people, and getting into lots of thought-provoking discussions once a month.&lt;/p&gt;


	&lt;p&gt;And in our field, that sort of regular contact can be hard to come by. Software engineering can be a fascinating, rewarding field, but with all the things programmers have to put up with&amp;#8212;poor management, unrealistic deadlines, uninspiring business decisions&amp;#8212;it can also be frustrating and isolating. But if you&amp;#8217;re in it for the long haul, if software is what you do, then you&amp;#8217;re going to have to figure out how to enjoy it, how to not burn out, and even how to take pride in the code that you commit.&lt;/p&gt;


	&lt;p&gt;Maybe you&amp;#8217;re lucky, and you already have a group of folks that you can talk about these things with. But if you don&amp;#8217;t, that&amp;#8217;s not going to change. Not unless somebody comes along and changes it. And who knows? Maybe that somebody is you.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/11/26/Starting-a-local-Ruby-group"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-10-27:BlogPost115</id>
    <published>2006-10-27T00:30:21Z</published>
    <updated>2006-10-27T00:30:21+00:00</updated>
    <title>RubyConf 2006</title>
    <content type="html">&lt;div&gt;&lt;p&gt;For the fourth year in a row, I spent an entire weekend in a hotel with a bunch of guys with laptops. It was &lt;a href="http://rubyconf.org/"&gt;RubyConf&lt;/a&gt;, of course, and as always I found it to be educational and thought-provoking.&lt;/p&gt;


	&lt;p&gt;When I went to my first RubyConf, in Austin in 2003, the scene was quite different: Rails didn&amp;#8217;t exist, and most of the 50-or-so Rubyists in attendance had to program in another language at their day job. For RubyConf 2006, the 250 tickets sold out in a matter of hours. It&amp;#8217;s a much bigger language now, and as it grows it tackles different problems on different scales.&lt;/p&gt;


	&lt;p&gt;One example: This year&amp;#8217;s recurring theme was that of alternate implementations, as represented by non-Matz projects such as JRuby, RubyCLR, Rubinius, and Cardinal. Some of the attendees convened an &lt;a href="http://on-ruby.blogspot.com/2006/10/rubyconf-2006-implementers-summit.html"&gt;implementers summit&lt;/a&gt;, to reduce duplication of effort and slowly converge on a unified test suite.&lt;/p&gt;


	&lt;p&gt;That these implementations are of Ruby 1.8 nicely complements the work on Ruby 2.0. In his &lt;a href="http://www.travelistic.com/video/show/985"&gt;keynote&lt;/a&gt;, Matz reiterated a point from the year before: That Ruby 1.8 is good enough a language to work in today, so delays in the arrival of Ruby 2.0 shouldn&amp;#8217;t be a matter of concern. In the past I&amp;#8217;d worried that this was just hand-waving&amp;#x2014;forget about new syntax, what about better garbage collection, concurrency, etc.?&amp;#x2014;but this year put many of my anxieties to rest. What Matz is leaving unsaid is that he prefers to be a language designer, not an implementer, and that Ruby is now big enough that Matz can fulfill a narrower role in its development. Harder implementation questions belong to others now, whether that&amp;#8217;s Sasada Koichi, who&amp;#8217;s in charge of the Ruby 2.0 virtual machine, or those working on the aforementioned alternative implementations of 1.8.&lt;/p&gt;


	&lt;p&gt;As the community grows, its makeup shifts slowly every year. One indication of these shifts was Joe O&amp;#8217;Brien&amp;#8217;s announcement of &lt;a href="http://erubycon.com/"&gt;eRubyCon&lt;/a&gt;, the first ever enterprise-centric Ruby conference. Some of my friends in these Web 2.0 times might consider this a distasteful development, but I think real work gets done in what&amp;#8217;s called &amp;#8220;the enterprise&amp;#8221;, and real work counts for a lot even when it&amp;#8217;s less fun than spending angel money on an Ajax-driven social-networking music-recommendation podcasting-over-SMS startup. Besides, this isn&amp;#8217;t the first change the Ruby community has gone through. During Masayoshi Takahashi&amp;#8217;s &amp;#8220;History of Ruby&amp;#8221; talk, I was reminded of how strange it must have been to have been an original Rubyist in Japan when English-speaking Rubyists started to flood into the community. Once upon a time, Ruby&amp;#8217;s core mailing lists were all in Japanese. Those days are behind us now.&lt;/p&gt;


	&lt;p&gt;The community is still unhealthy in one particular way: There are still far too few women. This year&amp;#8217;s RubyConf had about five women out of 240 attendees&amp;#8212;and while I suspect that our ratios may be only as bad as those in, say, the Perl and Python world, we shouldn&amp;#8217;t content ourselves with that. Of course it&amp;#8217;s hard to say how much men can do about this. I&amp;#8217;ve started to prod the handful of women who come to &lt;a href="http://tech.groups.yahoo.com/group/ruby-nyc/"&gt;Ruby-NYC&lt;/a&gt; to start their own local, women-only programming group, but what&amp;#8217;s prodding good for, really?&lt;/p&gt;


	&lt;p&gt;As for the talks: Others have &lt;a href="http://www.oreillynet.com/ruby/blog/2006/10/blogging_about_rubyconf_2006.html"&gt;blogged extensively&lt;/a&gt; about them so I won&amp;#8217;t go into much detail. The lightning talks were far better than they had any right to be. Zed Shaw&amp;#8217;s talk on fuzzing was great, and his coining of the &lt;a href="http://blog.nicksieger.com/articles/2006/10/24/rubyconf-wrap-up"&gt;&amp;#8220;that guy&amp;#8221;&lt;/a&gt; meme may be the most enduring aspect of the entire conference. One day Ruby may be a passe language, but programmers will still be using the phrase &amp;#8220;that guy&amp;#8221; to heckle each other down at EnterpriseErlang 2023.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.travelistic.com/video/show/1058"&gt;Rich Kilmer&amp;#8217;s talk&lt;/a&gt; on &lt;a href="http://getindi.com/"&gt;Indi&lt;/a&gt; revealed a series of astounding hacks aimed at building a cross-platform, zero-installation Ruby on Rails and Flash app that runs off of a &lt;span class="caps"&gt;USB&lt;/span&gt; drive. (My company, &lt;a href="http://www.diversionblog.com/"&gt;Diversion Media&lt;/a&gt;, was kind enough to get a camera man to videotape both Rich&amp;#8217;s and Matz&amp;#8217; talk.)&lt;/p&gt;


	&lt;p&gt;Tim Bray&amp;#8217;s Unicode talk was entertaining and insightful: I expected from no less given the phenomenally sharp writing on &lt;a href="http://www.tbray.org/ongoing/"&gt;his blog&lt;/a&gt;. He argued that it&amp;#8217;s practically impossible to do automatic capitalization and decapitalization in an automated manner: This provoked a surprising amount of pushback in the Q&amp;#38;A that followed. A debate that isn&amp;#8217;t finished, to be sure.&lt;/p&gt;


	&lt;p&gt;And the conference itself? Still fun, still inspiring, still thought-provoking, still a little exhausting. I would&amp;#8217;ve paid extra for reliable wifi and electricity, and for it not to be out in the &amp;#8216;burbs. As for size, 240 people seemed to be the right balance between keeping it familiar and letting people in. The tickets may have sold out fast, but among the folks I knew everybody who absolutely had to get a ticket (and could afford it) got one. I can&amp;#8217;t imagine this can last forever, but in the meantime, I&amp;#8217;ll see some of you in 2007, somewhere on the East Coast.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/10/27/RubyConf-2006"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-10-12:BlogPost114</id>
    <published>2006-10-12T00:00:25Z</published>
    <updated>2006-10-12T00:00:25+00:00</updated>
    <title>On slideware</title>
    <content type="html">&lt;div&gt;&lt;p&gt;A few weeks ago, Geoffrey Grosenbach a.k.a. Topfunky was kind enough to fly me out to give a Ruby talk for the folks at &lt;a href="http://www.zenspider.com/Languages/Ruby/Seattle/index.html"&gt;Seattle.rb&lt;/a&gt;. I&amp;#8217;ll be giving a reprise of this talk, titled &amp;#8220;The &lt;span class="caps"&gt;API&lt;/span&gt; Construction Set&amp;#8221;, in a few weeks at &lt;a href="http://tech.groups.yahoo.com/group/ruby-nyc/"&gt;Ruby-NYC&lt;/a&gt;. But if you absolutely can&amp;#8217;t wait, you could go check out Geoff&amp;#8217;s blog, where he&amp;#8217;s &lt;a href="http://nubyonrails.topfunky.com/articles/2006/10/04/assorted-good-stuff"&gt;just posted the audio and &lt;span class="caps"&gt;PDF&lt;/span&gt; slides&lt;/a&gt; of the talk.&lt;/p&gt;


	&lt;p&gt;I know it&amp;#8217;s the convention for everybody to post slides after giving a talk, but I&amp;#8217;ve always suspected that my slides are much less useful than most. If you&amp;#8217;ve seen me talk before, you probably wouldn&amp;#8217;t be surprised to hear that I&amp;#8217;ve read &lt;a href="http://www.edwardtufte.com/tufte/powerpoint"&gt;Edward Tufte&amp;#8217;s anti-PowerPoint rant&lt;/a&gt; a few times, and I try to keep it in mind when I&amp;#8217;m preparing a talk. There&amp;#8217;s nothing worse than watching somebody read bullet points off of projected slides for an hour straight, so I don&amp;#8217;t have many bullets and most of my content ends up coming out of my mouth, not anywhere on the slide. Of course, with the provided audio you could try listening to the &lt;span class="caps"&gt;MP3&lt;/span&gt; and guessing where I made the slide transitions, but I don&amp;#8217;t know if my words are worth that much effort. I&amp;#8217;d put up with that annoyance if, say, the Buddha gave a lecture on enlightenment at UC Berkeley, but that&amp;#8217;s about it.&lt;/p&gt;


	&lt;p&gt;(Incidentally, is anybody working on video &amp;#38; audio formats that embed metadata for connecting to other applications? Ideally, that audio file would have information that would allow it to drive the &lt;span class="caps"&gt;PDF&lt;/span&gt; slides automatically. And every time I see a video on YouTube that displays a &lt;span class="caps"&gt;URL&lt;/span&gt; on the screen, I think that it&amp;#8217;s a shame I can&amp;#8217;t click on it. If you know of any efforts in this area, please let me know.)&lt;/p&gt;


	&lt;p&gt;One especially tricky aspect of giving this sort of a talk is that when you&amp;#8217;re talking about code, you probably need more resolution than you get on a screen. Many programming problems can&amp;#8217;t be represented in just 15 lines, but that&amp;#8217;s about all you get if you want the guys way in the back to be able to read your examples.&lt;/p&gt;


	&lt;p&gt;Tufte mentions paper handouts, and I&amp;#8217;ve used them in previous talks, but then you can&amp;#8217;t tweak your examples last-minute, not to mention all the avoidable tree-killing. So this time, I prepared a &lt;a href="/rb/api.tar.gz"&gt;downloadable archive of Ruby files&lt;/a&gt;, so the motivated attendee could follow along on his own laptop. That seemed to work okay.&lt;/p&gt;


	&lt;p&gt;Anyway, &lt;span class="caps"&gt;NYC&lt;/span&gt; Rubyists can just come to our next meeting, on October 24. And at some point after that, I hope to actually write the whole thing up into an entry here on this blog. But, you know, there are lots of things I &lt;em&gt;hope&lt;/em&gt; to do.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/10/12/On-slideware"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-09-09:BlogPost113</id>
    <published>2006-09-09T21:06:14Z</published>
    <updated>2006-09-09T21:06:14+00:00</updated>
    <title>Instead of LAMR, how about MyLAR?</title>
    <content type="html">&lt;div&gt;&lt;p&gt;&lt;a href="http://service-architecture.blogspot.com/2006/09/lamr-will-it-catch-on.html"&gt;Steve Jones&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote&gt;
Trouble is when you go Linux, Apache, MySQL, Ruby it becomes the slightly less useful &amp;#8220;LAMR&amp;#8221; and I can&amp;#8217;t quite see anyone standing up and saying &amp;#8220;We are using a &lt;span class="caps"&gt;LAMR&lt;/span&gt; solution rather than the previous Java one&amp;#8221;.
&lt;/blockquote&gt;

	&lt;p&gt;Why not MyLAR? Other than the fact that there&amp;#8217;s an &lt;a href="http://www.eclipse.org/mylar/index.php"&gt;Eclipse plugin with the same name&lt;/a&gt;. Maybe we could get them to change if we asked nicely?&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/09/09/Instead-of-LAMR-how-about-MyLAR"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-07-03:BlogPost109</id>
    <published>2006-07-03T18:14:01Z</published>
    <updated>2006-07-03T18:18:33+00:00</updated>
    <title>Lafcadio 0.9.5: Mending mock transactions, considering continuations</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Today&amp;#8217;s release of &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio&lt;/a&gt;, 0.9.5, is a small one, but it fixes some interesting bugs. I added mock transactions in March, and since then &lt;a href="http://exampler.com/"&gt;Brian Marick&lt;/a&gt; has been really stress-testing it and submitting some superbly detailed bug reports of how the mock transactions aren&amp;#8217;t perfectly mimicking transactions in MySQL and Postgres.&lt;/p&gt;


	&lt;p&gt;For example, 0.9.4 mock transactions would fail if you committed a row and then tried to retrieve that row without leaving the transaction:&lt;/p&gt;


&lt;pre&gt;
Lafcadio::ObjectStore.get_object_store.transaction {
  original = TestUser.new('name' =&amp;gt; 'fred', 'password' =&amp;gt; 'password')
  original.commit
  retrieved = TestUser.get('fred', :name)[0]
  assert_not_nil(retrieved)
}
&lt;/pre&gt;

	&lt;p&gt;To fix that, I had to seriously rejigger the transactional internals. Now Lafcadio clones the state of the ObjectStore (mock or otherwise) when a transaction starts, executes the transaction on that cloned state, and then reassigns some instance variables to use the new state if the transaction is committed. Dag. Transactions are hard, yo.&lt;/p&gt;


	&lt;p&gt;In the middle of that, it occurred to me that this time-machine sort of behavior was reminiscent of exceptions, and could perhaps even be done with &lt;a href="http://wiki.rubygarden.org/Ruby/page/show/Continuations"&gt;continuations&lt;/a&gt;. I&amp;#8217;ve been really into the idea of continuations ever since &lt;a href="http://onestepback.org/"&gt;Jim Weirich&lt;/a&gt; gave a great workshop on the subject at last year&amp;#8217;s &lt;a href="http://www.rubyconf.org/"&gt;RubyConf&lt;/a&gt;, so maybe I&amp;#8217;ll implement the mock transactions with continuations one day.&lt;/p&gt;


	&lt;p&gt;But it&amp;#8217;s worth noting that Jim&amp;#8217;s workshop included a part where we paired up and tried to implement exceptions using continuations, and my partner and I did not get very far. In the case of this Lafcadio release, I just implemented it with more instance variables and a bunch of custom #clone methods. Part of me wonders if continuations are &lt;a href="http://c2.com/cgi/wiki?PropellerBeanie"&gt;propeller-beanie&lt;/a&gt; territory: Theoretically interesting, sure, but too difficult to be useful in a long-term sense. In particular, I&amp;#8217;d worry about somebody else digging into Lafcadio, hoping to write a patch, and getting discouraged by all the obscure magicks going on inside. But then, only a few years ago I might&amp;#8217;ve said the same about method_missing, or Module#included, or, heck, redefining Kernel#require&amp;#8212;and I&amp;#8217;m loving all those techniques today. So, who knows. In the meantime, enjoy this non-continuation-based release.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/07/03/Lafcadio-0-9-5-Mending-mock-transactions-considering-continuations"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-06-11:BlogPost107</id>
    <published>2006-06-11T18:06:56Z</published>
    <updated>2006-06-11T18:06:56+00:00</updated>
    <title>MockFS 0.1.3</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I just released &lt;a href="http://mockfs.rubyforge.org/"&gt;MockFS 0.1.3&lt;/a&gt;. This is a small version, so here&amp;#8217;s the changelog:&lt;/p&gt;


&lt;pre&gt;
0.1.3 -- June 11 2006
* Added support for Dir[], Dir.glob, Dir.rmdir, File.directory?, File.file?,
  File.read
* File.open supports perms in format like 'w', 'r', and 'a'.
* Added RDoc auto-generation to the Gemspec.
* override.rb plays better with Rubygems.
&lt;/pre&gt;

	&lt;p&gt;A bit on that last point: &lt;code&gt;mockfs/override.rb&lt;/code&gt; alters Kernel.require so that you can require virtual files, side-by-side along with real files. Here&amp;#8217;s an example from the RDoc:&lt;/p&gt;


&lt;pre&gt;
require 'mockfs/override'
MockFS.file.open( 'virtual.rb', 'w' ) do |f|
  f.puts "puts 'I am a ruby program living in a virtual file'" 
end
require 'virtual.rb'
require 'rexml'        # real files are still accessible
&lt;/pre&gt;

	&lt;p&gt;I added this because I often encode configuration files as Ruby and then just require them&amp;#8212;this is my preferred method, over &lt;span class="caps"&gt;YAML&lt;/span&gt; or &lt;span class="caps"&gt;XML&lt;/span&gt;, since you can have the configuration info be as unstructured as a Hash or an OpenStruct, or if you need something more rigorous you can build a 20-foot-high &lt;span class="caps"&gt;DSL&lt;/span&gt;, all without ever leaving the file. In these cases it&amp;#8217;s convenient to be able to swap out these configuration files for tests, which is what you get by plugging &lt;code&gt;Kernel.require&lt;/code&gt; into the MockFileSystem. In the last version, this wasn&amp;#8217;t working so well with &lt;a href="http://docs.rubygems.org/"&gt;Rubygems&lt;/a&gt;, so I fixed it.&lt;/p&gt;


	&lt;p&gt;There&amp;#8217;s more than one library mucking about with &lt;code&gt;Kernel.require&lt;/code&gt;, in fact: Off the top of my head I can think of MockFS, Rubygems, Rails&amp;#8217; &lt;a href="http://rubyforge.org/projects/activesupport/"&gt;ActiveSupport&lt;/a&gt;, and my mutant lib &lt;a href="http://fhwang.net/blog/87.html"&gt;urirequire&lt;/a&gt; . It gets crowded in there, but what can I say? It sure is fun to muck around with Ruby&amp;#8217;s innards. KernelRequireConf 2007, anyone?&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/06/11/MockFS-0-1-3"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-04-26:BlogPost104</id>
    <published>2006-04-26T18:11:49Z</published>
    <updated>2006-04-26T18:11:49+00:00</updated>
    <title>NYC needs Ruby/Rails programmers</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Last night we had another &lt;a href="http://nycruby.com/"&gt;Ruby-NYC&lt;/a&gt; meeting, and about 25 people showed up. At the beginning, we let anybody stand up and make a quick announcement, and about eight people stood up and said they were looking to hire Ruby and Rails programmers in the New York City area. Some of them may have found a match at the meeting last night, but most of them probably have not.&lt;/p&gt;


	&lt;p&gt;New York City needs Ruby/Rails programmers, and it needs them badly. What does this mean for you? It means that if you&amp;#8217;re a programmer or web developer, and your job sucks, this could be a way for you to get a job that doesn&amp;#8217;t suck. Ruby and Rails is growing, not just globally but locally as well, as companies ranging from Web 2.0 startups to huge financial firms come around to the productivity, stability, and fun of programming with Ruby and Rails.&lt;/p&gt;


	&lt;p&gt;There&amp;#8217;s a nakedly self-promotional part to this post: &lt;a href="http://www.43things.com/person/bricolage"&gt;Matt Pelletier&lt;/a&gt; and I will be teaching a one-day Ruby and Rails class this Saturday for &lt;a href="http://eastmedia.com/"&gt;EastMedia&lt;/a&gt;. Details and sign-up can be found &lt;a href="http://eastmedia.com/event/index/1"&gt;here&lt;/a&gt;. There&amp;#8217;s plenty of room left in what&amp;#8217;s likely to be a small, hands-on class.&lt;/p&gt;


	&lt;p&gt;But even if you&amp;#8217;re not the type to go in for a one-day class, there&amp;#8217;s plenty else you could do. You could go online and buy some books. Or hell, you could just show up at our meetings and start pestering other people with questions&amp;#8212;we&amp;#8217;re actually quite happy to answer them.&lt;/p&gt;


	&lt;p&gt;C&amp;#8217;mon, what are you waiting for? Java isn&amp;#8217;t going to irritate you any less tomorrow.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/04/26/NYC-needs-Ruby-Rails-programmers"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-03-21:BlogPost100</id>
    <published>2006-03-21T21:28:27Z</published>
    <updated>2006-03-21T21:28:27+00:00</updated>
    <title>Lafcadio 0.9.3: PostgreSQL support, eager loading, more</title>
    <content type="html">&lt;div&gt;&lt;p&gt;The newest development release of &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio&lt;/a&gt;, 0.9.3, now supports PostgreSQL, adds eager loading, and has a few more additions.&lt;/p&gt;


	&lt;p&gt;As always, odd-numbered releases should be considered beta. If you want to play it safe, use 0.8.3 instead.&lt;/p&gt;


	&lt;h2&gt;PostgreSQL support&lt;/h2&gt;


	&lt;p&gt;Lafcadio now supports PostgreSQL. Activating is a simple matter of setting &amp;#8216;dbtype&amp;#8217; in LafcadioConfig:&lt;/p&gt;


&lt;pre&gt;LafcadioConfig.set_values(
  'dbuser' =&amp;gt; 'testuser', 'dbpassword' =&amp;gt; 'password',
  'dbname' =&amp;gt; 'test_db', 'dbhost' =&amp;gt; 'localhost', 'dbtype' =&amp;gt; 'Pg'
)&lt;/pre&gt;

	&lt;p&gt;Everything else&amp;#8212;single-row retrieval, transactions, query inference, order and limit clauses&amp;#8212;works transparently across both MySQL and PostgreSQL.&lt;/p&gt;


	&lt;h2&gt;Eager loading&lt;/h2&gt;


	&lt;p&gt;To prevent excessive selects, you can now use eager loading to load across associations with one select statement:&lt;/p&gt;


&lt;pre&gt;all_invoices = Invoice.all( :include =&amp;gt; :client )
# Knows Client information without incurring another select
all_invoices.first.client.name&lt;/pre&gt;

	&lt;h2&gt;MockObjectStore handles transactions&lt;/h2&gt;


	&lt;p&gt;Transaction support was previously added, in 0.9.0, but I forgot to add transaction support to the MockObjectStore. Now that the MockObjectStore mimics the database, you can test transaction-dependent logic in-memory, within having a real database installed.&lt;/p&gt;


	&lt;p&gt;For example, below is a (somewhat stupid) method that uses transactions, with a test-case using the in-memory MockObjectStore:&lt;/p&gt;


&lt;pre&gt;def transfer_money( from_account, to_account, tr_amount )
  object_store = Lafcadio::ObjectStore.get_object_store
  object_store.transaction do |tr|
    from_account.update!(
      'amount' =&amp;gt; from_account.amount - tr_amount
    )
    to_account.update!( 'amount' =&amp;gt; to_account.amount + tr_amount )
    tr.rollback if from_account.amount &amp;lt; 0
  end
end

class TestTransferMoney &amp;lt; Test::Unit::TestCase
  def test_rollback_if_less_than_zero
    mock_object_store = MockObjectStore.new
    ObjectStore.set_object_store mock_object_store
    from_account = Account.new( 'amount' =&amp;gt; 100.0 ).commit
    to_account = Account.new( 'amount' =&amp;gt; 0.0 ).commit
    transfer_money( from_account, to_account, 200.0 )
    from_account_prime = Account[from_account.pk_id]
    assert_equal( 100.0, from_account_prime.amount )
  end
end&lt;/pre&gt;

	&lt;p&gt;Commits and rollbacks work for the test code, even if you don&amp;#8217;t have a database installed.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/03/21/Lafcadio-0-9-3-PostgreSQL-support-eager-loading-more"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-02-18:BlogPost96</id>
    <published>2006-02-18T12:03:22Z</published>
    <updated>2006-02-18T12:03:22+00:00</updated>
    <title>Ruby/DBI 0.1.0: Not Dead Yet</title>
    <content type="html">&lt;div&gt;&lt;p&gt;After a long, deep slumber of more than 18 months, &lt;a href="http://rubyforge.org/projects/ruby-dbi/"&gt;Ruby/DBI&lt;/a&gt;
 awakens and lumbers forward into the countryside. Rise, Ruby/DBI, rise! Strike terror deep in the hearts of Rubyists everywhere! Ahem.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.ntecs.de/blog"&gt;Michael Neumann&lt;/a&gt; has handed off the reins to &lt;a href="http://djberg96.livejournal.com/"&gt;Daniel Berger&lt;/a&gt;, &lt;a href="http://enigo.com/"&gt;Kirk Haines&lt;/a&gt;, &lt;a href="http://www.hexane.org/"&gt;Patrick May&lt;/a&gt;, and myself. This first release is fairly modest, cleaning up a few small bugs and doing lots of behind-the-scenese reorganization.&lt;/p&gt;


	&lt;p&gt;Please note that 0.1.0 is only a development release, the first of hopefully many as we move towards a bug-free production release. 0.1.0 may contain new and differently irritating bugs than the previous release, 0.0.23.&lt;/p&gt;


	&lt;p&gt;We&amp;#8217;ve got plenty of plans for Ruby-DBI. First and foremost in my mind is the need for stupidly easy installation and configuration, a task that will require extensive coordination among the scattered tribe of Rubyists who have intrepidly written database drivers.&lt;/p&gt;


	&lt;p&gt;But first, we have to clean out all those pesky old bugs, and try not to create new ones. So if you want to help out, you could download &lt;span class="caps"&gt;DBI 0&lt;/span&gt;.1.0 and give it a spin, and report bugs.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/02/18/Ruby-DBI-0-1-0-Not-Dead-Yet"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-02-12:BlogPost95</id>
    <published>2006-02-12T13:14:10Z</published>
    <updated>2006-02-12T13:14:10+00:00</updated>
    <title>The virtuous pain of writing your own manual</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Today&amp;#8217;s release of &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio&lt;/a&gt;, 0.9.2, adds a fairly extensive manual to the documentation. There are various tools you can use to write manuals: I wrote mine in &lt;a href="http://www.docbook.org/"&gt;Docbook&lt;/a&gt; and then used &lt;a href="http://docbook.sourceforge.net/projects/xsl/"&gt;Docbook &lt;span class="caps"&gt;XSL&lt;/span&gt;&lt;/a&gt; stylesheets to publish it to &lt;span class="caps"&gt;HTML&lt;/span&gt;. (Thanks to Patrick for pointing out how he did it for &lt;a href="http://www.ruby-web.org/"&gt;Ruby-Web&lt;/a&gt;.) But this isn&amp;#8217;t really a task where automation can help you much. Writing a manual is a lot of work because writing is a lot of work. This first version took more than a month of my after-work time, which was much longer than I&amp;#8217;d expected, and I&amp;#8217;m already nervous about how soon it will go out of date as Lafcadio development continues.&lt;/p&gt;


	&lt;p&gt;Still, I found the process to be worth the time spent. Writing a manual doesn&amp;#8217;t just help other people use your software. It also forces you, the writer, to take a bird&amp;#8217;s eye view of how your code looks to somebody who&amp;#8217;s never used it, which is so easy to lose in the day-to-day when you&amp;#8217;re plugging away at a list of granular features and bugfixes. Any strange or arbitrary aspects to the interface become more obvious because the pain you feel in having to explain them probably mirrors the pain of others in understanding them. More than once I found myself thinking &amp;#8220;You know, I could just fix this part in the code so that explaining it in the manual wouldn&amp;#8217;t take so many damned words.&amp;#8221;&lt;/p&gt;


	&lt;p&gt;Some programmers will tell you that software should ideally communicate its intentions so well that it wouldn&amp;#8217;t require documents. This belief is strongest, I suspect, among adherents of Agile methods, and I&amp;#8217;d definitely place myself in that camp. But reality often intrudes, and I suspect I&amp;#8217;ll never be able to write any non-trivial software that won&amp;#8217;t need some explaining.&lt;/p&gt;


	&lt;p&gt;In the meantime, I&amp;#8217;ll probably try to keep updating my docs on a regular basis. I think it&amp;#8217;s important to stay close to my users. I wonder what effect it has on the process when you&amp;#8217;re in a large technical team, in Microsoft or a major free-software project, where documentation is often delegated to technical writers. Perhaps this arrangement is unavoidable at a certain scale, but that separation also seems like a pity.&lt;/p&gt;


	&lt;p&gt;One of the many valuable aspects of my tenure at &lt;a href="http://rhizome.org/"&gt;Rhizome&lt;/a&gt; was the fact that for more than three years I did the front-line tech-support for a website with more than 1 million pageviews a month. I learned first-hand how easy it is for non-technical users to find web sites difficult or frustrating or even intimidating. And when I rolled out a new change, I could tell within weeks&amp;#8212;on the anecdotal level at least&amp;#8212;whether it had made people&amp;#8217;s lives easier or harder.&lt;/p&gt;


	&lt;p&gt;After all, who are you writing code for? If you&amp;#8217;re writing it for yourself, then no worries. But plenty of us are trying to write it for others, whether those other people are fellow Rubyists or blog advertisers or hedge fund traders. Our profession has a terrible track record at understanding what others need out of the code we create. If you have ways to get closer to those other people, and to understand how to make their lives easier, then those ways are probably time well spent.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/02/12/The-virtuous-pain-of-writing-your-own-manual"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2006-01-01:BlogPost90</id>
    <published>2006-01-01T22:08:13Z</published>
    <updated>2006-01-01T22:08:13+00:00</updated>
    <title>Redesigning Rhizome</title>
    <content type="html">&lt;div&gt;&lt;p&gt;So I didn&amp;#8217;t post to my blog for more than a month, but I suppose I had a pretty good reason: This past month at &lt;a href="http://rhizome.org/"&gt;Rhizome&lt;/a&gt;, we launched our newly redesigned site. This was a massive project: Rhizome is the most complicated website I have ever worked on, and by my account, my intern Jason and I had to update more than 150 &lt;span class="caps"&gt;PHP&lt;/span&gt; files by hand.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://www.hexane.org/"&gt;Patrick&lt;/a&gt; helped me immensely by giving me tips on clever &lt;span class="caps"&gt;PHP&lt;/span&gt; hackery. You can use &lt;a href="http://www.php.net/ob_start"&gt;ob_start&lt;/a&gt; and &lt;a href="http://www.php.net/register_shutdown_function"&gt;register_shutdown_function&lt;/a&gt; to post-process a page&amp;#8217;s output, and wrap the page&amp;#8217;s unique content in standardized nav junk. When this is combined with &lt;code&gt;php_value auto_prepend_file&lt;/code&gt; in your Apache configuration to automatically prepend your includes, you can drastically reduce the amount of cut-and-paste required in &lt;span class="caps"&gt;PHP&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;#8217;s community is curious: When you first come to the language, it seems as if it were designed to cause spaghetti code, since so much of the documentation focuses on low-level hacks with no interest in design principles. But the &lt;span class="caps"&gt;PHP&lt;/span&gt; language community is a big tent, and on closer inspection there are people laboring away to make elegant components with an inelegant language. Unfortunately, they&amp;#8217;re not easy to see for all the newbie sites, and you might spend years coding &lt;span class="caps"&gt;PHP&lt;/span&gt; without ever seeing them. As Ruby grows, &lt;span class="caps"&gt;PHP&lt;/span&gt; is an example worth studying, and in some ways, worth trying not to emulate.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2006/01/01/Redesigning-Rhizome"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-11-01:BlogPost87</id>
    <published>2005-11-01T22:28:51Z</published>
    <updated>2005-11-01T22:28:51+00:00</updated>
    <title>urirequire: I got yer Web 2.0 right here</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Fellow Rubyists! How many times have you thought to yourself: &amp;#8220;If only there was a more elegant way to download and execute code from all over the internets!&amp;#8221; Well, &lt;a href="http://rubyforge.org/projects/urirequire/"&gt;urirequire&lt;/a&gt; is the lib for you. By hijacking &lt;tt&gt;Kernel.require&lt;/tt&gt;, urirequire makes it a snap to include code from anywhere on the World Wide Whatever. Sure, eval&amp;#8217;ing code that you don&amp;#8217;t own might be dangerous; for all you know, that remote Ruby file could be undefining Class or emailing your ex-girlfriends. But I say it&amp;#8217;s time to get with the bleeding edge! Control of your own code is so February 2005.&lt;/p&gt;


	&lt;h2&gt;Example 1: The absurdly risky &amp;#8216;Hello World&amp;#8217;&lt;/h2&gt;


&lt;pre&gt;
require 'urirequire'
require 'http://fhwang.net/urirequire_test'
&lt;/pre&gt;

	&lt;p&gt;Run this, if you feel lucky. Do ya, punk?&lt;/p&gt;


	&lt;h2&gt;Example 2: Install Hobix in seven less keystrokes&lt;/h2&gt;


&lt;pre&gt;ruby -rurirequire -e "require 'http://go.hobix.com/'"&lt;/pre&gt;

	&lt;p&gt;This installs Hobix, that fantabulous blahhg engine by your friend and mine, why the lucky stiff. Sure, it looks like there&amp;#8217;s a lot of code at that &lt;span class="caps"&gt;URI&lt;/span&gt;, but if you can&amp;#8217;t trust _why, who can you trust? I mean, you trust your mom, and she couldn&amp;#8217;t draw a cartoon fox if her life depended on it.&lt;/p&gt;


	&lt;h2&gt;Taglines which will probably make nobody download my lib but I think are funny anyway&lt;/h2&gt;


	&lt;p&gt;urirequire: The network Pwns the computer!&lt;/p&gt;


	&lt;p&gt;urirequire: Now I&amp;#8217;ll never get that job working for Bruce Schneier.&lt;/p&gt;


	&lt;p&gt;urirequire: It&amp;#8217;s not just a solution looking for a problem. It&amp;#8217;s a solution looking for a victim.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/11/01/urirequire-I-got-yer-Web-2-0-right-here"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-10-18:BlogPost85</id>
    <published>2005-10-18T13:40:36Z</published>
    <updated>2005-10-18T13:40:36+00:00</updated>
    <title>RubyConf 2005, the wrap-up</title>
    <content type="html">&lt;div&gt;&lt;p&gt;RubyConf 2005 is over, and I&amp;#8217;m hanging out in Berkeley at my friend Seng&amp;#8217;s house as I write this. It&amp;#8217;s funny: A few months back, when I heard that RubyConf was going to be three times bigger this year, I was mostly excited but a little uneasy. As communities grow, they can change, and not always for the better. But now that it&amp;#8217;s over, I can&amp;#8217;t think of a single way in which the growth has been bad. Instead, RubyConf this year has given me three times as many mind-blowing conversations, and three times as many smart, chill people to hang out with. Does Ruby scale? Well, so far its community does.&lt;/p&gt;


	&lt;h2&gt;Some highlights of the talks of days 2 and 3&lt;/h2&gt;


	&lt;p&gt;When &lt;a href="http://kevinbaird.net/"&gt;Kevin Baird&lt;/a&gt; gave a talk about his academic project for generative, interactive, avant-garde classical music, more than a few people pitched in with comments based from their own experiences as a composer or performer of contemporary classical music. That&amp;#8217;s a nice overlap to see&amp;#8212;dunno if you&amp;#8217;d find a lot of that at a Java conference.&lt;/p&gt;


	&lt;p&gt;I dug &lt;a href="http://www.mbari.org/staff/brent/"&gt;Brent Roman&amp;#8217;s&lt;/a&gt; talk about using Ruby to control robots used in oceanographic research, if only for the phrase &amp;#8220;Continuous Plankton Recorder.&amp;#8221;  It&amp;#8217;s interesting that a lot of early, pre-Rails adoption in Ruby has been in science and research organizations, including &lt;span class="caps"&gt;NASA&lt;/span&gt;, DARPA and the &lt;span class="caps"&gt;NOAA&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://blog.zenspider.com/"&gt;Ruby Davis&amp;#8217;&lt;/a&gt; &amp;#8220;Polishing Ruby&amp;#8221; talk was basically a show-and-tell of the most jaw-dropping Ruby hacks ever. &lt;a href="http://sourceforge.net/projects/rubyinline/"&gt;RubyInline&lt;/a&gt; lets you write and call C functions within a Ruby file without a separate compile phase. &lt;a href="http://rubyforge.org/projects/parsetree/"&gt;ParseTree&lt;/a&gt; evaluates Ruby code as an S-expression for uses such as dependency analysis and complexity metrics. Et cetera, et cetera. It&amp;#8217;s funny: Before this weekend, us &lt;a href="http://groups.yahoo.com/group/ruby-nyc/"&gt;Ruby-NYC&lt;/a&gt; folks would joke on &lt;span class="caps"&gt;IRC&lt;/span&gt; about taking on other Ruby groups. But based on their role in producing &lt;a href="http://www.zenspider.com/Languages/Ruby/MetaRuby.html"&gt;MetaRuby&lt;/a&gt;, &lt;a href="http://blog.fallingsnow.net/articles/category/Sydney"&gt;Sydney&lt;/a&gt;, and the hacks Ryan talked about, there is no question: If you want to be the hottest Ruby user&amp;#8217;s group, &lt;a href="http://www.zenspider.com/Languages/Ruby/Seattle/"&gt;Seattle&lt;/a&gt; is the one to beat.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://onestepback.org/"&gt;Jim Weirich&lt;/a&gt; gave not one, but two killer talks. (Filling in for &lt;a href="http://richkilmer.blogs.com/"&gt;Rich Kilmer&lt;/a&gt;, I guess.) The first, on domain-specific-languages, made the astute point that non-programmers can easily learn complex DSLs in domains they care about; he illustrated with examples from the worlds of juggling and Rubik&amp;#8217;s Cube. In the process he showed off code that lets you play Rubik&amp;#8217;s Cube in &lt;span class="caps"&gt;IRB&lt;/span&gt;. Crap. My productivity&amp;#8217;s bad enough with Burnout Revenge on my XBox, now I can play Rubik&amp;#8217;s Cube in &lt;span class="caps"&gt;IRB&lt;/span&gt;, too?&lt;/p&gt;


	&lt;p&gt;Later, Jim gave a workshop, with &lt;a href="http://www.chadfowler.com/"&gt;Chad Fowler&lt;/a&gt;, on continuations. Continuations are some of the deepest, darkest magic you can get in Ruby, and the workshop walked us through examples and a programming session to re-implement exceptions using continuations. I understand them a tiny bit better now. With any luck, I&amp;#8217;ll get it right before Ruby 3.6 replaces them with eigen-singleton-bindings.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://atomicobject.com/karlin.page"&gt;Karlin Fox&amp;#8217;s&lt;/a&gt; talk on system testing with &lt;a href="http://atomicobject.com/systir.page"&gt;Systir&lt;/a&gt; combined good DSLs with Systir&amp;#8217;s browser-driven manipulation. Obviously testing is a point of strong interest for me, so I&amp;#8217;ll be keeping an eye on this lib, for sure.&lt;/p&gt;


	&lt;p&gt;&lt;a href="http://talbott.ws/personal/resume.html"&gt;Nathaniel Talbott&lt;/a&gt; gave a thought-provoking talk about niche software, market diversification, and Ruby&amp;#8217;s role in those forces. This was a sort of Web-2.0-Long-Tail-Small-is-Beautiful blender of a talk. Lots of great discussion afterwards, much of which again reminded me that I really do need to read Chad&amp;#8217;s book &lt;cite&gt;&lt;a href="http://www.pragmaticprogrammer.com/titles/mjwti/index.html"&gt;My Job Went to India&lt;/a&gt;&lt;/cite&gt;.&lt;/p&gt;


	&lt;p&gt;And, of course, Matz&amp;#8217; keynote. In his mind, 1.8 is pretty solid, so 2.0 can be a target for &amp;#8220;wild and crazy&amp;#8221; experimentation. He presented a lot of controversial syntax changes, and much debating ensued. Afterwards, some people were expressing surprise that we were allowed to openly debate his suggestions&amp;#8212;he&amp;#8217;s our hacker God-King, isn&amp;#8217;t he infallible? But it&amp;#8217;s been the same in years past. Matz has an aesthetic, not an ideology, and he&amp;#8217;s always been open to having his mind changed.&lt;/p&gt;


	&lt;h2&gt;Some pleasant surprises&lt;/h2&gt;


	&lt;p&gt;One of the nice things about giving a talk is that it&amp;#8217;s a great way to learn more about the subject. After my talk on Friday, a number of people sent me more pointers. At &lt;span class="caps"&gt;OSCON&lt;/span&gt;, Jim Weirich had demoed a way to &lt;a href="http://onestepback.org/articles/depinj/classesarejustobjects.html"&gt;dependency-inject constant references within a given class&lt;/a&gt;. Wayne Vucenic was kind enough to mail me Eric Evans and Martin Fowler&amp;#8217;s Specification Pattern for further reading. And more than one person pointed me to Behavior-Driven Development; I&amp;#8217;ll say more on that further down.&lt;/p&gt;


	&lt;p&gt;Another pleasant surprise, this one about the growing Ruby community: I think it&amp;#8217;s fair to say that more than a few Rubyists from the pre-Rails days have had mixed feelings about the effect of Rails on the Ruby community. Growth isn&amp;#8217;t always a good thing, after all, and one concern about the Rails influence has been that it would bring in the &amp;#8220;wrong crowd&amp;#8221;, so to speak. This isn&amp;#8217;t a matter of intelligence or skill, really: We want people of all skill levels. (I&amp;#8217;m not a very good programmer myself, which is why I write all those damn tests.) But some were concerned about a growing community succumbing to the social downsides of so many large programming communities&amp;#8212;namely, programmers looking for silver bullets or heroes to worship, instead of thinking for themselves.&lt;/p&gt;


	&lt;p&gt;I tried to reserve my judgement, and I&amp;#8217;m quite glad I did. All weekend-long, I kept meeting smart, passionate, open-minded programmers who loved using Ruby on Rails&amp;#8212;not because they were looking for a religion, but because they thought Ruby and Rails make a great combination. These are folks who are going to be contributing a lot of great work on non-trivial issues that will benefit all Ruby users; the work on Behavior-Driven Development may be an early example of this. So as one pre-Rails Rubyist, let me say to the Railsers that I&amp;#8217;m glad you&amp;#8217;re all along for the ride.&lt;/p&gt;


	&lt;h2&gt;The next 12 months&lt;/h2&gt;


	&lt;p&gt;Historically, things happen at RubyConf; two years ago, the current incarnation of RubyGems was born. With so many people getting together, it&amp;#8217;s inevitable that we&amp;#8217;ll see new projects coalesce and grow because of this weekend.&lt;/p&gt;


	&lt;p&gt;One such project may be the effort to write some sort of a specification for Ruby. In the past, Matz&amp;#8217; philosophy has been something like &amp;#8220;Ruby is as Ruby does&amp;#8221;: There&amp;#8217;s one Ruby implementation, and if you want to know how it&amp;#8217;s supposed to behave, you should just use it. That&amp;#8217;s been sufficient in the past, but now there are a lot of projects that would benefit from a more detailed accounting of Ruby is supposed to act, including but not limited to JRuby, MetaRuby, &lt;span class="caps"&gt;YARV&lt;/span&gt; itself, and possibly Sydney. A small group of us met and hashed out the best way to capture this information, and for now it looks like we&amp;#8217;re going to use a tandem of a better test suite and documentation in English. We&amp;#8217;re a community that believes in working code over legalisms, so I&amp;#8217;m optimistic that we&amp;#8217;ll be able to produce a set of docs that are easy to read.&lt;/p&gt;


	&lt;p&gt;The spec meeting kept me from the Behavior-Driven Development, which was a shame. This idea seems to be gaining steam; &lt;a href="http://daveastels.com/index.php?p=5"&gt;Dave Astels&lt;/a&gt; seemed to have kicked the whole thing off with a blog post in July, leading to the &lt;a href="http://rspec.rubyforge.org/"&gt;RSpec&lt;/a&gt; library, and &lt;a href="http://jroller.com/page/obie?entry=design_trumps_tdd"&gt;Obie&amp;#8217;s explanation yesterday&lt;/a&gt;. But can I say, without getting too much into it now, that I&amp;#8217;m a little in the dark as to what&amp;#8217;s so special or different about this approach? It just seems like the standard &lt;a href="http://c2.com/cgi/wiki?TestFirstDesign"&gt;Test-First Design&lt;/a&gt;, with a mildly different interface. But I could just be totally missing the point (wouldn&amp;#8217;t be the first time), so I&amp;#8217;m happy to keep listening in on this conversation, to see where it goes.&lt;/p&gt;


	&lt;p&gt;Other possibilities for the year ahead: A more organized effort to make embedded versions of Ruby, more advanced database tools built on Rails&amp;#8217; ActiveRecord, some progress on refactoring tools possibly driven by the toys in Ryan Davis&amp;#8217; talk. Anybody feel like taking odds?&lt;/p&gt;


	&lt;h2&gt;I&amp;#8217;d like to thank the Academy&lt;/h2&gt;


	&lt;p&gt;A good conference is a tricky thing, and since we&amp;#8217;re not a bunch of regional sales directors paying top-dollar to be taken care of, we have to do a lot of it ourselves. This work deserves to be noted, so I want to give some thanks:&lt;/p&gt;


	&lt;p&gt;Peter Cooper of &lt;a href="http://feeddigest.com"&gt;FeedDigest.com&lt;/a&gt;, for responding to my super-last-minute request to sponsor a free &lt;a href="http://app.feeddigest.com/digest3/75FTX0S2TH.html"&gt;RubyConf feed digest&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Everybody who brought a power strip for our hungry laptops, and everybody who brought a wireless access point and threw it into the fray. Everybody who transcribed the talks or blogged or Flickr&amp;#8217;d the conference.&lt;/p&gt;


	&lt;p&gt;The Seattle folks who let us hang out in their penthouse suite at all hours and leave pizza boxes everywhere.&lt;/p&gt;


	&lt;p&gt;San Diego local Edward O&amp;#8217;Connor, for really good restaurant recommendations. And &lt;a href="http://entertainment.signonsandiego.com/profile/249686"&gt;Harar&lt;/a&gt;, that kickass Ethiopian restaurant on El Cajon Boulevard that had no problem feeding ravenous hordes of hungry nerds.&lt;/p&gt;


	&lt;p&gt;Conference organizers &lt;a href="http://wobblini.net/"&gt;David Black&lt;/a&gt; and Chad Fowler, who deal with check-in and t-shirts and WiFi and caterers and hotels and sponsors and speakers and pull the whole mess together into something that works. They do it year after year, and for not much money, so as far as I&amp;#8217;m concerned they&amp;#8217;re the patron saints of the Ruby community.&lt;/p&gt;


	&lt;p&gt;And thanks to my Ruby-NYC compadres for getting on a plane and flying across the country and giving me a posse to roll with. I told you this shit was gonna be fun, didn&amp;#8217;t I?&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/10/18/RubyConf-2005-the-wrap-up"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-10-14:BlogPost84</id>
    <published>2005-10-14T23:27:30Z</published>
    <updated>2005-10-14T23:27:30+00:00</updated>
    <title>RubyConf 2005, Day 1</title>
    <content type="html">&lt;div&gt;&lt;p&gt;So, I don&amp;#8217;t mean to be a fanboy, but holy shit, dude, fucking &lt;a href="http://www.martinfowler.com/"&gt;Martin Fowler&lt;/a&gt; is here. And &lt;a href="http://www.intertwingly.net/blog/"&gt;Sam Ruby&lt;/a&gt;, so I hear, though I haven&amp;#8217;t spotted him. Martin Fowler and Sam Ruby come to your conference, man, that&amp;#8217;s the big time.&lt;/p&gt;


	&lt;p&gt;Ruby&amp;#8217;s going through some changes, and only time will tell how they play out. Largely due to the buzz behind &lt;a href="http://www.rubyonrails.org/"&gt;Rails&lt;/a&gt;, this year&amp;#8217;s &lt;a href="http://www.rubycentral.org/conference/"&gt;RubyConf&lt;/a&gt; has 200-some people at it; three times as many as the year before. There are also, I&amp;#8217;m told, five women in attendance, which is sadly enough five more than came last year or any year before that.&lt;/p&gt;


	&lt;p&gt;I gave the first talk this morning, on Top-to-bottom Testing in Ruby. You can listen in &lt;a href="http://yhrhosting.com:7000/articles/2005/10/14/francis-hwang-mocking-objects-and-filesystems"&gt;here&lt;/a&gt;, and read a few commentaries &lt;a href="http://muness.blogspot.com/2005/10/rubyconf-panel-1-top-to-bottom-testing.html"&gt;here&lt;/a&gt; and &lt;a href="http://www.stonecode.org/blog/?p=21"&gt;here&lt;/a&gt;. I can&amp;#8217;t say how successful the talk was, but during the Q&amp;#38;A there was a spirited discussion, involving &lt;a href="http://www.loudthinking.com/"&gt;DHH&lt;/a&gt; and others, so I suppose that&amp;#8217;s a good sign.&lt;/p&gt;


	&lt;p&gt;As a side note, I wish I&amp;#8217;d taken a closer look at &lt;a href="http://highline.rubyforge.org/"&gt;HighLine&lt;/a&gt; before giving my talk; I probably would&amp;#8217;ve used it in my command-line code example instead of &lt;a href="http://easyprompt.rubyforge.org/"&gt;EasyPrompt&lt;/a&gt;. After my talk, Gregory Brown was telling me that HighLine was quite conscious about stealing the best bits from EasyPrompt and from Cmd&amp;#8212;we took a quick look together, and it looks like EasyPrompt may be more or less obsolete due to Gregory and James Edward Gray II&amp;#8217;s work. That&amp;#8217;s fine with me; I&amp;#8217;ve got too many tiny libraries on my plate as it is.&lt;/p&gt;


	&lt;p&gt;Next, Akira Tanaka talked about open-uri and the Virtual File System. It was a sort of meandering-yet-informative talk, spending a lot of time on general principles of making an &lt;span class="caps"&gt;API&lt;/span&gt; easy to use and remember. His points about &lt;span class="caps"&gt;HTTP&lt;/span&gt; as a kind of network file system reminded me that  I have yet to write that lib to override &lt;tt&gt;require&lt;/tt&gt; to read files as URIs&amp;#8212;though that&amp;#8217;s probably just a solution looking for a problem &amp;#8230;&lt;/p&gt;


	&lt;p&gt;After lunch, a power-troika of dense, language-level talks. Charles Nutter talked about JRuby, an implementation of Ruby in Java that&amp;#8217;s complete enough to be used by certain Java projects already. Koichi Sasada followed up on last year&amp;#8217;s talk on &lt;span class="caps"&gt;YARV&lt;/span&gt; with a progress report. And Eric Hodel talked about Seattle.rb&amp;#8217;s progress with MetaRuby, an effort to implement Ruby in Ruby.&lt;/p&gt;


	&lt;p&gt;Charles and Eric&amp;#8217;s talks touched on many similar issues. Eric said that writing tests has been difficult since you can&amp;#8217;t run Test::Unit without most of Ruby working in the first place. And both projects highlight what would appear to be a need for a more formal Ruby specification. Of course, somebody has to &lt;em&gt;write&lt;/em&gt; that spec, and writing specs aren&amp;#8217;t fun. But maybe that&amp;#8217;s part and parcel of the language&amp;#8217;s growth; there&amp;#8217;s more housekeeping.&lt;/p&gt;


	&lt;p&gt;I presented the question to Matz at his evening roundtable; he said that if somebody wants to contact him about writing a spec for 1.8, he&amp;#8217;d be interested. 1.9 and 2.0, of course, are far too fluid to be worth spec&amp;#8217;ing out at this point.&lt;/p&gt;


	&lt;p&gt;As the community grows, it&amp;#8217;s interesting to see which roles get filled and which are left vacant. More than a few projects which are hard and non-glamorous get left by the wayside, but meanwhile everybody&amp;#8217;s put out a web framework &amp;#8230; I&amp;#8217;m certainly not saying I&amp;#8217;m any better than anyone else when it comes to this, or else I&amp;#8217;d be snatching leadership of &lt;a href="http://ruby-dbi.sourceforge.net/"&gt;Ruby-DBI&lt;/a&gt; out of Daniel Berger&amp;#8217;s hands. (From what he&amp;#8217;s blogged and our conversations today, it&amp;#8217;s fair to say he&amp;#8217;d be happy to hand it off.) But you never know. Maybe more tests can get added to the Rubicon. Maybe people will get together this weekend and form a specifications team. And Patrick&amp;#8217;s making good progress on his &lt;a href="http://ruby-dbi.sourceforge.net/"&gt;Ruby-Web&lt;/a&gt; library, so there&amp;#8217;s one bright spot.&lt;/p&gt;


	&lt;p&gt;At any rate, now it&amp;#8217;s 11 p.m. and there are about 60 people tap-tapping away on their laptops in the hotel lobby, and out on the patio, by the pool. Last year, they kicked us out of the lobby at about 1 a.m. We&amp;#8217;ll see how long we last tonight &amp;#8230;&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/10/14/RubyConf-2005-Day-1"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-10-10:BlogPost83</id>
    <published>2005-10-10T18:36:43Z</published>
    <updated>2005-10-10T18:36:43+00:00</updated>
    <title>Pre-RubyConf dinner</title>
    <content type="html">&lt;div&gt;&lt;p&gt;&lt;a href="http://www.rubycentral.org/conference/"&gt;RubyConf&lt;/a&gt; starts on Friday morning, but a lot of us will be in town the night before. So, on Thursday night, four of the &lt;a href="http://groups.yahoo.com/group/ruby-nyc/"&gt;Ruby-NYC&lt;/a&gt; folks will be getting together for dinner. If you&amp;#8217;re in town and want to tag along, please feel free! We&amp;#8217;re nice people. Well, the three other guys are, anyway.&lt;/p&gt;


	&lt;p&gt;We&amp;#8217;ll meet in the lobby of the Lafayette Hotel (that&amp;#8217;s the conference hotel) at around 9 p.m. If you want to know who you&amp;#8217;re looking for, take a look at the RubyConf facebook. Both &lt;a href="http://www.rubygarden.org/ruby?RubyConf2005Facebook#Francis_Hwang"&gt;my picture&lt;/a&gt; and &lt;a href="http://www.rubygarden.org/ruby?RubyConf2005Facebook#Matt_Pelletier"&gt;Matt Pelletier&amp;#8217;s picture&lt;/a&gt; are available. We do not have pictures for Gianni and Jason, particularly because Gianni is such a shy, retiring flower.&lt;/p&gt;


	&lt;p&gt;As a side note, are there any San Diego natives who can give us tourists a few tips on good bars, restaurants, etc. in San Diego? Especially places close to the hotel. Such tips would be much appreciated.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/10/10/Pre-RubyConf-dinner"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-10-05:BlogPost81</id>
    <published>2005-10-05T14:57:55Z</published>
    <updated>2005-10-05T14:57:55+00:00</updated>
    <title>Face time for RubyConf 2005</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Maybe I&amp;#8217;m just vain and want everyone to see my face, but I thought it
might be useful to have a publically viewable page of photos of people
who are going to be at RubyConf this year. That way, if you&amp;#8217;ve got
somebody you&amp;#8217;re looking to talk to about your plans to take over the
Ruby world, you can look them up before or during the conference.&lt;/p&gt;


	&lt;p&gt;So, if you&amp;#8217;re going to &lt;span class="caps"&gt;RC 2005&lt;/span&gt; and want to participate, head over to
the &lt;a href="http://www.rubygarden.org/ruby?RubyConf2005Facebook"&gt;wiki page&lt;/a&gt; and add yourself.&lt;/p&gt;


	&lt;p&gt;I am also looking forward to the &lt;a href="http://redhanded.hobix.com/inspect/theMouseholeProxy.html"&gt;MouseHole&lt;/a&gt; script that will add
mustaches to everybody&amp;#8217;s photo.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/10/05/Face-time-for-RubyConf-2005"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-09-21:BlogPost80</id>
    <published>2005-09-21T14:11:40Z</published>
    <updated>2005-09-21T14:11:40+00:00</updated>
    <title>Lafcadio 0.8.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I&amp;#8217;ve just released &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio 0.8.0&lt;/a&gt;, the new production release. It contains more than 40 new features and bugfixes. And it adds lots of convenience methods to DomainObject, richer query inference operators, real-time query subset caching&amp;#8212;all in a slimmer codebase.&lt;/p&gt;


	&lt;p&gt;Some new features are:&lt;/p&gt;


	&lt;h2&gt;Better operators for query inference:&lt;/h2&gt;


&lt;pre&gt;
class User &amp;lt; Lafcadio::DomainObject
  strings :fname, :lname, :email
end

maybe_koreans = User.get { |u| u.lname.in( 'Park', 'Lee', 'Hwang' ) }
no_fname = User.get { |u| u.fname.nil? }
&lt;/pre&gt;

	&lt;p&gt;As always, these queries work both against MySQL and against a much faster, in-memory mock object store for use in testing.&lt;/p&gt;


	&lt;h2&gt;Query Caching:&lt;/h2&gt;


	&lt;p&gt;Everytime you run a select against the DB, Lafcadio caches the results in memory. Then, if you later run a second select that is a subset of the first, Lafcadio detects it, figures out what it&amp;#8217;s a subset of, filters out the results in memory, and returns you the results. This all happens transparently.&lt;/p&gt;


	&lt;p&gt;What does this mean? It means a significantly faster app, because if you run these three queries:&lt;/p&gt;


&lt;pre&gt;
select * from users where lname = 'Smith'
select * from users where lname = 'Smith' and fname like '%john%'
select * from users where lname = 'Smith' and email like '%hotmail%'
&lt;/pre&gt;

	&lt;p&gt;Lafcadio will only ask MySQL for the results for the first select statement, and do the rest for you without using the DB connection.&lt;/p&gt;


	&lt;h2&gt;Convenience methods for DomainObject:&lt;/h2&gt;


&lt;pre&gt;
puts User.exist?
u = User[15]
u.update!( :fname =&amp;gt; 'Bill' )
u.delete!
all_users = User.all
first_user = User.first
last_user = User.last
&lt;/pre&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/09/21/Lafcadio-0-8-0"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-09-19:BlogPost79</id>
    <published>2005-09-19T22:42:47Z</published>
    <updated>2005-09-19T22:42:47+00:00</updated>
    <title>MockFS 0.1.2</title>
    <content type="html">&lt;div&gt;&lt;p&gt;&lt;a href="http://rubyforge.org/projects/mockfs/"&gt;MockFS&lt;/a&gt; lumbers forward with its newest release, 0.1.2. Besides a liberal heaping of bugfixes, this version adds override.rb, which does some convenient but possibly dangerous redefining of global constants and methods. Ooh, danger!&lt;/p&gt;


	&lt;h2&gt;What&amp;#8217;s MockFS?&lt;/h2&gt;


	&lt;p&gt;MockFS is nothing less than an attempt to simulate a file system in memory for the purposes of testing. I wrote it for my own use, because I write lots of tests and sometimes I get sick of cleaning up test files. It&amp;#8217;s a lot simpler to just simulate the disk in memory and drop the whole thing when you&amp;#8217;re done with your test.&lt;/p&gt;


	&lt;p&gt;It&amp;#8217;s not complete by a longshot, but it&amp;#8217;s complete enough that I&amp;#8217;m able to use it to help me write tests for production code&amp;#8212;most notably, for Rhizome.org, a community website that gets more than a million pageviews a month.&lt;/p&gt;


	&lt;h2&gt;What&amp;#8217;s new in 0.1.2?&lt;/h2&gt;


	&lt;ul&gt;
	&lt;li&gt;First, a lot of little things have been fixed. MockFS now has a better understanding of file permissions, of paths, and the multiple ways that File, FileUtils, and Dir allow the same method to be called through class or instance methods.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;I&amp;#8217;ve also added override.rb, which redefines File, FileUtils, and Dir. This is so your code doesn&amp;#8217;t have to reference MockFS directly; the test cases can include override.rb and reference the mock file system that way.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;override.rb also includes a redefinition of Kernel.require, so that if a file doesn&amp;#8217;t exist in the real file system, Kernel.require will look for it in the mock file system. This might be useful in cases where you have configuration files written in Ruby, and would like to swap them out during testing.&lt;/p&gt;


	&lt;p&gt;Pretty much everything in override.rb is experimental, so I&amp;#8217;d urge caution in including the file.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/09/19/MockFS-0-1-2"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-08-14:BlogPost76</id>
    <published>2005-08-14T16:34:02Z</published>
    <updated>2005-08-14T16:34:02+00:00</updated>
    <title>RhizMail 0.1.1</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I&amp;#8217;ve just released the newest version of &lt;a href="http://rhizmail.rubyforge.org/"&gt;RhizMail&lt;/a&gt;, the email library we use at &lt;a href="http://rhizome.org"&gt;Rhizome&lt;/a&gt;. Most of the changes are minor, but one bigger change is making it easier to parameterize a child of SimpleTemplateMessage.&lt;/p&gt;


	&lt;p&gt;For example, You can still create a SimpleTemplateMessage directly:&lt;/p&gt;


&lt;pre&gt;
msg = RhizMail::SimpleTemplateMessage.new(
  :to_address =&amp;gt; 'john.doe@email.com',
  :from_address =&amp;gt; 'webmaster@website.com',
  :template_file =&amp;gt; '/Users/francis/Desktop/template.txt'
)
msg.substitute( 'email', 'john.doe@email.com' )
msg.substitute( 'password', 'p4ssw0rd' )
msg.deliver
&lt;/pre&gt;

	&lt;p&gt;But you can also create a child, parameterizing it with class methods:&lt;/p&gt;


&lt;pre&gt;
class IntroEmail &amp;lt; RhizMail::SimpleTemplateMessage
  from_address 'webmaster@website.com'
  template     '/Users/francis/Desktop/template.txt'
  substitute   'email', Proc.new { |msg| msg.user.email }
  substitute   'password', Proc.new { |msg| msg.user.password }

  attr_reader :user

  def initialize( user )
    @user = user
    super( :to_address =&amp;gt; user.email )
  end
end

User = Struct.new( :email, :password )

u = User.new( 'john.doe@email.com', 'p4ssw0rd' )
email = IntroEmail.new u
&lt;/pre&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/08/14/RhizMail-0-1-1"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-08-11:BlogPost75</id>
    <published>2005-08-11T23:15:18Z</published>
    <updated>2005-08-11T23:15:18+00:00</updated>
    <title>LibInject 0.1.0: Small Pieces Smooshed Together</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I&amp;#8217;ve just released the first version of &lt;a href="http://libinject.rubyforge.org/"&gt;LibInject&lt;/a&gt;, which is a developer tool for injecting external dependencies into a Ruby file. More specifically, it finds &lt;code&gt;require&lt;/code&gt; statements that point to files that aren&amp;#8217;t in the standard library, expands those files, and drops the raw text into the original file.&lt;/p&gt;


	&lt;p&gt;Why would somebody do this instead of just using a plain old &lt;code&gt;require&lt;/code&gt; statement? One reason might be because you want to write a one-file script that can also have external dependencies. I wrote LibInject for use with &lt;a href="http://feedblender.rubyforge.org"&gt;FeedBlender&lt;/a&gt;, which is intended as a one-file script aimed at Ruby newbies who might not even know how to install from &lt;code&gt;.tar.gz&lt;/code&gt; files or from RubyGems. With LibInject, I can have external dependencies in FeedBlender, use a &lt;a href="http://rake.rubyforge.org"&gt;Rake&lt;/a&gt; task to inject those libraries into &lt;code&gt;feedblender.rb&lt;/code&gt;, and then distribute the end result.&lt;/p&gt;


	&lt;p&gt;The project page for LibInject is &lt;a href="http://rubyforge.org/projects/libinject/"&gt;http://rubyforge.org/projects/libinject/&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;For example, let&amp;#8217;s say you&amp;#8217;ve three files, &lt;code&gt;a.rb&lt;/code&gt;, &lt;code&gt;b.rb&lt;/code&gt;, and &lt;code&gt;c.rb&lt;/code&gt;. &lt;code&gt;a.rb&lt;/code&gt; requires &lt;code&gt;b.rb&lt;/code&gt; and &lt;code&gt;c.rb&lt;/code&gt;, and &lt;code&gt;b.rb&lt;/code&gt; requires &lt;code&gt;c.rb&lt;/code&gt;:&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;&lt;code&gt;a.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;
require 'b'
require 'c'

class A; end
&lt;/pre&gt;

	&lt;p&gt;&lt;strong&gt;&lt;code&gt;b.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;
require 'c'

class B; end
&lt;/pre&gt;

	&lt;p&gt;&lt;strong&gt;&lt;code&gt;c.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;
class C; end
&lt;/pre&gt;

	&lt;p&gt;If you wanted to distribute a version of &lt;code&gt;a.rb&lt;/code&gt; without any external dependencies, this is how you&amp;#8217;d run LibInject:&lt;/p&gt;


&lt;pre&gt;
require 'libinject'

puts LibInject.lib_inject( File.open( 'a.rb' ) )

# We could also pass LibInject.lib_inject a String, like so:
#   contents = File.open( 'a.rb' ) do |f| f.gets( nil ); end
#   puts LibInject.lib_inject( contents )
&lt;/pre&gt;

	&lt;p&gt;And this is what you&amp;#8217;ll get:&lt;/p&gt;


&lt;pre&gt;

# v---------v---------v---------v---------v---------v---------v---------v
# LibInject: begin 'b' library injection
# v---------v---------v---------v---------v---------v---------v---------v

# v---------v---------v---------v---------v---------v---------v---------v
# LibInject: begin 'c' library injection
# v---------v---------v---------v---------v---------v---------v---------v

class C; end

# ^---------^---------^---------^---------^---------^---------^---------^
# LibInject: end 'c' library injection
# ^---------^---------^---------^---------^---------^---------^---------^

class B; end

# ^---------^---------^---------^---------^---------^---------^---------^
# LibInject: end 'b' library injection
# ^---------^---------^---------^---------^---------^---------^---------^

class A; end
&lt;/pre&gt;

	&lt;p&gt;The code looks sort of messy, but now it&amp;#8217;s all in one file.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/08/11/LibInject-0-1-0-Small-Pieces-Smooshed-Together"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-07-04:BlogPost71</id>
    <published>2005-07-04T13:12:15Z</published>
    <updated>2005-07-04T13:12:15+00:00</updated>
    <title>ContextualService 0.1.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Here&amp;#8217;s another library that comes from Lafcadio: &lt;a href="http://contxtlservice.rubyforge.org/"&gt;ContextualService&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;The ContextualService library makes it easy to manage and set services to a single, global resource such as a database or file system. By defining a service to be a child of ContextualService::Service, you&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;lock off access to instantiation, so all access have to go through the service&amp;#8217;s get method,&lt;/li&gt;
		&lt;li&gt;and provide a simple way to set the instance, most likely for testing.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;For example, &lt;a href="http://lafcadio.rubyforge.org"&gt;Lafcadio&lt;/a&gt; uses
ContextualService to manage access to the ObjectStore, which controls
access to a database.&lt;/p&gt;


&lt;pre&gt;
class Lafcadio::ObjectStore &amp;lt; ContextualService::Service
    def initialize
        ...
    end
end
&lt;/pre&gt;

	&lt;p&gt;ObjectStore.new will raise an error. To get an instance of ObjectStore,
you call ObjectStore.get_object_store. If no instance has been
previously set, this will instantiate the ObjectStore and save the
instance for future accesses. If a mock instance has been previously set
with set_object_store, it will simply return that mock instance.&lt;/p&gt;


	&lt;p&gt;Since access to the global service is attached to the class, there&amp;#8217;s no
need to pass in a mock service as an argument to any method that needs
it. This can simplify testing considerably if you&amp;#8217;ve got highly
decomposed code that needs to access a global service from many places.
Also, since the Context object is hidden, clients of the service don&amp;#8217;t
have to be conscious of it.&lt;/p&gt;


&lt;pre&gt;
def some_method
    os = Lafcadio::ObjectStore.get_object_store
    # do something with the object store here
    some_other_method
end

def some_other_method
    os = Lafcadio::ObjectStore.get_object_store
    # do something with the object store here, too
end

class TestSomeMethod &amp;lt; Test::Unit::TestCase
    def test1
        mock_object_store = Lafcadio::MockObjectStore.new
        Lafcadio::ObjectStore.set_object_store mock_object_store
        some_method
        # assert something happened 
    end
end
&lt;/pre&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/07/04/ContextualService-0-1-0"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-06-07:BlogPost69</id>
    <published>2005-06-07T09:29:14Z</published>
    <updated>2005-06-07T09:29:14+00:00</updated>
    <title>Ruby Month 0.1.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;From out of murky depths of the &lt;a href="http://lafcadio.rubyforge.org/"&gt;Lafcadio&lt;/a&gt; codebase, I bring you a tiny utility library called &lt;a href="http://rubyforge.org/projects/month"&gt;Ruby Month&lt;/a&gt;. It&amp;#8217;s a modest thing, intended to make month-level manipulations easier. For example:&lt;/p&gt;


&lt;pre&gt;
require 'month'
jun2005 = Month.new( 2005, 6 )
jun2005.to_s                             # =&amp;gt; "Jun 2005" 
jun2005.start_date.to_s                  # =&amp;gt; "2005-06-01" 
jun2005.end_date.to_s                    # =&amp;gt; "2005-06-30" 

jul2005 = jun2005.next
jul2005.to_s                             # =&amp;gt; "Jul 2005" 
may2005 = jun2005.prev
may2005.to_s                             # =&amp;gt; "May 2005" 

to_sort = [ jul2005, may2005, jun2005 ]
to_sort.join ', '                        # =&amp;gt; "Jul 2005, May 2005, Jun 2005" 
to_sort.sort!
to_sort.join ', '                        # =&amp;gt; "May 2005, Jun 2005, Jul 2005" 
&lt;/pre&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/06/07/Ruby-Month-0-1-0"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-05-15:BlogPost65</id>
    <published>2005-05-15T00:48:42Z</published>
    <updated>2005-05-15T00:48:42+00:00</updated>
    <title>HtmlClipping 0.1.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;More Ruby libs: I&amp;#8217;ve just released the first version of &lt;a href="http://rubyforge.org/projects/htmlclipping"&gt;HtmlClipping&lt;/a&gt;. HtmlClipping reads an &lt;span class="caps"&gt;HTML&lt;/span&gt; page that has a link pointing to a particular &lt;span class="caps"&gt;URI&lt;/span&gt;. It removes most &lt;span class="caps"&gt;HTML&lt;/span&gt; markup, bolds the link text, and trims the resulting text to a fixed number of characters. I developed it to help me track referers to my website, though I suppose it might have other uses.&lt;/p&gt;


	&lt;p&gt;For example, the following script gets the &lt;span class="caps"&gt;HTML&lt;/span&gt; at &lt;a href="http://rubyforge.org/credits/"&gt;http://rubyforge.org/credits/&lt;/a&gt;, and forms an excerpt around the link to &lt;a href="http://www.rubycentral.org/pledge/"&gt;http://www.rubycentral.org/pledge/&lt;/a&gt;.&lt;/p&gt;


&lt;pre&gt;
require 'htmlclipping'
require 'net/http'

contents = ''
Net::HTTP.start( 'rubyforge.org' ) do |http|
  response = http.get '/credits/'
  contents = response.body
end
clipping = HtmlClipping.new(
  contents, 'http://www.rubycentral.org/pledge/', 500
)
puts clipping.to_s

=&amp;gt; "&amp;amp;#8230; RubyForge takes time, effort, and money. Many thanks to the
   folks listed below who are making it possible! &amp;lt;br /&amp;gt; If RubyForge has
   been helpful to you, and you want to give something back to the Ruby
   community, please consider supporting &amp;lt;strong&amp;gt;RubyCentral&amp;lt;/strong&amp;gt;.
   Thanks! &amp;lt;br /&amp;gt; InfoEther, Inc purchased the RubyForge hardware and
   provides system administration support. &amp;lt;br /&amp;gt; Several folks provide
   file mirrors to help share the bandwidth load: &amp;lt;br /&amp;gt; Evan Webb &amp;lt;br /&amp;gt;
   Dennis Oelkers &amp;lt;br /&amp;gt; Austin &amp;amp;#8230;" 
&lt;/pre&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/05/15/HtmlClipping-0-1-0"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-03-19:BlogPost60</id>
    <published>2005-03-19T15:00:06Z</published>
    <updated>2005-03-19T15:00:06+00:00</updated>
    <title>RhizMail 0.1.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;I&amp;#8217;ve just released &lt;a href="http://rhizmail.rubyforge.org/"&gt;RhizMail 0.1.0&lt;/a&gt;. RhizMail is a test-friendly library for sending out customized emails. This is the library we use day-to-day at &lt;a href="http://rhizome.org"&gt;rhizome.org&lt;/a&gt;, where we send out more than 100 customized emails a day.&lt;/p&gt;

	&lt;p&gt;To use RhizMail, create an email and deliver it.&lt;/p&gt;


&lt;pre&gt;
def send_site_message( to_address, to_name, body )
    msg = RhizMail::Message.new(
        'New features at website.com', to_address, 'webmaster@mysite.com',
        body
    )
    msg.to_name = to_name
    msg.deliver
end
&lt;/pre&gt;
	&lt;p&gt;If you want to test this message, you can set the MockMailer to take place of the default Mailer:&lt;/p&gt;


&lt;pre&gt;
def test_send_site_message
    mock_mailer = RhizMail::MockMailer.new
    RhizMail::set_mailer mock_mailer
    send_site_message( 'bill@yahoo.com', 'Bill Smith', 'Hi, Bill!' )
    assert_equal( 1, mock_mailer.messages_sent )
    assert_equal( 'Bill Smith', mock_mailer.messages_sent.first.to_name )
end
&lt;/pre&gt;
	&lt;p&gt;Basically, this means that you can send out as many emails as you want in any part of your code, without having to worry that running a test case will actually send out real emails. (Is there somebody who really has the email address with &amp;#8216;bill@yahoo.com&amp;#8217;? If so, it&amp;#8217;d be nice not to annoy him.)&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/03/19/RhizMail-0-1-0"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-02-23:BlogPost57</id>
    <published>2005-02-23T12:19:24Z</published>
    <updated>2005-02-23T12:19:24+00:00</updated>
    <title>MockFS 0.1.1: The rename release</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Last week, I &lt;a href="/blog/54.html"&gt;released FileSystem 0.1.0&lt;/a&gt;, only to be told that there&amp;#8217;s already a FileSystem for Ruby. D&amp;#8217;oh! I&amp;#8217;ve now renamed this library to &lt;a href="http://rubyforge.org/projects/mockfs/"&gt;MockFS&lt;/a&gt;, and re-released it as 0.1.1. Please note that this is the exact same library as before, and the same precautions apply: I use this library in production code, but you will most likely discover cases I have not covered. Please submit bugs! I live for bugs. Yum.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/02/23/MockFS-0-1-1-The-rename-release"/>
  </entry>
  <entry>
    <id>tag:fhwang.net,2005-02-16:BlogPost54</id>
    <published>2005-02-16T09:51:40Z</published>
    <updated>2005-02-16T09:51:40+00:00</updated>
    <title>FileSystem 0.1.0</title>
    <content type="html">&lt;div&gt;&lt;p&gt;Next down my non-stop pipeline of absolutely necessary libraries that only I seem to need: &lt;a href="http://rubyforge.org/projects/filesystem/"&gt;FileSystem&lt;/a&gt;, a library that will mock out File, FileUtils, Dir, and other file-dependent built-in classes. It aims to simulate an entire file-system in memory for the purposes of testing.&lt;/p&gt;

	&lt;h2&gt;How does it work?&lt;/h2&gt;

	&lt;p&gt;To use it in live code, you call get methods on the FileSystem module:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
  FileSystem.get_dir                =&amp;gt; Dir
  FileSystem.get_file               =&amp;gt; File
  FileSystem.get_file_utils         =&amp;gt; FileUtils
  FileSystem.get_dir.entries( '.' ) =&amp;gt; [ '.', '..', 'file1', ... ]
&lt;/code&gt;
&lt;/pre&gt;
	&lt;p&gt;(I&amp;#8217;m thinking about adding a voodoo.rb file that actually re-assigns the constants Dir, File, and FileUtils, though I suspect this will not be that usable in many cases.)&lt;/p&gt;

	&lt;p&gt;Then, to mock out that activity for a test code, simply call &lt;code&gt;FileSystem.mock=&lt;/code&gt;:&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;
  FileSystem.mock = true
  FileSystem.get_dir =&amp;gt;                FileSystem::DirAdapter
  FileSystem.get_file =&amp;gt;               FileSystem::FileAdapter
  FileSystem.get_file_utils =&amp;gt;         FileSystem::FileUtilsAdapter
  FileSystem.get_dir.entries( '.' ) =&amp;gt; [ '.', '..', ... ]
&lt;/code&gt;
&lt;/pre&gt;
	&lt;h2&gt;How complete is it?&lt;/h2&gt;

	&lt;p&gt;Oh dear, not at all. Hence the release name: &amp;#8220;Beta for me, Alpha for you&amp;#8221;. I am now using it day-to-day, both at &lt;a href="http://rhizome.org/"&gt;Rhizome&lt;/a&gt; and my own blog-publishing software, &lt;a href="http://fhwang.net/writing/justifying_dauxite.html"&gt;Dauxite&lt;/a&gt;. So I know it works for me. It currently handles basic issues of looking up paths, writing and reading files, modification times, etc. It doesn&amp;#8217;t know anything about symlinks, creation times, permissions. I suspect that if you tried to mock a Windows system with it, that it would squeal like a 2-year-old.&lt;/p&gt;

	&lt;p&gt;I&amp;#8217;m putting out today&amp;#8217;s release in hopes of getting bug reports. Please file bug reports! Lots and lots of bug reports! Please be specific, though. If you file a bug titled &amp;#8220;Support Windows, you l4m3r&amp;#8221; I won&amp;#8217;t know where to start.&lt;/p&gt;&lt;/div&gt;</content>
    <link type="text/html" rel="alternate" href="http://fhwang.net/2005/02/16/FileSystem-0-1-0"/>
  </entry>
</feed>
