<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <title>DABlog - Home</title>
  <id>tag:dablog.rubypal.com,2009:mephisto/</id>
  <generator version="0.7.3" uri="http://mephistoblog.com">Mephisto Noh-Varr</generator>
  
  <link href="http://dablog.rubypal.com/" rel="alternate" type="text/html" />
  <updated>2009-01-16T14:20:36Z</updated>
  <link rel="self" href="http://feeds.feedburner.com/rubypal/KoEa" type="application/atom+xml" /><entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2009-01-16:362</id>
    <published>2009-01-16T14:20:00Z</published>
    <updated>2009-01-16T14:20:36Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2009/1/16/son-of-10-things-to-be-aware-of-in-ruby-1-9" rel="alternate" type="text/html" />
    <title>Son of 10 things to be aware of in Ruby 1.9!</title>
<content type="html">
            &lt;p&gt;I’m happy to see that my recent
&lt;a href="http://dablog.rubypal.com/2009/1/14/10-things-to-be-aware-of-in-moving-to-ruby-1-9"&gt;10 things to be aware
of in moving to Ruby 19&lt;/a&gt; article has proven helpful to lots of people. This article is a follow-up.&lt;/p&gt;


	&lt;p&gt;The goal of the article was to point out 1.9 features and changes that
might cause your existing code not to run correctly, or not to run at
all. I went a bit soft, though: two of the original ten (hashes being
ordered and the changes in method-argument syntax) weren’t really
things that might break your 1.8 code.&lt;/p&gt;


	&lt;p&gt;So I feel I owe the world two more code-breaking 1.9 features! And
they’re here, along with a bonus one.&lt;/p&gt;


&lt;h2&gt;But first, some links&lt;/h2&gt;

	&lt;p&gt;The denizens of ruby-talk have provided lots of helpful ideas and
feedback. James Edward Gray II and others mentioned &lt;span class="caps"&gt;M17N&lt;/span&gt;, a topic on
which I defer to the more expert among us, especially James who has
written a multi-part &lt;a href="http://blog.grayproductions.net/articles/understanding_m17n"&gt;&lt;span class="caps"&gt;M17N&lt;/span&gt; guide&lt;/a&gt;.
He’s going to be expanding it to include 1.9 encoding, so keep an eye on it.&lt;/p&gt;


	&lt;p&gt;Brian Candler suggested that people might be interested in
the presentation by me and Dave Thomas at RubyConf 2008
on &lt;a href="http://rubyconf2008.confreaks.com/ruby-19-what-to-expect.html"&gt;Ruby 1.9: What to Expect&lt;/a&gt;.
We cover some pitfalls but also some new, non-pitfall features you
might want to know about.&lt;/p&gt;


	&lt;p&gt;If you’re interested in Ruby 1.9 generally, you might be interested
in my forthcoming book &lt;a href="http://www.manning.com/black2"&gt;The Well-Grounded
Rubyist&lt;/a&gt;, which is a fully revised,
revamped, “Ruby only” second incarnation of my 2006 book
&lt;a href="http://www.manning.com/black"&gt;Ruby for Rails&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Apologies to anyone I’ve failed to credit, and thanks to all for the feedback.&lt;/p&gt;


	&lt;p&gt;And with that, here are the pitfalls! (Speaking of pitfalls, I think
I’ve remembered all the &amp;lt;pre&amp;gt; tags this time….)&lt;/p&gt;


&lt;h2&gt;String indexing behavior has changed&lt;/h2&gt;

	&lt;p&gt;(Thanks to Michael Fellinger and Robert Dober)&lt;/p&gt;


	&lt;p&gt;In Ruby 1.8, indexing strings with &lt;code&gt;[]&lt;/code&gt;, as in &lt;code&gt;"string"[3]&lt;/code&gt;, gives
you an &lt;span class="caps"&gt;ASCII&lt;/span&gt; code:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; "string"[3]
  =&amp;gt; 105
&lt;/pre&gt;

	&lt;p&gt;In order to get a one-character-long substring, you have to provide a
length:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; "string"[3,1]
  =&amp;gt; "i" 
&lt;/pre&gt;

	&lt;p&gt;In Ruby 1.9, the indexing operation gives you a character.&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; "string"[3]
  =&amp;gt; "i" 
&lt;/pre&gt;

	&lt;p&gt;Also, kind of along the same lines, the ?-notation now gives a
character rather than a code. In 1.8:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; ?a
  =&amp;gt; 97
&lt;/pre&gt;

	&lt;p&gt;and in 1.9:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; ?a
  =&amp;gt; "a" 
&lt;/pre&gt;

&lt;h2&gt;if-conditions can no longer end with a colon&lt;/h2&gt;

	&lt;p&gt;In 1.8 you can do this:&lt;/p&gt;


&lt;pre&gt;
  if x:
    puts "Yes!" 
  end
&lt;/pre&gt;

	&lt;p&gt;In 1.9, you can’t use that colon any more. The same is true of when
clauses in case statements. This will not parse in 1.9:&lt;/p&gt;


&lt;pre&gt;
  case x
  when 1: "yes!" 
  end
&lt;/pre&gt;

&lt;h2&gt;Bonus thing! No more default to_a&lt;/h2&gt;

	&lt;p&gt;In 1.9 you cannot assume that every object has a &lt;code&gt;to_a&lt;/code&gt; method.
You’ve probably seen warnings about this in 1.8, and the day of
reckoning has now arrived.&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; "abc".to_a
  NoMethodError: undefined method `to_a' for "abc":String
&lt;/pre&gt;

	&lt;p&gt;You can use the Array method to turn anything into an array. If it’s
an array already, it returns the object itself (not a copy). If it’s
anything else, it tries to run &lt;code&gt;to_ary&lt;/code&gt; and &lt;code&gt;to_a&lt;/code&gt; on it (in that order),
and if those aren’t available, it just wraps it in an array.&lt;/p&gt;


	&lt;p&gt;Array isn’t new, but we’re likely to be using it a lot more
now that there’s no default &lt;code&gt;to_a&lt;/code&gt; operation.&lt;/p&gt;


	&lt;p&gt;Have fun!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2009-01-14:359</id>
    <published>2009-01-14T19:22:00Z</published>
    <updated>2009-01-14T19:22:47Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2009/1/14/10-things-to-be-aware-of-in-moving-to-ruby-1-9" rel="alternate" type="text/html" />
    <title>10 things to be aware of in moving to Ruby 1.9</title>
<content type="html">
            &lt;p&gt;I’ve been writing a lot about Ruby 1.9 (my book &lt;a href="http://www.manning.com/black2"&gt;The Well-Grounded Rubyist&lt;/a&gt; is due out in 
a couple of months), and I thought I’d share my personal list of things you need 
to be careful of as you go from 1.8 to 1.9. This is not a list of changes; it’s 
a list of changes that you really need to know about to get your 1.8 code to 
work in 1.9, things that have a relatively high likelihood of biting you if you 
don’t know about them.&lt;/p&gt;


&lt;h3&gt;Strings are no longer enumerable&lt;/h3&gt;

	&lt;p&gt;You can’t do &lt;code&gt;string.each&lt;/code&gt; and friends any more. This has an impact, for
example, on the Rack interface, where there has in the past been a requirement
that the third item in the returned array respond to &lt;code&gt;each&lt;/code&gt;.&lt;/p&gt;


&lt;h3&gt;Block argument semantics&lt;/h3&gt;

	&lt;p&gt;This is a big change, and a big topic. The salient point is that when you do this:&lt;/p&gt;


&lt;pre&gt;
  array.each {|x| ... }
&lt;/pre&gt;

	&lt;p&gt;the block parameter list is handled like a method parameter list. In 1.8, blocks
use assignment semantics, so that &lt;code&gt;@ is like @x=&lt;/code&gt;. That’s why in 1.8 you can do:&lt;/p&gt;


&lt;pre&gt;
  array.each {|@x| ... }
&lt;/pre&gt;

	&lt;p&gt;(assign to an instance variable) or even:&lt;/p&gt;


&lt;pre&gt;
  array.each {|self.attr| ... }
&lt;/pre&gt;

	&lt;p&gt;(call the &lt;code&gt;attr=&lt;/code&gt; method on &lt;code&gt;self&lt;/code&gt;). You can’t do those things in 1.9; the parameters are bound
to the arguments using method-argument semantics, not assignment semantics.&lt;/p&gt;


&lt;h3&gt;Block variables scope&lt;/h3&gt;

	&lt;p&gt;Block parameters are local to the block.&lt;/p&gt;


&lt;pre&gt;
  x = 1
  [2,3].each {|x|  }
&lt;/pre&gt;

	&lt;p&gt;In 1.8, &lt;code&gt;x&lt;/code&gt; would now be 3 (outside the block). In 1.9 the two &lt;code&gt;x&lt;/code&gt;’s are not the
same variable, so the original &lt;code&gt;x&lt;/code&gt; is still 1.&lt;/p&gt;


	&lt;p&gt;However, a variable that (a) already exists, and (b) is not a block parameter,
is not local to the block.&lt;/p&gt;


&lt;pre&gt;
  x = 1
  [2,3].each {|y| x = y }
&lt;/pre&gt;

&lt;code&gt;x&lt;/code&gt; is now 3. If you want or need to shield your existing variables from being
used inside the block, declare variables as block local by putting them after a
semi-colon in the parameter list:
&lt;pre&gt;
  x = 1
  [2,3].each {|y;x| x = y }
&lt;/pre&gt;

	&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is still 1.&lt;/p&gt;


&lt;h3&gt;Method argument semantics&lt;/h3&gt;

	&lt;p&gt;Method arguments do some new things too. In particular, you can now put required
arguments after the optional argument glob parameter:&lt;/p&gt;


&lt;pre&gt;
  def my_meth(a,*b,c)
&lt;/pre&gt;

	&lt;p&gt;There aren’t too many situations where you’d want to do this (though there are one or two).&lt;/p&gt;


&lt;h3&gt;The * operator has changed semantics&lt;/h3&gt;

Compare 1.8:
&lt;pre&gt;
  &amp;gt;&amp;gt; a = [1,2]
  =&amp;gt; [1, 2]
  &amp;gt;&amp;gt; *b = a
  =&amp;gt; [[1, 2]]
  &amp;gt;&amp;gt; b
  =&amp;gt; [[1, 2]]
&lt;/pre&gt;

	&lt;p&gt;and 1.9:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; a = [1,2]
  =&amp;gt; [1, 2]
  &amp;gt;&amp;gt; *b = a
  =&amp;gt; [1, 2]
  &amp;gt;&amp;gt; b
  =&amp;gt; [1, 2]
&lt;/pre&gt;

	&lt;p&gt;I’ve always interpreted the &lt;code&gt;*&lt;/code&gt; operator in the following way:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;The expression *x represents the contents of the array x, as a
list.&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;In 1.8, &lt;code&gt;*b = [1,2]&lt;/code&gt; means that &lt;code&gt;[1,2]&lt;/code&gt; is the contents of the array &lt;code&gt;b&lt;/code&gt;, which
means that &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;[[1,2]]&lt;/code&gt;.  The 1.9 semantics don’t seem to behave that way. I’m
not sure what the new general rule for &lt;code&gt;*&lt;/code&gt; is, or whether maybe I was wrong that
there was such a rule that governed all cases (though I can’t think of an
exception).&lt;/p&gt;


&lt;h3&gt;Hashes are ordered&lt;/h3&gt;

	&lt;p&gt;This isn’t likely to bite you but it’s something to be aware of, both in your
own code and in looking at the code of others. Hashes are ordered by insertion
order. Reassigning to a key does not change the insertion placement of that key.&lt;/p&gt;


&lt;h3&gt;method and friends return symbols&lt;/h3&gt;

	&lt;p&gt;Expressions like &lt;code&gt;obj.methods&lt;/code&gt; and &lt;code&gt;klass.instance_methods&lt;/code&gt; return symbols instead
of strings in 1.9. That means that you might have to do &lt;code&gt;to_s&lt;/code&gt; operations on them,
if you need them as strings. However…&lt;/p&gt;


&lt;h3&gt;Symbols are string-like&lt;/h3&gt;

	&lt;p&gt;... symbols have become very string-like. You can match them against regular
expressions, run methods like &lt;code&gt;#upcase&lt;/code&gt; and &lt;code&gt;#swapcase&lt;/code&gt; on them, and ask them their
&lt;code&gt;size&lt;/code&gt; (i.e., their size in characters). I’m not sure what the purpose of this is. I’d just as soon
have symbols not be any more string-like than they absolutely have to be.&lt;/p&gt;


&lt;h3&gt;Gems are automatically in the load path&lt;/h3&gt;

	&lt;p&gt;When you start Ruby (or irb), your load path (&lt;code&gt;$:&lt;/code&gt;) will include the necessary
directories for all the gems on your system. That means you can just require
things, without having to require rubygems first. You can manipulate the load
path per gem version with the gem method.&lt;/p&gt;


&lt;h3&gt;Lots of enumerable methods return enumerators&lt;/h3&gt;

	&lt;p&gt;Called without a block, most enumerable methods now return an enumerator. It’s
fairly unusual to use the return value of blockless calls to &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, and
others, but it’s worth knowing that now you cannot assume that, for example,
&lt;code&gt;Array#each&lt;/code&gt; will always return its receiver.&lt;/p&gt;


	&lt;p&gt;You can use this feature to chain enumerators, though the circumstances in which
chaining enumerators really buys you anything are pretty few. I don’t
know of a case where you would do this:&lt;/p&gt;


&lt;pre&gt;
  array.map.other_method { ... }
&lt;/pre&gt;

	&lt;p&gt;with the exception of &lt;code&gt;map.with_index&lt;/code&gt;. The &lt;code&gt;map&lt;/code&gt; call is essentially a pass-through
filter here. (This was not true in early versions of 1.9, where you could attach
knowledge of a block to a chained enumerator, but that behavior was removed.)&lt;/p&gt;


	&lt;p&gt;Incidentally, you win the prize (which is endless glory :-) if you can account
for the difference between these two snippets:&lt;/p&gt;


&lt;pre&gt;
  &amp;gt;&amp;gt; {1 =&amp;gt; 2}.select {|x,y| x }
  =&amp;gt; {1=&amp;gt;2}
  &amp;gt;&amp;gt; {1 =&amp;gt; 2}.select.select {|x,y| x }
  =&amp;gt; [[1, 2]]
&lt;/pre&gt;

	&lt;p&gt;It’s all about enumerators….&lt;/p&gt;


	&lt;p&gt;If you’re careful about these changes, and keep an eye out for others, you should be able to
continue to have fun with Ruby in version 1.9 and beyond!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-12-29:337</id>
    <published>2008-12-29T15:13:00Z</published>
    <updated>2008-12-29T15:14:38Z</updated>
    <category term="Coolth and Weirdth" />
    <category term="Events" />
    <category term="Friends" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/12/29/cool-wishlist-management-at-wishsight" rel="alternate" type="text/html" />
    <title>Cool wishlist management at WishSight!</title>
<content type="html">
            &lt;p&gt;Announcing the opening of &lt;a href="http://www.wishsight.com"&gt;WishSight&lt;/a&gt;!&lt;/p&gt;


	&lt;p&gt;WishSight is for managing wishlists and gift-giving. It lets you see who’s given (or promised) what to whom, and it lets gift-givers for particular people communicate with each other, via a comment-board, so that they don’t duplicate gifts.&lt;/p&gt;


	&lt;p&gt;It’s based on a Christmas-list application I wrote in 2005 that my family and friends have been using every year since then. It’s completely merchant-unaffiliated. You can post links for the gifts you want,
and they can be links to any merchant.&lt;/p&gt;


	&lt;p&gt;WishSight helps you cut down on gift duplication, and increases the chances that people will get things they actually want, without the gift-givers having to do a round-robin of email or phone calls to pin down who’s buying what. And chances are they don’t all know each other anyway&amp;mdash;which doesn’t matter on WishSight, because you all communicate by leaving comments directly on your mutual friend’s wishlist.&lt;/p&gt;


	&lt;p&gt;All you have to do is:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;sign up&lt;/li&gt;
		&lt;li&gt;list the email addresses of people who you want to be able to see your wishlist&lt;/li&gt;
		&lt;li&gt;get those people to sign up and “whitelist” your email address&lt;/li&gt;
		&lt;li&gt;list your wishes&lt;/li&gt;
		&lt;li&gt;stake “claims” on other people’s wishes&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;There’s no stealth: the email addresses are only used internally to determine who’s allowed to
see whose wishlist. Also, you can list email addresses even if the people haven’t signed up yet.
Once they do sign up, they will automatically have permission to see your wishlist and claim
your wishes. No two-sided “handshakes” required; you just whitelist people.&lt;/p&gt;


	&lt;p&gt;Have fun, and let me know if any questions or problems!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-12-21:320</id>
    <published>2008-12-21T15:59:00Z</published>
    <updated>2008-12-21T16:23:03Z</updated>
    <category term="Coolth and Weirdth" />
    <category term="Friends" />
    <link href="http://dablog.rubypal.com/2008/12/21/on-the-menu-this-season-muslims-and-gays" rel="alternate" type="text/html" />
    <title>On the menu this season: Muslims and gays</title>
<content type="html">
            &lt;p&gt;Don’t get me wrong. I’m not saying that other forms of hate and prejudice are
extinct, or even on the wane. But it feels like the stars anti-Muslim sentiment
and homophobia are in the ascendancy.&lt;/p&gt;


	&lt;p&gt;It’s very much about statements that don’t sound aggressive or hateful, on the
surface, but that would never be made if hate didn’t lurk just below. I’m thinking,
for example, of a report I heard on the radio of some attack or other, involving
“three Muslims of middle-eastern descent.” I might have the phrasing of the “middle-eastern
descent” part wrong (though it was that or close to it). In any case, the salient bit, for
me, was “three Muslims.”&lt;/p&gt;


	&lt;p&gt;When was the last time you heard a crime described as having been committed by “three
Christians”? How about “A Jew broke into a convenience store…”? So what’s up with “three
Muslims”?&lt;/p&gt;


	&lt;p&gt;What’s up, of course, is hate. I don’t think the radio announcer or the newswriter hates Muslims.
But they do operate under a compulsion to mention explicitly that Muslims are Muslims, and
ultimately that’s so that the listenership can be put on alert to hate them. Does the
phrase “three Muslims” have explanatory power? Did these people do whatever they did
&lt;i&gt;because&lt;/i&gt; they are Muslims? No. There’s no reason to mention their religion except
out of habit of mentioning the fact that Muslims are Muslims.&lt;/p&gt;


	&lt;p&gt;Back when I was a university professor (1992-2005; in this case somewhere around 2003, I think),
the school newspaper had a kind of “person-in-the-street” feature, where they’d ask a few
people around campus a question and print selected answers. One week, the question was something
about Iraq. One of the people quoted in the feature said something along the lines of, “Bomb them
all off the face of the earth.” Or “Blow them all up”&amp;mdash;words to that effect.&lt;/p&gt;


	&lt;p&gt;My response was to call the editor-in-chief of the newspaper into my office and have a little
chat with him. I was under no institutional imperative to do so&amp;mdash;I was not involved with the paper directly&amp;mdash;but
it seemed to me that I had an opportunity to teach him perhaps the most important lesson of his
college career. “If the question of the week had been about how to improve the cafeteria food,” I asked
him, “and someone had said, ‘Line the whole cafeteria staff against the wall and shoot them dead,’ would
you have printed it?”&lt;/p&gt;


	&lt;p&gt;Of course he would not have, and said that he would not have. “The fact that what we would not
say about the cafeteria workers, we &lt;i&gt;would&lt;/i&gt; say about the entire population of
a Muslim country,” I explained, “is the
dehumanization process at work.” I do believe he understood and took my point on board.&lt;/p&gt;


	&lt;p&gt;So we mention that people are Muslims, and we lower the bar when it comes to suggesting (or, if you
like, joking about) their violent deaths. And it’s all very dangerous and should be sending up
serious alarms.&lt;/p&gt;


	&lt;p&gt;Labeling the gay as gay is an even more popular pastime. The world has settled for a breathtakingly
stunted view of what homosexuality entails, and how it manifests itself. It manifests itself, by the
way, as itself, not as an obsession with the song “YMCA” or an expertise in designer footware. Hey, more power
to you if you have that expertise. But the set of all men who do intersects in a miniscule subset with the set
of all men whose primary sexual orientation is toward men. Ditto for all the stereotypes.&lt;/p&gt;


	&lt;p&gt;Of course, the world can’t
deal with the idea that homosexuality manifests itself only as itself, because if that’s true, it means
you can’t tell who’s gay; and that,
like being unable to tell who’s Jewish, is unacceptable. The workaround is to &lt;i&gt;pretend&lt;/i&gt; that
you can tell who’s gay, resorting to babytalk about your “gaydar” when the stereotypes, as they must,
fail you.&lt;/p&gt;


	&lt;p&gt;And then, following a fairly tight train of thought, there’s hatred of gays.&lt;/p&gt;


	&lt;p&gt;First of all, let me explain that I include, as hatred, the “love the sinner, hate the sin” horseshit
espoused by the Catholic church. It is, to be sure, a kinder, gentler hatred than the burning-at-the-stake kind. The
idea is that you’re enlightened enough to acknowledge that some people just are gay. But you also understand that,
as gays, they must never indulge in the kinds of sexual activities they feel interested in. So you, as the
compassionate believer, offer to contribute to their happiness by giving them support and encouragement
as they fight to maintain their chastity.&lt;/p&gt;


	&lt;p&gt;How noble.&lt;/p&gt;


	&lt;p&gt;The church, of course, has two thousand years of experience disguising hate as love. But this one is
particularly devious and malign. Let’s cut to the chase: the only reason that one adult human being
would try to stop another adult human being, on a lifelong basis, from attaining romantic and/or
erotic satisfaction is that he or she (human one) &lt;i&gt;hates&lt;/i&gt; him or her (human two). No amount
of theological stroking can change that. It’s hate.&lt;/p&gt;


	&lt;p&gt;Not news, of course, that the Pope and friends hate gays. But interesting to see how slimy and
prurient they can get, in the process. Anyway, let’s move on.&lt;/p&gt;


	&lt;p&gt;Actually we can borrow a concept from the church: “invincible ignorance.” When I read the stuff about
homosexuality being a choice (note that it’s not that sexual preference is a choice, just homosexuality&amp;mdash;which
makes it kind of weird to describe it as a choice), my reaction is that if you put twenty articulate, knowledgeable
people in a room for twenty years with the person who’s taking the “choice” position, that person would emerge
still saying that homosexuality is a choice. There’s no point of entry for explanation, and no point of contact with
reality.&lt;/p&gt;


	&lt;p&gt;It’s pathetic, but I still count it as hate. At least it leads to hate. Or from hate, perhaps. Or maybe these people are
actually choosing to be vicious, and could stop themselves if they really wanted to. It’s hard to know. They’re
not saying.&lt;/p&gt;


	&lt;p&gt;With gay marriage on the news radar these days, more and more of this kind of discourse is showing up: the choice
thing, but also the “gays recruit people” thing (which is actually backwards; have these people ever watched television commercials?)
and, most disturbingly of all, the “gays prey on children” thing. And each of these things embodies two problems:
first, that people believe it; and second, that it’s acceptable to say it publicly.&lt;/p&gt;


	&lt;p&gt;Which hateful statements are acceptable and which aren’t is a kind of lump under the carpet that moves around
but never goes away. Unfortunately, the underlying hate never goes away either&amp;mdash;and ultimately, no matter
which targeted people or groups we’re talking about, it’s the underlying hate that matters. But who gets to say
what, and when, and with what consequences (or lack thereof) is, in itself, something that I think it’s worth
keeping fairly close tabs on.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-11-30:282</id>
    <published>2008-11-30T13:05:00Z</published>
    <updated>2008-11-30T13:26:09Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/11/30/probative-programming-the-physical-unification-of-code-and-tests" rel="alternate" type="text/html" />
    <title>Probative Programming: the physical unification of code and tests</title>
<content type="html">
            &lt;p&gt;I’m encouraged by a couple of recent conversations to go public with this
possible wacky idea. It has to do with code and testing.&lt;/p&gt;


	&lt;p&gt;I’ll start with the idea, and then say something about why I’m thinking along
these lines.&lt;/p&gt;


	&lt;p&gt;The idea is for a programming system designed in such a way that the code and
its tests are physically together, in one file. Furthermore, that file is not
executable. You have to run it through a dedicated filter utility to generate
the actual code file(s) from it.&lt;/p&gt;


	&lt;p&gt;So it’s a bit like, and indeed inspired by, Knuth’s Literate Programming,
where the code and its documentation are fused together in a single file which
contains both but is, itself, neither. You can’t execute that file; you have
to generate the real code files from it.&lt;/p&gt;


	&lt;p&gt;Adapting the master-file idea to testing, as I envision it, would also entail
the following constraint: that the system &lt;em&gt;would refuse to generate the code
files&lt;/em&gt; unless the code involved already had tests, and those tests passed.
In other words, the whole system would militate against using untested code in
production, by physically obstructing the creation of executable code files for
untested stretches of code.&lt;/p&gt;


	&lt;p&gt;It seems to me that this would make for a much more sensible and efficient flow
of energy than what we’ve got now. What we’ve got now are separate files, and
therefore the &lt;em&gt;possibility&lt;/em&gt; of running untested code. As long as that
possibility exists, people will run untested code. Reordering things so
that the creation of the executable code comes &lt;em&gt;after&lt;/em&gt; the successful
test run would, potentially, realign the energy of the whole process in a very
productive way.&lt;/p&gt;


	&lt;p&gt;As things stand now, the energy is flowing in a wrong and wasteful way. The
evidence for this is sociological, at least as much as it is technical.
Thorough testing involves keeping the code and the tests in contact with each
other through willpower and force, like holding like ends of two magnets
together. Therefore, people who test consistently end up with bragging rights,
which they often exercise. I hasten to add that I’m not talking about the
really accomplished, masterful engineers of the great testing frameworks we’ve
got available to us. Those people are above bragging. But there’s a
sub-population that isn’t.&lt;/p&gt;


	&lt;p&gt;I’m really tired of seeing the test police needling people about not having
written tests. It’s not that people shouldn’t write tests. Like I said, it’s
about the energy flowing the wrong way. The whole culture of test machismo is,
start to finish, a waste of energy and, above all, doesn’t work. You can’t get
the whole world to write tests by trying to shame people into it, one person at
a time. As long as the technical conditions allow for untested code, untested
code there will be.&lt;/p&gt;


	&lt;p&gt;So we’ve got untested code, alongside a culture of testier-than-thou
assertiveness.  Neither is good.&lt;/p&gt;


	&lt;p&gt;And then there’s the programming should be fun thing. Programming should be fun.
Testing should be a big part of programming. Therefore, testing should be fun.
However, it’s acquired a sort of “do it because it’s good for you” aura, like
using a treadmill or eating your vegetables. Again, this take on testing is
wasteful and irrelevant&amp;mdash;but it arises directly from the physical
possibility of running untested code, and will not go away as long as that
possibility exists.&lt;/p&gt;


	&lt;p&gt;I’ve made some very sketchy, preliminary attempts to see what a Probative
Programming file might look like, for a Ruby program. It’s a daunting task, and
one I may or may not ever succeed at. But I’m convinced that something along
these lines is both possible and desirable.&lt;/p&gt;


	&lt;p&gt;Finally, if there are existing systems that do what I’m describing, or anything substantially similar
to it, I’d be interested in hearing about them.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-11-24:277</id>
    <published>2008-11-24T12:18:00Z</published>
    <updated>2008-11-24T12:19:26Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/11/24/restful-rails-for-the-restless" rel="alternate" type="text/html" />
    <title>RESTful Rails for the restless</title>
<content type="html">
            &lt;h2&gt;QuickStarts-R-Us&lt;/h2&gt;

	&lt;p&gt;As one of the most active Rails trainers on the circuit, I come up a
lot against the challenge of introducing RESTful Rails to relative
newcomers. It’s a challenge because the &lt;span class="caps"&gt;REST&lt;/span&gt; support in Rails is very
high-level and, even for the diligent, basically impossible to
understand deeply without a knowledge of the subsystems&amp;mdash;in particular,
the routing system&amp;mdash;on which it is built.&lt;/p&gt;


	&lt;p&gt;I believe it’s possible, nonetheless, to understand up front how the RESTful support in
Rails fits into the subsystems that support it; and I believe that it’s beneficial to
gain such an understanding. My purpose is thus to provide a “QuickStart” 
introduction, not to the practice of writing RESTful Rails applications but
to the way the &lt;span class="caps"&gt;REST&lt;/span&gt; support in Rails fits into what’s around and beneath it. If you
want to do RESTful Rails but either find it too magical or don’t quite understand
how it relates to the framework overall (does it add? supersede? enhance?), then this
article may be of interest to you.&lt;/p&gt;


	&lt;p&gt;You may wonder why I’m not making use of the Rails scaffolding. That
is, as they say, “a whole nother” story. Short answer: the scaffolding
gives you a quick start, but also a quick end. It explains nothing and
leaves you with a lot of work to do to reverse the ill effects of
having a lot of “one-size-fits-none” code lying around your
application directory.&lt;/p&gt;


	&lt;p&gt;So no scaffolding. Also, no &lt;span class="caps"&gt;REST&lt;/span&gt; theory&amp;mdash;but by all means have a look
at the theory once you get into the practice. It’s just not my focus here.&lt;/p&gt;


	&lt;p&gt;In what follows, I’ve tried to be concise&amp;mdash;minimalist, 
almost. I’d advise not skimming over anything, even if you
think you already know it. I’m chosing the path carefully. If you
don’t trust me as a guide, that’s another matter entirely :-) If you
do, welcome.&lt;/p&gt;


&lt;h2&gt;What a (non-RESTful) Rails application does&lt;/h2&gt;

	&lt;p&gt;The job of a Rails application is to provide responses to requests.
Responses are generated by controller actions, which are (in Ruby
terms) instance methods of controller classes.&lt;/p&gt;


	&lt;p&gt;When your application receives a request, the first order of business
is to figure out which action to execute. The subsystem that does this
is the routing system.  It’s the routing system’s job, for every
request, to determine two things: &lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;1. controller
2. action&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;If it cannot determine those two things, it has failed, and you get a
routing error. If it can, the routing has succeeded. End of story.
(You might get a “No such action” error, but that’s not the routing
system’s problem. The routing system has done its job if it comes up
with an action, whether the action exists or not.)&lt;/p&gt;


	&lt;p&gt;The main information that the routing system uses to determine which
controller and action you want for a given request is the request &lt;span class="caps"&gt;URL&lt;/span&gt;.
By definition, every &lt;span class="caps"&gt;URL&lt;/span&gt; that’s meaningful to your application can be
resolved to a controller/action pair. If the &lt;span class="caps"&gt;URL&lt;/span&gt; contains information
beyond that which is needed to determine a controller and action, that
information gets stored in the &lt;tt&gt;params&lt;/tt&gt; hash, to which the controller
action has access. (That’s how you get &lt;tt&gt;params[:id]&lt;/tt&gt;, for example.)&lt;/p&gt;


	&lt;p&gt;The routing system uses a rule-based approach to resolving URLs into
controller/action pairs. The rules are stored in routes.rb. A rule might say,
for example (paraphrased here in English),
“A &lt;span class="caps"&gt;URL&lt;/span&gt; with (1) a string, (2) a slash, (3) a string, (4) a slash, and (5) an
integer means: execute action (3) of controller (1) with &lt;tt&gt;params[:id]&lt;/tt&gt;
set to (5)” (and indeed the default routing rule says exactly that).
Rules can be specific, to the point of silliness.  It’s perfectly
possible to program the routing system so that “/blah” means:
“the show action of the students controller with &lt;tt&gt;params[:id]&lt;/tt&gt; set to
1010.” There’s almost certainly no point in such a mapping, but the
point is that you can program the routing system in a fine-grained
way.&lt;/p&gt;


	&lt;p&gt;In the non-RESTful case, the &lt;span class="caps"&gt;URL&lt;/span&gt; is all that the routing system needs
to do its job of performing a rule-based determination of a controller
and an action.&lt;/p&gt;


	&lt;p&gt;In the RESTful case, it isn’t.&lt;/p&gt;


&lt;h2&gt;Enter the verbs&lt;/h2&gt;

	&lt;p&gt;This is the crux of RESTful routing in Rails. Everything else flows
directly from this, so make sure you understand it.&lt;/p&gt;


	&lt;p&gt;Instead of routing based solely on rule-driven mapping of each &lt;span class="caps"&gt;URL&lt;/span&gt; to
a controller/action pair, RESTful Rails adds another decision gate to
the chain: the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request method of the incoming request. That
method will be one of &lt;span class="caps"&gt;GET&lt;/span&gt;, POST, &lt;span class="caps"&gt;PUT&lt;/span&gt;, or &lt;span class="caps"&gt;DELETE&lt;/span&gt;. It’s the combined
information&amp;mdash;URL plus request method&amp;mdash;that the RESTful routing uses to
determine the controller and the action.&lt;/p&gt;


	&lt;p&gt;That means that for every incoming request, the correct
controller/action pair is determined not per &lt;span class="caps"&gt;URL&lt;/span&gt;, but per &lt;span class="caps"&gt;URL&lt;/span&gt; per
request method. That, in turn, means that a given &lt;span class="caps"&gt;URL&lt;/span&gt;, such as this:&lt;/p&gt;


&lt;pre&gt;
  http://blah.blah/houses/14
&lt;/pre&gt;

	&lt;p&gt;might map to two or more different controller/action pairs. It all
depends on the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request method.&lt;/p&gt;


	&lt;p&gt;In theory, any one &lt;span class="caps"&gt;URL&lt;/span&gt; can be routed to as many as four
controller/action pairs, because any one &lt;span class="caps"&gt;URL&lt;/span&gt; can be used in a &lt;span class="caps"&gt;GET&lt;/span&gt;,
&lt;span class="caps"&gt;PUT&lt;/span&gt;, POST, or &lt;span class="caps"&gt;DELETE&lt;/span&gt; request. In practice there aren’t that many
permutations, because some combinations of request method and &lt;span class="caps"&gt;URL&lt;/span&gt;
semantics are not meaningful. But the principle is what matters: a
single &lt;span class="caps"&gt;URL&lt;/span&gt; no longer has an unambiguous meaning, but must be
interpreted in conjunction with the request method.&lt;/p&gt;


	&lt;p&gt;Furthermore, these conjoined interpretations are hard-coded to a
pre-determined set of seven actions: &lt;tt&gt;index&lt;/tt&gt;, &lt;tt&gt;show&lt;/tt&gt;,
&lt;tt&gt;delete&lt;/tt&gt;, &lt;tt&gt;edit&lt;/tt&gt;,
&lt;tt&gt;update&lt;/tt&gt;, &lt;tt&gt;new&lt;/tt&gt;, and &lt;tt&gt;create&lt;/tt&gt;. (You can add 
custom ones, but those are the
canonical ones.) For example, the “houses” &lt;span class="caps"&gt;URL&lt;/span&gt; above, if requested
as a &lt;span class="caps"&gt;GET&lt;/span&gt;, automatically routes to the &lt;tt&gt;show&lt;/tt&gt; action of the houses
controller, with &lt;tt&gt;params[:id]&lt;/tt&gt; set to 14. If submitted with a &lt;span class="caps"&gt;PUT&lt;/span&gt;, it
goes to the &lt;tt&gt;update&lt;/tt&gt; action. &lt;span class="caps"&gt;A URL&lt;/span&gt; with no id field (/houses) goes
either to &lt;tt&gt;index&lt;/tt&gt; or to &lt;tt&gt;create&lt;/tt&gt;, depending on the request method. And so
forth.&lt;/p&gt;


	&lt;p&gt;That, as I say, is the crux of the matter: routing based on &lt;span class="caps"&gt;URL&lt;/span&gt; plus
request method. Keep this in mind as you get into the details and
bells and whistles of RESTful Rails.&lt;/p&gt;


	&lt;p&gt;Interpreting requests, though, is only half of the job of the routing
system. The other half is the generation of strings.&lt;/p&gt;


&lt;h2&gt;RESTful &lt;span class="caps"&gt;URL&lt;/span&gt; generation&lt;/h2&gt;

	&lt;p&gt;When you write this in your view:&lt;/p&gt;


&lt;pre&gt;
  &amp;lt;%= link_to "Click here for help", :controller =&amp;gt; "users", :action =&amp;gt; "help" %&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;your view ends up containing this:&lt;/p&gt;


&lt;pre&gt;
  &amp;lt;a href="/users/help"&amp;gt;Click here for help&amp;lt;/a&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;It’s the routing system that does the job of processing the &lt;tt&gt;link_to&lt;/tt&gt;
arguments and figuring out what the &lt;span class="caps"&gt;URL&lt;/span&gt; (or, in this case, the
relative path) in your tag should consist of.&lt;/p&gt;


	&lt;p&gt;The same thing happens with RESTful routing, except that you never
have to spell out the controller and action. Instead, you call yet
more helper methods. Compare this:&lt;/p&gt;


&lt;pre&gt;
  &amp;lt;%= link_to "User profile for #{user.name}",
               :controller =&amp;gt; "users", 
               :action =&amp;gt; "show",
               :id =&amp;gt; user.id %&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;with this:&lt;/p&gt;


&lt;pre&gt;
  &amp;lt;%= link_to "User profile for #{user.name}", user_path(user) %&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;You don’t have to define the method &lt;tt&gt;user_path&lt;/tt&gt;. It comes into being
automatically, when you write:&lt;/p&gt;


&lt;pre&gt;
  map.resources :users
&lt;/pre&gt;

	&lt;p&gt;in routes.rb. And it has a simple job: return the right string, in
this case the string ”/users/14” (assuming that user.id is 14).&lt;/p&gt;


	&lt;p&gt;For every resource you route, you get a fistful of such methods:
&lt;tt&gt;user_path(user)&lt;/tt&gt;, &lt;tt&gt;users_path&lt;/tt&gt;, 
&lt;tt&gt;new_user_path&lt;/tt&gt;, and &lt;tt&gt;edit_user_path&lt;/tt&gt; (plus
all of these with &lt;tt&gt;_url&lt;/tt&gt; instead of &lt;tt&gt;_path&lt;/tt&gt;). These methods do nothing but
generate strings. They have no knowledge of request methods or &lt;span class="caps"&gt;REST&lt;/span&gt;. 
In fact, they’re just examples of named routes&amp;mdash;methods that generate
the right strings for specific routing rules&amp;mdash;and you can use named
routes in routes.rb even without &lt;span class="caps"&gt;REST&lt;/span&gt;. The only &lt;span class="caps"&gt;REST&lt;/span&gt;-related special
treatment is that &lt;tt&gt;map.resources&lt;/tt&gt; automatically writes a bunch of these
methods for you. You can think of &lt;tt&gt;map.resources&lt;/tt&gt; as, primarily, a macro
that writes named route methods, much as &lt;tt&gt;attr_accessor&lt;/tt&gt; automatically
writes getter and setter methods.&lt;/p&gt;


	&lt;p&gt;The specifics of what the various RESTful named route methods do is
for future study. The point here is to see the roadmap. You do
&lt;tt&gt;map.resources :users&lt;/tt&gt;, and from that point on, you can use methods in
your views to create &lt;span class="caps"&gt;URL&lt;/span&gt; strings, rather than having to spoonfeed the
information about which controller, action, and id are involved.&lt;/p&gt;


	&lt;p&gt;But that still leaves the question of the request method. How does
”/users/14” know which action to trigger when clicked?&lt;/p&gt;


&lt;h2&gt;Specifying request methods&lt;/h2&gt;

	&lt;p&gt;When you write view code that generates path strings (with &lt;tt&gt;link_to&lt;/tt&gt;,
&lt;tt&gt;form_for&lt;/tt&gt;, &lt;tt&gt;link_to_remote&lt;/tt&gt;, etc.), you want the right string, obviously,
but you also need the link, when clicked, to use a particular &lt;span class="caps"&gt;HTTP&lt;/span&gt;
request method for the request. Otherwise the RESTful routing system
won’t have enough information to make sense of the &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;


	&lt;p&gt;The helper methods that generate hyperlinks all have sensible &lt;span class="caps"&gt;HTTP&lt;/span&gt;
request method defaults (which you can override if needed). &lt;tt&gt;link_to&lt;/tt&gt;
generates a link that will submit a &lt;span class="caps"&gt;GET&lt;/span&gt; request. &lt;tt&gt;form_for&lt;/tt&gt; generates a
&lt;span class="caps"&gt;POST&lt;/span&gt; form tag (method=“post”), unless you tell it to use &lt;span class="caps"&gt;PUT&lt;/span&gt; (which is
conventional for update operations, as opposed to new record creation
operations), and so forth.&lt;/p&gt;


	&lt;p&gt;Again, the named route methods don’t have request method intelligence.
The enclosing hyperlink-writing methods (&lt;tt&gt;link_to&lt;/tt&gt; and friends) do. They
just used the named route methods as lower-level helpers for the
specific purpose of generating the right strings.&lt;/p&gt;


&lt;h2&gt;Invisible ink&lt;/h2&gt;

	&lt;p&gt;One of the challenges of using RESTful routing in Rails is that you
end up with not very much information available to you visually. When
you write a RESTful form in your view, let’s say for an update:&lt;/p&gt;


&lt;pre&gt;
  &amp;lt;% form_for :house, :url =&amp;gt; house_path(@house.id),
                     :html =&amp;gt; { :method =&amp;gt; :put } do |f| %&amp;gt;
  &amp;lt;% end %&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;you never see the word “update” in routes.rb, nor in the &lt;span class="caps"&gt;URL&lt;/span&gt;, nor in
the view templates, nor in the &lt;span class="caps"&gt;HTML&lt;/span&gt; source of your rendered views.
You just have to know that a &lt;tt&gt;thing_path&lt;/tt&gt;-style named route, coupled
with a request method override to &lt;span class="caps"&gt;PUT&lt;/span&gt; (override of the default &lt;span class="caps"&gt;POST&lt;/span&gt;
for &lt;tt&gt;form_for&lt;/tt&gt;, that is), will result in a form that, when submitted,
will send a &lt;span class="caps"&gt;PUT&lt;/span&gt; request to the &lt;tt&gt;update&lt;/tt&gt; action of the houses controller.
And you have to trust that the routing system will succeed in so
routing it.&lt;/p&gt;


	&lt;p&gt;RESTful routing pushes most of the routing intelligence&amp;mdash;which, as you
now know, means the determination of a controller/action pair from an
incoming request&amp;mdash;under the surface. You have to learn how the
&lt;span class="caps"&gt;REST&lt;/span&gt;-ified routing system thinks. The early phases of learning RESTful
routing tend to involve memorizing the combinations of named routes
and request methods, and which action they point to. The good news is
that there’s a finite number of them, and they make sense. If it seems
like routing soup, hang in there and look closely at the logic. It
will come clear.&lt;/p&gt;


&lt;h2&gt;The rest…&lt;/h2&gt;

	&lt;p&gt;That’s the basics. There’s a lot more to it, including (but not
limited to) more “magic” shortcuts. But if you get the basic ideas
you’ll be in good shape. &lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;The basic routing system resolves a &lt;span class="caps"&gt;URL&lt;/span&gt; to a controller/action pair.&lt;/li&gt;
		&lt;li&gt;RESTful routing resolves a &lt;span class="caps"&gt;URL&lt;/span&gt;/request-method combination to a
  controller/action pair. &lt;/li&gt;
		&lt;li&gt;&lt;tt&gt;map.resources :things&lt;/tt&gt; generates a bunch of named routes
  (&lt;tt&gt;things_path&lt;/tt&gt;, etc.) for you automatically.&lt;/li&gt;
		&lt;li&gt;You don’t see as much visual evidence of the routing logic with
  RESTful routing as with non-RESTful routing, so you have to
  learn exactly what it’s thinking, especially the seven hard-coded
  action names.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Now go forth and &lt;span class="caps"&gt;REST&lt;/span&gt;. Oh, one more thing. Here’s a chart I once made, showing how the
named routes map through the request methods to the seven canonical actions. The chart uses
the &lt;tt&gt;_url&lt;/tt&gt; methods (which give you the whole thing, including http://), but the
&lt;tt&gt;_path&lt;/tt&gt; versions would exist too.&lt;/p&gt;


	&lt;p&gt;&lt;img src="http://www.wobblini.net/images/routes.png" alt="RESTful routing chart" /&gt;&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-10-03:233</id>
    <published>2008-10-03T21:14:00Z</published>
    <updated>2008-10-03T21:15:36Z</updated>
    <category term="Coolth and Weirdth" />
    <category term="Events" />
    <link href="http://dablog.rubypal.com/2008/10/3/why-i-am-suspicious-of-the-bailout-bill" rel="alternate" type="text/html" />
    <title>Why I am suspicious of the bailout bill</title>
<content type="html">
            &lt;p&gt;The bailout bill has just passed. I know very little about economics, little enough that I don’t feel entitled to a strong opinion one way or the other on whether the bill should have passed. But I am suspicious of it.&lt;/p&gt;


	&lt;p&gt;I’m suspicious of it, for one thing, because of the fear-mongering that has surrounded it; it’s very reminiscent of the ongoing “Terrorists will come and kill your family if the executive branch doesn’t get a blank check for waging undeclared war” campaign, and things in that vein.&lt;/p&gt;


	&lt;p&gt;But I’m even more suspicious of the bill because of all the rhetoric about how it will help “Main Street” as well as “Wall Street”. I don’t know whether it will or not, but what troubles me is the fact that this kind of rhetoric makes it sound like Congress and the Bush administration are desperate to help Main Street. The fact is that, in general, they’re not.&lt;/p&gt;


	&lt;p&gt;Every microsecond of every day in the history of this country there have been uncountable opportunities for the government to help citizens with financial problems, difficulty paying for a home, lack of job opportunities, inability to get credit, and all the rest of it. The thrust of the behavior of the government for most of the history of the country has been not to bother helping such people to any significant degree.&lt;/p&gt;


	&lt;p&gt;Now, all of a sudden, helping Main Street leaps to the front of the congressional and executive agenda. I’m disinclined to buy it. If the common weal were really a government priority, we would have known by now. I find it immensely suspicious that the greatest outpouring of social concern, at least as measured in money, comes tethered to a Wall Street bailout.&lt;/p&gt;


	&lt;p&gt;If Main Street is going to benefit from the delivery of a de facto blank check to Wall Street, surely it would not benefit any &lt;i&gt;less&lt;/i&gt; from having money delivered to it directly. But you don’t hear any talk of, say, the government purchasing houses for the victims of fiscal mismanagement. I suppose it would have taken too long to draft a bill that did that; and as we know, the earth would have left its axis if the bill had not been passed this week….&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-09-13:219</id>
    <published>2008-09-13T10:00:00Z</published>
    <updated>2008-09-13T10:05:23Z</updated>
    <category term="Computers" />
    <category term="Events" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/9/13/tracks-a-go-go-at-rubyconf-2008" rel="alternate" type="text/html" />
    <title>Tracks a-go-go at RubyConf 2008!</title>
<content type="html">
            &lt;p&gt;&lt;a href="http://www.rubycentral.org"&gt;Ruby Central&lt;/a&gt; is gearing up for
&lt;a href="http://2008.rubyconf.org"&gt;RubyConf 2008&lt;/a&gt;, which has a
fantastic program and which you can still 
&lt;a href="https://www.regonline.com/rubyconf2008"&gt;register for&lt;/a&gt; (at
time of writing, anyway!).&lt;/p&gt;


	&lt;p&gt;People have noticed, naturally, that we’ve gone over entirely to a
multi-track format (except for keynotes and a couple of other special
slots). And they’re surprised; we used to be one-track, and then last
year we were multi-track but with a good dose of plenary sessions.&lt;/p&gt;


	&lt;p&gt;So I thought I’d say something about the multi-trackedness of RubyConf
2008, for anyone who’s interested.&lt;/p&gt;


	&lt;p&gt;The bottom line is that we’ve scheduled multiple tracks because we
got so many really, really good proposals. Of course we can’t accept
all of them; we can’t be &lt;em&gt;that&lt;/em&gt; multi-track.  There will always
be a cutoff, and where the cutoff comes always involve a judgment
call. This time around the judgment was that the number of talks we’d
have to exclude, in order to dilute the multi-trackedness
significantly, was too great.&lt;/p&gt;


	&lt;p&gt;In fact, we started drafting a schedule without explicitly discussing
the multi-track issue; it mostly emerged from what we jotted down, and
then it continued to make sense to us as we started analyzing the
track issue more closely.&lt;/p&gt;


	&lt;p&gt;People have asked whether it’s about the size of the event. It is, in
a couple of ways&amp;mdash;subtle ways, perhaps, but important.&lt;/p&gt;


	&lt;p&gt;For one thing, we know that not every speaker is comfortable getting
up in front of 500 people. Lots are, but it’s still a lot to ask.
Breakout sessions make for situations in which more speakers are
likely to be comfortable.&lt;/p&gt;


	&lt;p&gt;Of course, if there are only fifteen speakers, we could easily find
people who don’t mind a big audience. But what about that “only
fifteen speakers” thing?&lt;/p&gt;


	&lt;p&gt;In a conference with 400-500 people present, it’s definitely more fun
if, say, twelve percent of the people prowling the halls and sitting
next to you at lunch are speakers, instead of two or three percent.
Having fifteen speakers at an event with over 400 people isn’t the
same, for anyone, as having fifteen speakers at an event with sixty
people. If the ratio is too lop-sided, it gets too much into the “us
and them” thing. We’ve never been into that.&lt;/p&gt;


	&lt;p&gt;Another reason we’re OK with moving toward a multi-track format is the
proliferation and success of the Ruby regional conferences, many of
which are one-track. Everyone should attend, at some point, a
one-track conference. It’s really cool the way everyone at such a
conference shares the same experience. My first conference was a
one-track academic film conference in 1985, and it was great. 
And the wonderful flowering of the Ruby regional conference culture
means that, even if it isn’t at RubyConf, many Rubyists will get a
chance to have that experience.&lt;/p&gt;


	&lt;p&gt;We started our regional conference grant program in 2006 in the hope
that “regional” wasn’t going to mean “provincial”&amp;mdash;that regional
conferences could be top-notch events&amp;mdash;and that hope has been
fulfilled beyond what we could possibly have wished for. (And
certainly way beyond what we can take credit for. The regional 
organizers have been amazing!) These high-quality small events can
address many needs and desires, including the desire for the
experience of a one-track format.&lt;/p&gt;


	&lt;p&gt;In sum, the RubyConf format for 2008 is a format for its time, its
year, its configuration of the Ruby world. We’re nothing but excited
about it and hope you’ll come and share the fun!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-09-06:216</id>
    <published>2008-09-06T08:07:00Z</published>
    <updated>2008-09-06T08:08:47Z</updated>
    <category term="Computers" />
    <category term="Events" />
    <category term="Ruby" />
    <category term="Travel" />
    <link href="http://dablog.rubypal.com/2008/9/6/back-from-railsconf-europe-2008" rel="alternate" type="text/html" />
    <title>Back from RailsConf Europe 2008</title>
<content type="html">
            &lt;p&gt;I got home yesterday from &lt;a href="http://en.oreilly.com/railseurope2008/public/content/home"&gt;RailsConf Europe 2008&lt;/a&gt; in Berlin, and am very happy to say that the event was a major success.&lt;/p&gt;


	&lt;p&gt;It was particularly gratifying to hear from many attendees that they found the program content more advanced and more instructive than last year. It’s always hard to fine-tune the level of talks across a big program like this, and I’m really glad to have evidence that people overall felt it had gone in the right direction.&lt;/p&gt;


	&lt;p&gt;Highlights included keynote addresses by David Heinemeier Hansson and Jeremy Kemper, as well as a Rails core team panel discussion with David, Jeremy, and Michael Koziarski. &lt;span class="caps"&gt;DHH&lt;/span&gt; led us through some very interesting thoughts on the notion of “legacy” code, and how that concept plays out with respect to one’s own development and growth as a programmer. Jeremy talked about performance, and masterfully expanded the horizon beyond the shop-worn “Does Rails scale?” stuff to some very specific and powerful techniques for evaluating and adjusting performance.&lt;/p&gt;


	&lt;p&gt;We also held a “Symposimi” (the name is based on a misspelling in the program; it should have been “Symposium” but came out “Symposimi,” and I decided that sounded really cool!) on the subject of Ruby versions and implementations&amp;mdash;who’s using what, what’s targeting what, the pros and cons of moving to 1.8.7 and/or 1.9. A symposimi is a town-meeting-like gathering of people who want to ask and answer questions about a topic. It’s more audience-based than a symposium, and less hierarchical.&lt;/p&gt;


	&lt;p&gt;The symposimi was fun for me because I got to do some live code demos, which I usually don’t at the conferences I’m an organizer of!&lt;/p&gt;


	&lt;p&gt;Lots of people asked about next year. We don’t know yet where RailsConf Europe will be in 2009. Probably not Berlin, just because we’d like to move it around. If you have suggestions (and a rationale other than that you happen to live there :-) by all means let me know.&lt;/p&gt;


	&lt;p&gt;Now that &lt;span class="caps"&gt;RCE2008&lt;/span&gt; is over, I’m looking forward to RubyConf. Stay tuned for announcements of the program and registration!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-08-06:175</id>
    <published>2008-08-06T11:57:00Z</published>
    <updated>2008-08-06T11:58:16Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/8/6/pseudo-persuasion-in-online-discourse" rel="alternate" type="text/html" />
    <title>Pseudo-persuasion in online discourse</title>
<content type="html">
            &lt;p&gt;I know it’s pointless&amp;mdash;I’m not going to make a dent in
it&amp;mdash;but I feel moved to say something about the biggest problem
in online discourse: pseudo-persuasion.&lt;/p&gt;


	&lt;p&gt;The term is a bit awkward, but you’ll recognize what I’m talking about
because it monopolizes an almost literally incredible proportion of
email lists, news groups, blog comments, and &lt;span class="caps"&gt;IRC&lt;/span&gt; chats, and you’ve
seen plenty of it. I’m talking about the endless stream of &lt;i&gt;this&lt;/i&gt;
vs. &lt;i&gt;that&lt;/i&gt;. Emacs vs. vi, Ruby vs. Python, Ubuntu vs. Redhat, Mac
vs. PC, tabs vs. spaces, and all the monumentally huge and boring rest
of it.&lt;/p&gt;


	&lt;p&gt;Yes, there are interesting comparative points you can make about all
of these pairings. Yes, some people make interesting points. I’m not
talking about those points. I’m talking about the other 99.99% of
online comparative talk, the inexhaustible store of “mine is better
than yours” drivel, the vacuous chatter that, despite its vacuity,
manages to choke and clog the online world as if it were of substance.&lt;/p&gt;


	&lt;p&gt;I call it pseudo-persuasion because it sounds like persuasive speech,
but isn’t. It is persuasive neither in effect, nor in intent. Millions
upon millions of words pour forth&amp;mdash;arguments in favor of A and
against B, checklists of assertions and accusations, praise of
features and denouncement of shortcomings&amp;mdash;all delivered in the
most fervent persuasive language but not one syllable actually
persuading anyone of anything, and not one syllable written in the
expectation of persuading anyone of anything.&lt;/p&gt;


	&lt;p&gt;Have you ever said to yourself, “Gee, someone on &lt;span class="caps"&gt;IRC&lt;/span&gt; said that
Emacs keybindings aren’t intuitive, so starting tomorrow I’ll switch
to vi”? Have you ever met anyone who, after asking a question about a
Linux problem and receiving an answer consisting of the single
utterance, “OS X!!”, proceeded to run out and buy a Mac? Did
you start using your current favorite programming language because
someone told you, in so many words, that the one you had been using
sucked and this one was better?&lt;/p&gt;


	&lt;p&gt;My late father used to say that “No one ever convinces anyone of
anything.” He didn’t believe it literally, or he would not have bothered
co-authoring the brief in &lt;i&gt;Brown v. Board of Education&lt;/i&gt;.
In general, he didn’t mean it with regard to legal and forensic
argumentation. He did mean it, however, with regard to cocktail party
chatter, exchanges among politically widely-separated colleagues,
heated classroom arguments among students, and the like: day-to-day
exchanges where the urge to state an opinion does not imply an
inclination to take someone else’s opinion seriously.&lt;/p&gt;


	&lt;p&gt;Non-persuasive persuasion can serve a purpose. It’s good, for example,
for students to put their thoughts into words, even though they’re not
really listening to each other. Usually, though, it’s just a way to
fill otherwise awkward social time.&lt;/p&gt;


	&lt;p&gt;When people yap at each other about Emacs and vi, however, it’s not
filling awkward social time. To be honest, I don’t know what it’s
doing. It certainly is not debate. It sounds like debate, and it uses
rhetorical devices that are also found in debate. But it is not
debate. No one can “win”, no one is listening to anyone else, and the
likelihood of persuasion being achieved approaches zero. Nothing is at
stake, and no one actually expects any conclusion, outcome, or
productivity to emerge from the exchange.&lt;/p&gt;


	&lt;p&gt;But my case against pseudo-persuasion is not that the practitioners
don’t take each other seriously enough. They hardly could, given how
much of this crap there is. My case against it is that it’s a 
staggering waste of time, mental energy, and passion. Can you imagine
what would have happened if, over the past couple of decades, 
participants in online forums had taken, say, five percent of the time
they’ve spent pissing at each other, and used it instead to
collaborate on software or technical writings?&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-07-20:164</id>
    <published>2008-07-20T12:31:00Z</published>
    <updated>2008-07-20T12:32:39Z</updated>
    <category term="Computers" />
    <category term="Events" />
    <category term="Friends" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/7/20/co-training-with-erik-kastner" rel="alternate" type="text/html" />
    <title>Co-Training with Erik Kastner</title>
<content type="html">
            &lt;p&gt;My friend and nearly-neighbor &lt;a href="metaatem.net"&gt;Erik Kastner&lt;/a&gt; is going to be joining me to teach the Ruby Power and Light course &lt;a href="http://www.rubypal.com/events/08182008"&gt;“Advancing With Rails”&lt;/a&gt; in Edison, New Jersey, August 18-21. This will be &lt;span class="caps"&gt;RPL&lt;/span&gt;’s first co-taught course, and I’m really looking forward to it.&lt;/p&gt;


	&lt;p&gt;See the calendar at &lt;a href="http://www.rubypal.com"&gt;Ruby Power and Light&lt;/a&gt; for more info!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-07-05:150</id>
    <published>2008-07-05T01:27:00Z</published>
    <updated>2008-07-05T01:28:36Z</updated>
    <category term="Computers" />
    <category term="Coolth and Weirdth" />
    <category term="Events" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/7/5/july-6-12-is-link-to-something-other-than-wikipedia-week" rel="alternate" type="text/html" />
    <title>July 6-12 is "Link To Something Other Than Wikipedia" Week!</title>
<content type="html">
            &lt;p&gt;During the week of July 6-12, I invite and encourage everybody who includes links in their email, blog posts, online chats, and other documents, to link to something other than Wikipedia.&lt;/p&gt;


	&lt;p&gt;I’m not trying to be a Wikipedia slayer. It wouldn’t matter if I were; that’s not going to happen.&lt;/p&gt;


	&lt;p&gt;I just want to remind everyone that there are thousands and thousands of interesting, well-informed, thought-provoking, educational websites out there, written by professors, researchers, doctors, artists, scientists, practitioners of every craft and industry&amp;mdash;and however you slice it, these websites are getting a raw deal when it comes to links.&lt;/p&gt;


	&lt;p&gt;It’s not about whether Wikipedia articles are accurate or not. Some are, some aren’t. But that’s true of &amp;lt;emph&gt;the whole Web&amp;lt;/emph&gt;. Let’s stop acting as if Wikipedia has some special status.&lt;/p&gt;


	&lt;p&gt;The best thing about the Web is that it &lt;i&gt;isn’t&lt;/i&gt; an encyclopedia. And Wikipedia is evidence that when Web culture meets encyclopedia culture, encyclopedia culture wins. Sure, Wikipedia is collaborative. Most encyclopedias are. They still give off an aura of total, centralized, complete knowledge and authority. And that’s not very Web-like, is it?&lt;/p&gt;


	&lt;p&gt;So:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;If you’ve got a point to make about grammar, look for an English (or whatever language it is!) professor’s site. There are some great ones. Point the person you’re arguing with to a couple of those.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Countries have their own informational websites, some official and some written by people who live there. Many of them are multi-lingual. Are they “balanced”? Probably not, at least not in the network news way. So much the better! Balance on the Web emerges from the quantity and interplay of sites. It’s not supposed to be embodied in every document. How boring!&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;Wikipedia is great for technology-related topics. But so are lots of other sites. Are you &lt;i&gt;sure&lt;/i&gt; that Wikipedia’s description of the algorithm you’re discussing on that mailing list is really the best? the clearest? the most engaging?&lt;/li&gt;
	&lt;/ul&gt;


	&lt;ul&gt;
	&lt;li&gt;You get the idea! Strike a blow for the richness of the Web, and for the beauty of discourse that doesn’t try to be poker-faced and non-committal, even about important issues. Rediscover the expertise of the many Web contributors who write about their own specialties and have taken the time to share their thoughts.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;There’s a lot to learn at Wikipedia, but it’s time to spread the linkage!&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-06-07:124</id>
    <published>2008-06-07T15:22:00Z</published>
    <updated>2008-06-07T15:24:28Z</updated>
    <category term="Coolth and Weirdth" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/6/7/slide-words-if-that-s-really-what-they-re-called" rel="alternate" type="text/html" />
    <title>Slide words (if that's really what they're called)</title>
<content type="html">
            &lt;p&gt;A guy I was chatting with in the men’s lounge of the spa at Harrah’s
in Atlantic City was telling me about “slide words.” I can’t find
anything about them (and I’ve tried “slider words” and a few other
variants) anywhere. I don’t think he made the term up, and he
certainly didn’t think he had.&lt;/p&gt;


	&lt;p&gt;Anyway, even though I can’t find any background information or
previous discussion, I am going to talk about “slide words” (or
whatever they’re called).&lt;/p&gt;


	&lt;p&gt;A slide word, I gather, is a word or phrase that has come to serve as
shorthand for an entire argument&amp;mdash;except that the argument isn’t really
there. We’re all just supposed to think it is. The slide word acts as a black
hole, drawing further discussion and thoughtful debate into itself and killing
it.&lt;/p&gt;


	&lt;p&gt;Slide words are bad because they take the place of actual analysis of
situations and events. Every slide word has a kind of implicit, “Sigh. Here we
go again” attached to it, even though the “again” part is asserted through the
use of the slide word itself and not actually demonstrated.&lt;/p&gt;


	&lt;p&gt;I have something to say here about three slide words: conspiracy theory,
Chinese menu, and bikeshed.&lt;/p&gt;


&lt;h1&gt;“Conspiracy theory”&lt;/h1&gt;

	&lt;p&gt;“Conspiracy theory” is perhaps the best example of a slide word. Consider the
following exchange, which is made up but is actually very similar to several I
have had:&lt;/p&gt;


&lt;div&gt;
Me: Apparently there might have been an eighth Challenger victim. A
Brazilian fisherman said that his son was struck and killed by falling
debris, while they were out on a boat. 

	&lt;p&gt;Other Person: Why haven’t we heard about it?&lt;/p&gt;


	&lt;p&gt;Me: It was in the news briefly. I guess it was considered more prudent
to downplay it.&lt;/p&gt;


Other Person: That sounds like a conspiracy theory. 
&lt;/div&gt;

	&lt;p&gt;With the invocation of the term “conspiracy theory,” all further
discussion of what might have actually happened is discredited. The events
surrounding the death of John Kipalani’s son need not be examined in
any detail; nor need the press coverage (or lack thereof). “Conspiracy
theory” plays the role of a rebuttal of the statements about the Challenger
disaster, even though it has no actual connection to them.&lt;/p&gt;


Here’s another example:
&lt;div&gt;

	&lt;p&gt;Me: The only people who profited from 9/11 in any way, financially or
politically, were George W. Bush and his family and friends. I
therefore assume, as a matter of the simplest logic, that Bush had
something to do with it.&lt;/p&gt;


Other Person: What are you, a conspiracy theorist? 
&lt;/div&gt;

	&lt;p&gt;Again, the slide word (or slide phrase) gets played as if it were a
trump card, when in fact it has nothing whatsoever to do with the
question of Bush’s culpability in the 9/11 attacks, and neither refutes the
logic that’s on offer nor adds information that might bring about a
reconsideration of that logic.&lt;/p&gt;


&lt;h1&gt;“Chinese menu”&lt;/h1&gt;

	&lt;p&gt;Another slide word I’ve come across, in a somewhat narrower setting, is
“Chinese menu.”&lt;/p&gt;


	&lt;p&gt;When I was teaching at a university, I was involved in lots of discussions,
formal and otherwise, about core curricula: what they should include, how they
should be administered, and so on. I remember that in one series of such
discussions, any time anyone suggested anything along the lines of having
students choose one or more courses from each of several course groupings,
someone else would say, “That’s like a Chinese menu.” Eventually it became
just “Chinese menu.”&lt;/p&gt;


	&lt;p&gt;I have no memory of any discussion of &amp;lt;emph&gt;why&amp;lt;/emph&gt; it was considered a bad
idea to adminster a core curriculum this way. All that was required to rebut
the idea was “Chinese menu.” Actual argumentation did not enter into it.&lt;/p&gt;


&lt;h1&gt;“Bikeshed”&lt;/h1&gt;

	&lt;p&gt;Another slide word, a rather obnoxious one that seems to be enjoying
considerable popularity these days, is “bikeshed.” If someone says “bikeshed,” 
they’ve said all they need to say (or at least all they think they need to
say, and certainly all they’re planning to say) to establish that what you
have been talking about is trivial and not worth discussing.&lt;/p&gt;


	&lt;p&gt;Saying “bikeshed” to someone, instead of telling that person outright that you
find his or her statements trivial and worthless, is not only needlessly indirect but, in
most cases I’ve seen, wrong.&lt;/p&gt;


	&lt;p&gt;The original bikeshed concept, as I understand
it (which is from second-hand accounts, so I could be wrong), had to do with
the phenomenon of committees spending more time arguing over what color to
paint the company bikeshed, than over the allocation of funds to build a
nuclear power plant.&lt;/p&gt;


	&lt;p&gt;The problem with the typical usage of “bikeshed” today is
that there’s no nuclear power plant in the picture. 
It’s more likely to be a bunch of people
on an email list discussing the best name for a proposed new method in Ruby,
or something like that. Then someone who feels superior to the discussion
(which would exclude the creator of Ruby, as well as many of his colleagues,
associates, and friends) comes along and says “Bikeshed.”&lt;/p&gt;


	&lt;p&gt;But if we weren’t
talking about method names, we’d be talking about literal constructors for
runtime objects. And if not that, then perhaps the question of whether
parentheses around parameter lists in method definitions should be mandatory. 
All of these things are important to people interested in the Ruby programming
language; but, with respect, I will state unequivocally that none of them is
as important an issue as nuclear power.&lt;/p&gt;


	&lt;p&gt;Furthermore, saying “bikeshed” implies
that you think the group you’re addressing not only is wasting its time on the
current topic, but has a history of spending too &amp;lt;emph&gt;little&amp;lt;/emph&gt; time on
important things. Even scaling it down so that the important things aren’t
really important things in the nuclear power sense, no one ever says what
those things are. That’s probably because “bikeshed” is just a snide
 way to say, “What you’re saying is stupid,” and not a unit
of cogent or well-sustained argumentation of any kind.&lt;/p&gt;


	&lt;p&gt;Thus slide words. I’m glad there’s a name for them, even though it’s puzzling
that the only person who seems to have heard the name is that guy at Harrah’s.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-05-04:99</id>
    <published>2008-05-04T13:59:00Z</published>
    <updated>2008-05-04T14:00:14Z</updated>
    <category term="Events" />
    <link href="http://dablog.rubypal.com/2008/5/4/death-of-a-racehorse" rel="alternate" type="text/html" />
    <title>Death of a racehorse</title>
<content type="html">
            &lt;p&gt;I’ve always vaguely disliked horse races. The anthropomorphizing of the horses, the claims that they know that they’re involved in a race and that they share the goals of their owners, is manifestly silly and self-serving. And the whipping always bothered me. I suppose I made myself believe that horses didn’t really care and that an attack with a whip was, to them, kind of like a verbal exhortation to us. (Not that verbal exhortations can’t be painful, but they’re not physical).&lt;/p&gt;


	&lt;p&gt;The death of Eight Belles shocked me out of my indifferent, complacent position.&lt;/p&gt;


	&lt;p&gt;All the crap in the news about how noble she was, how competitive her spirit, how great her self-sacrifice… it’s all smug and disgusting beyond belief, despite the accompanying descriptions of the tears glistening in the eyes of the various stakeholders. What really happened was that this horse was forced to run as fast as she could, for reasons she could not understand and that had nothing to do with her well-being, and as a direct result, her legs fell apart, and then someone killed her.&lt;/p&gt;


	&lt;p&gt;That’s it; that’s all there is to it.&lt;/p&gt;


	&lt;p&gt;Why is this allowed to go on? Is it simply because more horses survive races than don’t?&lt;/p&gt;


	&lt;p&gt;For some reason, we continue to give the benefit of the doubt to this bizarre, nasty, money-drenched “sport”. Except that for me, at this point, there is no doubt, and no further conferral of the benefit.&lt;/p&gt;
          </content>  </entry>
  <entry xml:base="http://dablog.rubypal.com/">
    <author>
      <name>dblack</name>
    </author>
    <id>tag:dablog.rubypal.com,2008-04-24:97</id>
    <published>2008-04-24T11:55:00Z</published>
    <updated>2008-04-24T11:58:08Z</updated>
    <category term="Computers" />
    <category term="Ruby" />
    <link href="http://dablog.rubypal.com/2008/4/24/splitting-hairs-over-resource-part-2" rel="alternate" type="text/html" />
    <title>Splitting hairs over "resource": the case for the affirmative (Part 2)</title>
<content type="html">
            &lt;p&gt;In &lt;a href="http://dablog.rubypal.com/2008/3/23/splitting-hairs-over-resource"&gt;part 1&lt;/a&gt; of this two-part post, I explained my concern that the word
“resource” has become too closely associated in Rails-related usage
with some combination of model, database table, and controller/model
stack&amp;mdash;none of which do justice, as definitions or even first
approximations, to the concept of a &lt;span class="caps"&gt;REST&lt;/span&gt; resource as originally
described by Roy Fielding. Here, I’m going to expand on this
observation by exploring a few ramifications of the same topic.&lt;/p&gt;


&lt;h2&gt;Resources, controllers, and models (or lack thereof)&lt;/h2&gt;

	&lt;p&gt;As I explained in the previous post, the concept of “resource” has no
database implications&amp;mdash;indeed, no implementation implications.
A resource does not have to have a corresponding model. It also does
not have to have a corresponding controller. Resources are far more
high-level than controllers and models. Controllers and models are
tools with which you provide access to representations of resources.&lt;/p&gt;


	&lt;p&gt;However, if you want to draw a line between resources and Rails, by
far the better line to draw is the one that points to controllers
rather than models. A controller is not a resource, but it comes
closer than anything else in your application to taking on the
features of your resources. Models are another big step away.&lt;/p&gt;


	&lt;p&gt;If controllers are closest to resources, how does this play out? One
way is in the creation of resources for which requests are handled by
a controller that has no corresponding model.&lt;/p&gt;


	&lt;p&gt;My favorite example of a likely modelless resource is the shopping
cart.  In &lt;i&gt;Ruby for Rails&lt;/i&gt;, I use a shopping cart in my central
example.  When I started working on this application, I tried to model
it directly; I imagined I would have a ShoppingCart class, a
shopping_carts table, and so forth.&lt;/p&gt;


	&lt;p&gt;I quickly realized, however, that I didn’t need that. What I was
calling a “shopping cart” was really a virtual construct or, in Rails
terms, a view. I had Order objects and Customer objects, and the shopping
cart was basically a screen showing all of a particular customer’s
open orders. Calling it a “shopping cart” was just a kind of semantic
sugar. There was no need to persist it separately from the persistence
of the orders and the customer.&lt;/p&gt;


	&lt;p&gt;If I were writing the same application today using RESTful idioms, I
would in all likelihood do:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;map.resources :customers do |c|
  c.resource :shopping_cart
end&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;or words to that effect. I would then have a shopping_carts
controller, with a show action (probably leaving all the related &lt;span class="caps"&gt;CRUD&lt;/span&gt;
stuff back in the orders controller, though there might be several
ways to approach that part of it). And I would, without hesitation, describe
the
shopping cart as a resource&amp;mdash;even though it has no ShoppingCart
model behind it. From
the perspective of the consumers of my resources, it doesn’t matter
whether there’s a ShoppingCart model (and shopping_carts database
table) or not. I can decide on the best application design, and use
RESTful Rails techniques to support my design decisions appropriately.&lt;/p&gt;


	&lt;p&gt;A resource is not a model, and it’s also not a controller. Identifying
the resource with the controller is, however, somewhat closer to the
mark. The controller layer conforms most closely to the resource
mapping, which makes sense since the controller is the port of call
when someone connects to your application.&lt;/p&gt;


	&lt;p&gt;Another area where misunderstandings arise in the course of designing RESTful services in Rails
is in the matter of how identifiers (URI) map to resources&amp;mdash;and not just how, but
how many.&lt;/p&gt;


&lt;h2&gt;Identifiers and resources: not always one-to-one&lt;/h2&gt;

	&lt;p&gt;I’ve seen people tie themselves in knots trying to come up with the
best way to label and/or nest resources. One of the principles that’s
gotten lost in the mix is that the ratio between resources and
identifiers does not have to be one-to-one. Fielding states:&lt;/p&gt;


	&lt;blockquote&gt;
		&lt;p&gt;[A] resource can have many identifiers. In other words, there may exist
two or more different &lt;span class="caps"&gt;URI&lt;/span&gt; that have equivalent semantics when used to
access a server. It is also possible to have two &lt;span class="caps"&gt;URI&lt;/span&gt; that result in
the same mechanism being used upon access to the server, and yet those
&lt;span class="caps"&gt;URI&lt;/span&gt; identify two different resources because they don’t mean the same
thing.&lt;/p&gt;
	&lt;/blockquote&gt;


	&lt;p&gt;Therefore, it’s possible that this:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;http://dabsite.com&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;and this:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;http://dabsite.com/welcome&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;can identify the same resource, which would probably be described as
something like “The welcome and orientation information at
dabsite.com”.  The reason they’re the same resource is not that they
generate the same &lt;span class="caps"&gt;HTML&lt;/span&gt;.  Rather, they’re the same resource because
they’re published as the same resource.&lt;/p&gt;


	&lt;p&gt;It’s also possible that this: &lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;http://dabsite.com/orders/211   # 211th order in the system&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;and this: &lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;http://dabsite.com/orders/042208-003  # third order placed on 4/22/08&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;identify different resources, even if the third order placed on
4/22/08 happens to be the 211th order in the system. That’s because
resources are not database rows. In this case, the two requests might
generate the same &lt;span class="caps"&gt;HTML&lt;/span&gt;, but still pertain to different resources.&lt;/p&gt;


	&lt;p&gt;You don’t have to make a point of having a non-one-to-one ratio
between your resources and your identifiers. Just be aware that if
such a ratio emerges, in either direction, you’re not doing anything
inherently “unRESTful.”&lt;/p&gt;


&lt;h2&gt;&lt;span class="caps"&gt;CRUD&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; and resources&lt;/h2&gt;

	&lt;p&gt;One of the nice things about the &lt;span class="caps"&gt;REST&lt;/span&gt; support in Rails is that it 
dovetails with &lt;span class="caps"&gt;CRUD&lt;/span&gt;-based thinking about modeling. I add in haste: 
&lt;span class="caps"&gt;REST&lt;/span&gt; is not &lt;span class="caps"&gt;CRUD&lt;/span&gt;, and &lt;span class="caps"&gt;CRUD&lt;/span&gt; is not &lt;span class="caps"&gt;REST&lt;/span&gt;. (That’s no secret, but I want
to go on record with it.) But in Rails, there’s a nice relationship
between them.&lt;/p&gt;


	&lt;p&gt;The &lt;span class="caps"&gt;REST&lt;/span&gt; support in Rails emphasizes the convention of &lt;span class="caps"&gt;CRUD&lt;/span&gt;
operations. map.resources gives you a fistful of named routes that
have built-in knowledge of &lt;span class="caps"&gt;CRUD&lt;/span&gt; action names. The emphasis on &lt;span class="caps"&gt;CRUD&lt;/span&gt; at
this level encourages you to think of modeling for &lt;span class="caps"&gt;CRUD&lt;/span&gt;. Instead of
having, say, a users controller with a borrow_book action, you can
have a loans controller with a create action. In many cases, this
way of thinking might also wag the dog of your domain modeling. Thinking
about &lt;span class="caps"&gt;CRUD&lt;/span&gt; in the controller might, for example, lead you to conclude that
you should have a Loan model.&lt;/p&gt;


	&lt;p&gt;It’s perfectly fine&amp;mdash;indeed, in my view, it’s very productive&amp;mdash;to
think along these lines, to bring your modeling and your &lt;span class="caps"&gt;REST&lt;/span&gt;-friendly
&lt;span class="caps"&gt;CRUD&lt;/span&gt; operations into harmony, as long as you understand that none of this
is actually about resources as such. Rather, it’s about the Rails
flavor of implementing the handlers that underpin the creation of
resource representations.&lt;/p&gt;


	&lt;p&gt;Does that sound like just a lot of extra words? It isn’t. It’s a lot
of words, but they’re not extra. Again, it’s important not to squeeze
the entire framework into the “resource” label. Let a resource be a
resource, and let the handler layers be handler layers. They’re nicely
engineered&amp;mdash;but they’re not resources.&lt;/p&gt;


	&lt;p&gt;And then there’s the word “representation,” which crept into my “extra words” 
sentence but which is the least extra of all of them.&lt;/p&gt;


&lt;h2&gt;Representations: the one that got away&lt;/h2&gt;

	&lt;p&gt;The representation is, in my view, the one that got away: the central
concept in &lt;span class="caps"&gt;REST&lt;/span&gt; that no one in the Rails world ever seems to talk
about. We need to, though. It’s vitally important.&lt;/p&gt;


	&lt;p&gt;Your server does not traffic in resources. It traffics in
representations of resources. Users of your application do not receive
resources. They receive representations. The distinction is big; at
stake is the entire meaning, and meaningfulness, of the notion of a
resource.&lt;/p&gt;


	&lt;p&gt;We need the concept of “representation” because it’s the part of &lt;span class="caps"&gt;REST&lt;/span&gt;
theory that relieves the pressure on the term “resource.” After all, how can a resource be a
“conceptual mapping” (Fielding) &lt;i&gt;and&lt;/i&gt; a sequence of bytes that a server sends
you &lt;i&gt;and&lt;/i&gt; a controller-model stack…? It can’t, and it’s only
the first of these things. The second, the response itself, delivers a
representation of a resource.&lt;/p&gt;


	&lt;p&gt;One resource can have many representations. There’s no big news here;
we all know that a server can give us a text version of &lt;i&gt;Jane Eyre&lt;/i&gt; or
a movie version or an audio version. (I’ll refrain from getting philosophical
about whether or not a book and a movie are “the same” in any deep sense.
They’re the same enough, in this context.) The point is that we don’t need to
mush everything into the term “resource.” Rather, we benefit by
yanking that term up to the high level where it belongs, and applying
the term “representation” to the actual response we’re getting.&lt;/p&gt;


	&lt;p&gt;Fielding has much more on representations in his dissertation, and I’m
not going to try to paraphrase it here. My point is to encourage the
liberal use of the term in Rails discourse about &lt;span class="caps"&gt;REST&lt;/span&gt;. The poor term
“resource” has already been given too much to do. We need to delegate
some of the domain description to the other terms that apply to it.&lt;/p&gt;


&lt;h2&gt;Now what?&lt;/h2&gt;

	&lt;p&gt;The use of the term “resource” to mean things that, I’ve argued here, it
really doesn’t mean is rather deeply entrenched, and widespread, in Rails
discourse. I don’t have any quick fix for this. I do have a few recommendations, though.&lt;/p&gt;


	&lt;p&gt;First, read
&lt;a href="http://www.ics.uci.edu/~fielding/pubs/dissertation"&gt;Roy Fielding’s dissertation&lt;/a&gt;. You can skip to chapters 5 and 6 and get a great
deal out of them.&lt;/p&gt;


	&lt;p&gt;Second, pay particular attention to the concept of the representation. I don’t think we
can get much further in exploring &lt;span class="caps"&gt;REST&lt;/span&gt; and Rails unless the representation makes a
comeback. “Resource” is just plain spread too thin in the way it’s used in and around
Rails, and there’s no reason why it has to be, if we look at the theory as a whole.&lt;/p&gt;


	&lt;p&gt;Third, and last, don’t assume that any deviation from the out-of-the-box behaviors
in your RESTful Rails applications is unRESTful. The defaults are in place because
they’re high percentage. But they’re just as opinionated as the rest of Rails, and in
some respects more so. That’s OK, but do understand that they’re &lt;span class="caps"&gt;REST&lt;/span&gt;-friendly tools. 
They’re not a definitive statement on the entirety of what &lt;span class="caps"&gt;REST&lt;/span&gt; is.&lt;/p&gt;


	&lt;p&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; is not an easy topic, and it’s unlikely that anyone is
going to create a way for you to create and maintain RESTful applications, over time,
without you trying to get a handle on it and developing your own understanding of
resources, representations, requests, and responses. I hope these posts will help you out in that endeavor.&lt;/p&gt;


&lt;h2&gt;References&lt;/h2&gt;

	&lt;p&gt;Fielding, Roy Thomas. &lt;a href="http://www.ics.uci.edu/~fielding/pubs/dissertation"&gt;Architectural Styles and the Design of
Network-based Software Architectures.&lt;/a&gt;. Doctoral dissertation,
University of California, Irvine, 2000.&lt;/p&gt;
          </content>  </entry>
</feed>
